{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"en/","title":"MinecraftForge Documentation","text":"<p>This is the official documentation for MinecraftForge, the Minecraft modding API.</p> <p>This documentation is only for Forge, this is not a Java tutorial.</p> <p>If you would like to contribute to the docs, read Contributing to the Docs.</p>"},{"location":"en/contributing/","title":"Contributing to This Documentation","text":"<p>You can make a contribution via a PR on GitHub.</p> <p>This documentation is meant to be explanatory. Please explain how to do things, and break it down into reasonable chunks. We have a wiki elsewhere that can capture more comprehensive code examples.</p> <p>Our audience is anyone who wants to understand how to build a mod using Forge.</p> <p>Please don\u2019t try to turn this documentation into a tutorial on Java Development - it is intended for people who understand how a Java class works, and other fundamental structures of Java.</p>"},{"location":"en/contributing/#style-guide","title":"Style Guide","text":"<p>Important</p> <p>Please use two spaces to indent, not tabs.</p> <p>Titles should be capitalized in the standard titling format. For example,</p> <ul> <li>Guide For Contributing to This Documentation</li> <li>Building and Testing Your Mod</li> </ul> <p>Essentially, capitalize everything but unimportant words.</p> <p>Spelling, grammar, and syntax should follow those of American English. Also, prefer using separate words over contractions (e.g. \u201care not\u201d instead of \u201caren\u2019t\u201d).</p> <p>Please use equals and dash underlines, instead of <code>#</code> and <code>##</code>. For h3 and lower, <code>###</code> etc. is fine. The source of this file contains an example for equals and dash underlining. Equals underlines create h1 text, and dash underlines create h2 text.</p> <p>When referencing fields and methods outside of code block snippets, they should use a <code>#</code> separator (e.g. <code>ClassName#methodName</code>). Inner classes should use a <code>$</code> separator (e.g. <code>ClassName$InnerClassName</code>).</p> <p>JSON code block snippets should use <code>js</code> syntax highlighting.</p> <p>All links should have their location specified at the bottom of the page. Any internal links should reference the page via their relative path.</p> <p>Admonitions (represented by <code>!!! &lt;type&gt;</code>) must be formatted as documented; otherwise they may end up rendering incorrectly.</p>"},{"location":"en/advanced/accesstransformers/","title":"Access Transformers","text":"<p>Access Transformers (ATs for short) allow for widening the visibility and modifying the <code>final</code> flags of classes, methods, and fields. They allow modders to access and modify otherwise inaccessible members in classes outside their control.</p> <p>The specification document can be viewed on the Minecraft Forge GitHub.</p>"},{"location":"en/advanced/accesstransformers/#adding-ats","title":"Adding ATs","text":"<p>Adding an Access Transformer to your mod project is as simple as adding a single line into your <code>build.gradle</code>:</p> <pre><code>// This block is where your mappings version is also specified\nminecraft {\n  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')\n}</code></pre> <p>After adding or modifying the Access Transformer, the gradle project must be refreshed for the transformations to take effect.</p> <p>During development, the AT file can be anywhere specified by the line above. However, when loading in a non-development environment, Forge will only search for the exact path of <code>META-INF/accesstransformer.cfg</code> in your JAR file.</p>"},{"location":"en/advanced/accesstransformers/#comments","title":"Comments","text":"<p>All text after a <code>#</code> until the end of the line will be treated as a comment and will not be parsed.</p>"},{"location":"en/advanced/accesstransformers/#access-modifiers","title":"Access Modifiers","text":"<p>Access modifiers specify to what new member visibility the given target will be transformed to. In decreasing order of visibility:</p> <ul> <li><code>public</code> - visible to all classes inside and outside its package</li> <li><code>protected</code> - visible only to classes inside the package and subclasses</li> <li><code>default</code> - visible only to classes inside the package</li> <li><code>private</code> - visible only to inside the class</li> </ul> <p>A special modifier <code>+f</code> and <code>-f</code> can be appended to the aforementioned modifiers to either add or remove respectively the <code>final</code> modifier, which prevents subclassing, method overriding, or field modification when applied.</p> <p>Warning</p> <p>Directives only modify the method they directly reference; any overriding methods will not be access-transformed. It is advised to ensure transformed methods do not have non-transformed overrides that restrict the visibility, which will result in the JVM throwing an error.</p> <p>Examples of methods that can be safely transformed are <code>private</code> methods, <code>final</code> methods (or methods in <code>final</code> classes), and <code>static</code> methods.</p>"},{"location":"en/advanced/accesstransformers/#targets-and-directives","title":"Targets and Directives","text":"<p>Important</p> <p>When using Access Transformers on Minecraft classes, the SRG name must be used for fields and methods.</p>"},{"location":"en/advanced/accesstransformers/#classes","title":"Classes","text":"<p>To target classes: <pre><code>&lt;access modifier&gt; &lt;fully qualified class name&gt;</code></pre> Inner classes are denoted by combining the fully qualified name of the outer class and the name of the inner class with a <code>$</code> as separator.</p>"},{"location":"en/advanced/accesstransformers/#fields","title":"Fields","text":"<p>To target fields: <pre><code>&lt;access modifier&gt; &lt;fully qualified class name&gt; &lt;field name&gt;</code></pre></p>"},{"location":"en/advanced/accesstransformers/#methods","title":"Methods","text":"<p>Targeting methods require a special syntax to denote the method parameters and return type: <pre><code>&lt;access modifier&gt; &lt;fully qualified class name&gt; &lt;method name&gt;(&lt;parameter types&gt;)&lt;return type&gt;</code></pre></p>"},{"location":"en/advanced/accesstransformers/#specifying-types","title":"Specifying Types","text":"<p>Also called \u201cdescriptors\u201d: see the Java Virtual Machine Specification, SE 8, sections 4.3.2 and 4.3.3 for more technical details.</p> <ul> <li><code>B</code> - <code>byte</code>, a signed byte</li> <li><code>C</code> - <code>char</code>, a Unicode character code point in UTF-16</li> <li><code>D</code> - <code>double</code>, a double-precision floating-point value</li> <li><code>F</code> - <code>float</code>, a single-precision floating-point value</li> <li><code>I</code> - <code>integer</code>, a 32-bit integer</li> <li><code>J</code> - <code>long</code>, a 64-bit integer</li> <li><code>S</code> - <code>short</code>, a signed short</li> <li><code>Z</code> - <code>boolean</code>, a <code>true</code> or <code>false</code> value</li> <li><code>[</code> - references one dimension of an array</li> <li>Example: <code>[[S</code> refers to <code>short[][]</code></li> <li><code>L&lt;class name&gt;;</code> - references a reference type</li> <li>Example: <code>Ljava/lang/String;</code> refers to <code>java.lang.String</code> reference type (note the use of slashes instead of periods)</li> <li><code>(</code> - references a method descriptor, parameters should be supplied here or nothing if no parameters are present</li> <li>Example: <code>&lt;method&gt;(I)Z</code> refers to a method that requires an integer argument and returns a boolean</li> <li><code>V</code> - indicates a method returns no value, can only be used at the end of a method descriptor</li> <li>Example: <code>&lt;method&gt;()V</code> refers to a method that has no arguments and returns nothing</li> </ul>"},{"location":"en/advanced/accesstransformers/#examples","title":"Examples","text":"<pre><code># Makes public the ByteArrayToKeyFunction interface in Crypt\npublic net.minecraft.util.Crypt$ByteArrayToKeyFunction\n\n# Makes protected and removes the final modifier from 'random' in MinecraftServer\nprotected-f net.minecraft.server.MinecraftServer f_129758_ #random\n\n# Makes public the 'makeExecutor' method in Util,\n# accepting a String and returns an ExecutorService\npublic net.minecraft.Util m_137477_(Ljava/lang/String;)Ljava/util/concurrent/ExecutorService; #makeExecutor\n\n# Makes public the 'leastMostToIntArray' method in UUIDUtil,\n# accepting two longs and returning an int[]\npublic net.minecraft.core.UUIDUtil m_235872_(JJ)[I #leastMostToIntArray</code></pre>"},{"location":"en/blockentities/","title":"BlockEntities","text":"<p><code>BlockEntities</code> are like simplified <code>Entities</code> that are bound to a Block. They are used to store dynamic data, execute tick based tasks, and dynamic rendering. Some examples from vanilla Minecraft would be handling of inventories on chests, smelting logic on furnaces, or area effects on beacons. More advanced examples exist in mods, such as quarries, sorting machines, pipes, and displays.</p> <p>Note</p> <p><code>BlockEntities</code> aren\u2019t a solution for everything and they can cause lag when used wrongly. When possible, try to avoid them.</p>"},{"location":"en/blockentities/#registering","title":"Registering","text":"<p>Block Entities are created and removed dynamically and as such are not registry objects on their own.</p> <p>In order to create a <code>BlockEntity</code>, you need to extend the <code>BlockEntity</code> class. As such, another object is registered instead to easily create and refer to the type of the dynamic object. For a <code>BlockEntity</code>, these are known as <code>BlockEntityType</code>s.</p> <p>A <code>BlockEntityType</code> can be registered like any other registry object. To construct a <code>BlockEntityType</code>, its builder form can be used via <code>BlockEntityType$Builder#of</code>. This takes in two arguments: a <code>BlockEntityType$BlockEntitySupplier</code> which takes in a <code>BlockPos</code> and <code>BlockState</code> to create a new instance of the associated <code>BlockEntity</code>, and a varargs of <code>Block</code>s which this <code>BlockEntity</code> can be attached to. Building the <code>BlockEntityType</code> is done by calling <code>BlockEntityType$Builder#build</code>. This takes in a <code>Type</code> which represents the type-safe reference used to refer to this registry object in a <code>DataFixer</code>. Since <code>DataFixer</code>s are an optional system to use for mods, this can be passed as <code>null</code>.</p> <pre><code>// For some DeferredRegister&lt;BlockEntityType&lt;?&gt;&gt; REGISTER\npublic static final RegistryObject&lt;BlockEntityType&lt;MyBE&gt;&gt; MY_BE = REGISTER.register(\"mybe\", () -&gt; BlockEntityType.Builder.of(MyBE::new, validBlocks).build(null));\n\n// In MyBE, a BlockEntity subclass\npublic MyBE(BlockPos pos, BlockState state) {\n  super(MY_BE.get(), pos, state);\n}</code></pre>"},{"location":"en/blockentities/#creating-a-blockentity","title":"Creating a <code>BlockEntity</code>","text":"<p>To create a <code>BlockEntity</code> and attach it to a <code>Block</code>, the <code>EntityBlock</code> interface must be implemented on your <code>Block</code> subclass. The method <code>EntityBlock#newBlockEntity(BlockPos, BlockState)</code> must be implemented and return a new instance of your <code>BlockEntity</code>.</p>"},{"location":"en/blockentities/#storing-data-within-your-blockentity","title":"Storing Data within your <code>BlockEntity</code>","text":"<p>In order to save data, override the following two methods: <pre><code>BlockEntity#saveAdditional(CompoundTag tag)\n\nBlockEntity#load(CompoundTag tag)</code></pre> These methods are called whenever the <code>LevelChunk</code> containing the <code>BlockEntity</code> gets loaded from/saved to a tag. Use them to read and write to the fields in your block entity class.</p> <p>Note<p>Whenever your data changes, you need to call <code>BlockEntity#setChanged</code>; otherwise, the <code>LevelChunk</code> containing your <code>BlockEntity</code> might be skipped while the level is saved.</p> </p> <p>Important<p>It is important that you call the <code>super</code> methods!</p> </p> <p>The tag names <code>id</code>, <code>x</code>, <code>y</code>, <code>z</code>, <code>ForgeData</code> and <code>ForgeCaps</code> are reserved by the <code>super</code> methods.</p>"},{"location":"en/blockentities/#ticking-blockentities","title":"Ticking <code>BlockEntities</code>","text":"<p>If you need a ticking <code>BlockEntity</code>, for example to keep track of the progress during a smelting process, another method must be implemented and overridden within <code>EntityBlock</code>: <code>EntityBlock#getTicker(Level, BlockState, BlockEntityType)</code>. This can implement different tickers depending on which logical side the user is on, or just implement one general ticker. In either case, a <code>BlockEntityTicker</code> must be returned. Since this is a functional interface, it can just take in a method representing the ticker instead:</p> <pre><code>// Inside some Block subclass\n@Nullable\n@Override\npublic &lt;T extends BlockEntity&gt; BlockEntityTicker&lt;T&gt; getTicker(Level level, BlockState state, BlockEntityType&lt;T&gt; type) {\n  return type == MyBlockEntityTypes.MYBE.get() ? MyBlockEntity::tick : null;\n}\n\n// Inside MyBlockEntity\npublic static void tick(Level level, BlockPos pos, BlockState state, MyBlockEntity blockEntity) {\n  // Do stuff\n}</code></pre> <p>Note</p> <p>This method is called each tick; therefore, you should avoid having complicated calculations in here. If possible, you should make more complex calculations every X ticks. (The amount of ticks in a second may be lower then 20 (twenty) but won\u2019t be higher)</p>"},{"location":"en/blockentities/#synchronizing-the-data-to-the-client","title":"Synchronizing the Data to the Client","text":"<p>There are three ways of syncing data to the client: synchronizing on chunk load, on block updates, and with a custom network message.</p>"},{"location":"en/blockentities/#synchronizing-on-levelchunk-load","title":"Synchronizing on LevelChunk Load","text":"<p>For this you need to override <pre><code>BlockEntity#getUpdateTag()\n\nIForgeBlockEntity#handleUpdateTag(CompoundTag tag)</code></pre> Again, this is pretty simple, the first method collects the data that should be sent to the client, while the second one processes that data. If your <code>BlockEntity</code> doesn\u2019t contain much data, you might be able to use the methods out of the Storing Data within your <code>BlockEntity</code> section.</p> <p>Important</p> <p>Synchronizing excessive/useless data for block entities can lead to network congestion. You should optimize your network usage by sending only the information the client needs when the client needs it. For instance, it is more often than not unnecessary to send the inventory of a block entity in the update tag, as this can be synchronized via its <code>AbstractContainerMenu</code>.</p>"},{"location":"en/blockentities/#synchronizing-on-block-update","title":"Synchronizing on Block Update","text":"<p>This method is a bit more complicated, but again you just need to override two or three methods. Here is a tiny example implementation of it: <pre><code>@Override\npublic CompoundTag getUpdateTag() {\n  CompoundTag tag = new CompoundTag();\n  //Write your data into the tag\n  return tag;\n}\n\n@Override\npublic Packet&lt;ClientGamePacketListener&gt; getUpdatePacket() {\n  // Will get tag from #getUpdateTag\n  return ClientboundBlockEntityDataPacket.create(this);\n}\n\n// Can override IForgeBlockEntity#onDataPacket. By default, this will defer to the #load.</code></pre> The static constructors <code>ClientboundBlockEntityDataPacket#create</code> takes:</p> <ul> <li>The <code>BlockEntity</code>.</li> <li>An optional function to get the <code>CompoundTag</code> from the <code>BlockEntity</code>. By default, this uses <code>BlockEntity#getUpdateTag</code>.</li> </ul> <p>Now, to send the packet, an update notification must be given on the server. <pre><code>Level#sendBlockUpdated(BlockPos pos, BlockState oldState, BlockState newState, int flags)</code></pre> The <code>pos</code> should be your <code>BlockEntity</code>\u2018s position. For <code>oldState</code> and <code>newState</code>, you can pass the current <code>BlockState</code> at that position. <code>flags</code> is a bitmask that should contain <code>2</code>, which will sync the changes to the client. See <code>Block</code> for more info as well as the rest of the flags. The flag <code>2</code> is equivalent to <code>Block#UPDATE_CLIENTS</code>.</p>"},{"location":"en/blockentities/#synchronizing-using-a-custom-network-message","title":"Synchronizing Using a Custom Network Message","text":"<p>This way of synchronizing is probably the most complicated but is usually the most optimized, as you can make sure that only the data you need to be synchronized is actually synchronized. You should first check out the <code>Networking</code> section and especially <code>SimpleImpl</code> before attempting this. Once you\u2019ve created your custom network message, you can send it to all users that have the <code>BlockEntity</code> loaded with <code>SimpleChannel#send(PacketDistributor$PacketTarget, MSG)</code>.</p> <p>Warning</p> <p>It is important that you do safety checks, the <code>BlockEntity</code> might already be destroyed/replaced when the message arrives at the player! You should also check if the chunk is loaded (<code>Level#hasChunkAt(BlockPos)</code>).</p>"},{"location":"en/blockentities/ber/","title":"BlockEntityRenderer","text":"<p>A <code>BlockEntityRenderer</code> or <code>BER</code> is used to render blocks in a way that cannot be represented with a static baked model (JSON, OBJ, B3D, others). A block entity renderer requires the block to have a <code>BlockEntity</code>.</p>"},{"location":"en/blockentities/ber/#creating-a-ber","title":"Creating a BER","text":"<p>To create a BER, create a class that inherits from <code>BlockEntityRenderer</code>. It takes a generic argument specifying the block\u2019s <code>BlockEntity</code> class. The generic argument is used in the BER\u2019s <code>render</code> method.</p> <p>Only one BER exists for a given <code>BlockEntityType</code>. Therefore, values that are specific to a single instance in the level should be stored in the block entity being passed to the renderer rather than in the BER itself. For example, an integer that increments every frame, if stored in the BER, will increment every frame for every block entity of this type in the level.</p>"},{"location":"en/blockentities/ber/#render","title":"<code>render</code>","text":"<p>This method is called every frame in order to render the block entity. </p>"},{"location":"en/blockentities/ber/#parameters","title":"Parameters","text":"<ul> <li><code>blockEntity</code>: This is the instance of the block entity being rendered.</li> <li><code>partialTicks</code>: The amount of time, in fractions of a tick, that has passed since the last full tick.</li> <li><code>poseStack</code>: A stack holding four-dimensional matrix entries offset to the current position of the block entity.</li> <li><code>bufferSource</code>: A rendering buffer able to access a vertex consumer.</li> <li><code>combinedLight</code>: An integer of the current light value on the block entity.</li> <li><code>combinedOverlay</code>: An integer set to the current overlay of the block entity, usually <code>OverlayTexture#NO_OVERLAY</code> or 655,360.</li> </ul>"},{"location":"en/blockentities/ber/#registering-a-ber","title":"Registering a BER","text":"<p>In order to register a BER, you must subscribe to the <code>EntityRenderersEvent$RegisterRenderers</code> event on the mod event bus and call <code>#registerBlockEntityRenderer</code>.</p>"},{"location":"en/blocks/","title":"Blocks","text":"<p>Blocks are, obviously, essential to the Minecraft world. They make up all of the terrain, structures, and machines. Chances are if you are interested in making a mod, then you will want to add some blocks. This page will guide you through the creation of blocks, and some of the things you can do with them.</p>"},{"location":"en/blocks/#creating-a-block","title":"Creating a Block","text":""},{"location":"en/blocks/#basic-blocks","title":"Basic Blocks","text":"<p>For simple blocks, which need no special functionality (think cobblestone, wooden planks, etc.), a custom class is not necessary. You can create a block by instantiating the <code>Block</code> class with a <code>BlockBehaviour$Properties</code> object. This <code>BlockBehaviour$Properties</code> object can be made using <code>BlockBehaviour$Properties#of</code>, and it can be customized by calling its methods. For instance:</p> <ul> <li><code>strength</code> - The hardness controls the time it takes to break the block. It is an arbitrary value. For reference, stone has a hardness of 1.5, and dirt 0.5. If the block should be unbreakable a hardness of -1.0 should be used, see the definition of <code>Blocks#BEDROCK</code> as an example. The resistance controls the explosion resistance of the block. For reference, stone has a resistance of 6.0, and dirt 0.5.</li> <li><code>sound</code> - Controls the sound the block makes when it is punched, broken, or placed. Requires a <code>SoundType</code> argument, see the sounds page for more details.</li> <li><code>lightLevel</code> - Controls the light emission of the block. Takes a function with a <code>BlockState</code> parameter that returns a value from zero to fifteen.</li> <li><code>friction</code> - Controls how slippery the block is. For reference, ice has a slipperiness of 0.98.</li> </ul> <p>All these methods are chainable which means you can call them in series. See the <code>Blocks</code> class for examples of this.</p> <p>Note</p> <p>Blocks have no setter for their <code>CreativeModeTab</code>. This is now handled by the <code>CreativeModeTabEvent$BuildContents</code> if the block has an associated item (e.g. <code>BlockItem</code>). Furthermore, there is no setter for translation key as it is now generated from the registry name.</p>"},{"location":"en/blocks/#advanced-blocks","title":"Advanced Blocks","text":"<p>Of course, the above only allows for extremely basic blocks. If you want to add functionality, like player interaction, a custom class is required. However, the <code>Block</code> class has many methods and unfortunately not every single one can be documented here. See the rest of the pages in this section for things you can do with blocks.</p>"},{"location":"en/blocks/#registering-a-block","title":"Registering a Block","text":"<p>Blocks must be registered to function.</p> <p>Important</p> <p>A block in the level and a \u201cblock\u201d in an inventory are very different things. A block in the level is represented by an <code>BlockState</code>, and its behavior defined by an instance of <code>Block</code>. Meanwhile, an item in an inventory is an <code>ItemStack</code>, controlled by an <code>Item</code>. As a bridge between the different worlds of <code>Block</code> and <code>Item</code>, there exists the class <code>BlockItem</code>. <code>BlockItem</code> is a subclass of <code>Item</code> that has a field <code>block</code> that holds a reference to the <code>Block</code> it represents. <code>BlockItem</code> defines some of the behavior of a \u201cblock\u201d as an item, like how a right click places the block. It\u2019s possible to have a <code>Block</code> without an <code>BlockItem</code>. (E.g. <code>minecraft:water</code> exists a block, but not an item. It is therefore impossible to hold it in an inventory as one.)</p> <p>When a block is registered, only a block is registered. The block does not automatically have an <code>BlockItem</code>. To create a basic <code>BlockItem</code> for a block, one should set the registry name of the <code>BlockItem</code> to that of its <code>Block</code>. Custom subclasses of <code>BlockItem</code> may be used as well. Once an <code>BlockItem</code> has been registered for a block, <code>Block#asItem</code> can be used to retrieve it. <code>Block#asItem</code> will return <code>Items#AIR</code> if there is no <code>BlockItem</code> for the <code>Block</code>, so if you are not certain that there is an <code>BlockItem</code> for the <code>Block</code> you are using, check for if <code>Block#asItem</code> returns <code>Items#AIR</code>.</p>"},{"location":"en/blocks/#optionally-registering-blocks","title":"Optionally Registering Blocks","text":"<p>In the past there have been several mods that have allowed users to disable blocks/items in a configuration file. However, you shouldn\u2019t do this. There is no limit on the amount of blocks that can be register, so register all blocks in your mod! If you want a block to be disabled through a configuration file, you should disable the crafting recipe. If you would like to disable the block in the creative tab, use a <code>FeatureFlag</code> when building the contents within <code>CreativeModeTabEvent$BuildContents</code>.</p>"},{"location":"en/blocks/#further-reading","title":"Further Reading","text":"<p>For information about block properties, such as those used for vanilla blocks like fences, walls, and many more, see the section on blockstates.</p>"},{"location":"en/blocks/states/","title":"Block States","text":""},{"location":"en/blocks/states/#legacy-behavior","title":"Legacy Behavior","text":"<p>In Minecraft 1.7 and previous versions, blocks which need to store placement or state data that did not have BlockEntities used metadata. Metadata was an extra number stored with the block, allowing different rotations, facings, or even completely separate behaviors within a block.</p> <p>However, the metadata system was confusing and limited, since it was stored as only a number alongside the block ID, and had no meaning except what was commented in the code. For example, to implement a block that can face a direction and be on either the upper or lower half of a block space (such as a stair): </p> <pre><code>switch (meta) {\n  case 0: { ... } // south and on the lower half of the block\n  case 1: { ... } // south on the upper side of the block\n  case 2: { ... } // north and on the lower half of the block\n  case 3: { ... } // north and on the upper half of the block\n  // ... etc. ...\n}</code></pre> <p>Because the numbers carry no meaning by themselves, no one could know what they represent unless they had access to the source code and comments.</p>"},{"location":"en/blocks/states/#introduction-of-states","title":"Introduction of States","text":"<p>In Minecraft 1.8 and above, the metadata system, along with the block ID system, was deprecated and eventually replaced with the block state system. The block state system abstracts out the details of the block\u2019s properties from the other behaviors of the block.</p> <p>Each property of a block is described by an instance of <code>Property&lt;?&gt;</code>. Examples of block properties include instruments (<code>EnumProperty&lt;NoteBlockInstrument&gt;</code>), facing (<code>DirectionProperty</code>), poweredness (<code>Property&lt;Boolean&gt;</code>), etc. Each property has the value of the type <code>T</code> parametrized by <code>Property&lt;T&gt;</code>.</p> <p>A unique pair can be constructed from the <code>Block</code> and a map of the <code>Property&lt;?&gt;</code> to their associated values. This unique pair is called a <code>BlockState</code>.</p> <p>The previous system of meaningless metadata values were replaced by a system of block properties, which are easier to interpret and deal with. Previously, a stone button which is facing east and is powered or held down is represented by \u201c<code>minecraft:stone_button</code> with metadata <code>9</code>. Now, this is represented by \u201c<code>minecraft:stone_button[facing=east,powered=true]</code>\u201d.</p>"},{"location":"en/blocks/states/#proper-usage-of-block-states","title":"Proper Usage of Block States","text":"<p>The <code>BlockState</code> system is a flexible and powerful system, but it also has limitations. <code>BlockState</code>s are immutable, and all combinations of their properties are generated on startup of the game. This means that having a <code>BlockState</code> with many properties and possible values will slow down the loading of the game, and befuddle anyone trying to make sense of your block logic.</p> <p>Not all blocks and situations require the usage of <code>BlockState</code>; only the most basic properties of a block should be put into a <code>BlockState</code>, and any other situation is better off with having a <code>BlockEntity</code> or being a separate <code>Block</code>. Always consider if you actually need to use blockstates for your purposes.</p> <p>Note</p> <p>A good rule of thumb is: if it has a different name, it should be a separate block.</p> <p>An example is making chair blocks: the direction of the chair should be a property, while the different types of wood should be separated into different blocks. An \u201cOak Chair\u201d facing east (<code>oak_chair[facing=east]</code>) is different from a \u201cSpruce Chair\u201d facing west (<code>spruce_chair[facing=west]</code>).</p>"},{"location":"en/blocks/states/#implementing-block-states","title":"Implementing Block States","text":"<p>In your Block class, create or reference <code>static final</code> <code>Property&lt;?&gt;</code> objects for every property that your Block has. You are free to make your own <code>Property&lt;?&gt;</code> implementations, but the means to do that are not covered in this article. The vanilla code provides several convenience implementations:</p> <ul> <li><code>IntegerProperty</code><ul> <li>Implements <code>Property&lt;Integer&gt;</code>. Defines a property that holds an integer value.</li> <li>Created by calling <code>IntegerProperty#create(String propertyName, int minimum, int maximum)</code>.</li> </ul> </li> <li><code>BooleanProperty</code><ul> <li>Implements <code>Property&lt;Boolean&gt;</code>. Defines a property that holds a <code>true</code> or <code>false</code> value.</li> <li>Created by calling <code>BooleanProperty#create(String propertyName)</code>.</li> </ul> </li> <li><code>EnumProperty&lt;E extends Enum&lt;E&gt;&gt;</code><ul> <li>Implements <code>Property&lt;E&gt;</code>. Defines a property that can take on the values of an Enum class.</li> <li>Created by calling <code>EnumProperty#create(String propertyName, Class&lt;E&gt; enumClass)</code>.</li> <li>It is also possible to use only a subset of the Enum values (e.g. 4 out of 16 <code>DyeColor</code>s). See the overloads of <code>EnumProperty#create</code>.</li> </ul> </li> <li><code>DirectionProperty</code><ul> <li>This is a convenience implementation of <code>EnumProperty&lt;Direction&gt;</code></li> <li>Several convenience predicates are also provided. For example, to get a property that represents the cardinal directions, call <code>DirectionProperty.create(\"&lt;name&gt;\", Direction.Plane.HORIZONTAL)</code>; to get the X directions, <code>DirectionProperty.create(\"&lt;name&gt;\", Direction.Axis.X)</code>.</li> </ul> </li> </ul> <p>The class <code>BlockStateProperties</code> contains shared vanilla properties which should be used or referenced whenever possible, in place of creating your own properties.</p> <p>When you have your desired <code>Property&lt;&gt;</code> objects, override <code>Block#createBlockStateDefinition(StateDefinition$Builder)</code> in your Block class. In that method, call <code>StateDefinition$Builder#add(...);</code>  with the parameters as every <code>Property&lt;?&gt;</code> you wish the block to have.</p> <p>Every block will also have a \u201cdefault\u201d state that is automatically chosen for you. You can change this \u201cdefault\u201d state by calling the <code>Block#registerDefaultState(BlockState)</code> method from your constructor. When your block is placed it will become this \u201cdefault\u201d state. An example from <code>DoorBlock</code>:</p> <pre><code>this.registerDefaultState(\n  this.stateDefinition.any()\n    .setValue(FACING, Direction.NORTH)\n    .setValue(OPEN, false)\n    .setValue(HINGE, DoorHingeSide.LEFT)\n    .setValue(POWERED, false)\n    .setValue(HALF, DoubleBlockHalf.LOWER)\n);</code></pre> <p>If you wish to change what <code>BlockState</code> is used when placing your block, you can overwrite <code>Block#getStateForPlacement(BlockPlaceContext)</code>. This can be used to, for example, set the direction of your block depending on where the player is standing when they place it.</p> <p>Because <code>BlockState</code>s are immutable, and all combinations of their properties are generated on startup of the game, calling <code>BlockState#setValue(Property&lt;T&gt;, T)</code> will simply go to the <code>Block</code>\u2018s <code>StateHolder</code> and request the <code>BlockState</code> with the set of values you want.</p> <p>Because all possible <code>BlockState</code>s are generated at startup, you are free and encouraged to use the reference equality operator (<code>==</code>) to check if two <code>BlockState</code>s are equal.</p>"},{"location":"en/blocks/states/#using-blockstates","title":"Using <code>BlockState</code>\u2018s","text":"<p>You can get the value of a property by calling <code>BlockState#getValue(Property&lt;?&gt;)</code>, passing it the property you want to get the value of. If you want to get a <code>BlockState</code> with a different set of values, simply call <code>BlockState#setValue(Property&lt;T&gt;, T)</code> with the property and its value.</p> <p>You can get and place <code>BlockState</code>\u2018s in the level using <code>Level#setBlockAndUpdate(BlockPos, BlockState)</code> and <code>Level#getBlockState(BlockPos)</code>. If you are placing a <code>Block</code>, call <code>Block#defaultBlockState()</code> to get the \u201cdefault\u201d state, and use subsequent calls to <code>BlockState#setValue(Property&lt;T&gt;, T)</code> as stated above to achieve the desired state.</p>"},{"location":"en/concepts/events/","title":"Events","text":"<p>Forge uses an event bus that allows mods to intercept events from various Vanilla and mod behaviors.</p> <p>Example: An event can be used to perform an action when a Vanilla stick is right clicked.</p> <p>The main event bus used for most events is located at <code>MinecraftForge#EVENT_BUS</code>. There is another event bus for mod specific events located at <code>FMLJavaModLoadingContext#getModEventBus</code> that you should only use in specific cases. More information about this bus can be found below.</p> <p>Every event is fired on one of these busses: most events are fired on the main forge event bus, but some are fired on the mod specific event buses.</p> <p>An event handler is some method that has been registered to an event bus.</p>"},{"location":"en/concepts/events/#creating-an-event-handler","title":"Creating an Event Handler","text":"<p>Event handlers methods have a single parameter and do not return a result. The method could be static or instance depending on implementation.</p> <p>Event handlers can be directly registered using <code>IEventBus#addListener</code> for or <code>IEventBus#addGenericListener</code> for generic events (as denoted by subclassing <code>GenericEvent&lt;T&gt;</code>). Either listener adder takes in a consumer representing the method reference. Generic event handlers need to specify the class of the generic as well. Event handlers must be registered within the constructor of the main mod class.</p> <pre><code>// In the main mod class ExampleMod\n\n// This event is on the mod bus\nprivate void modEventHandler(RegisterEvent event) {\n    // Do things here\n}\n\n// This event is on the forge bus\nprivate static void forgeEventHandler(AttachCapabilitiesEvent&lt;Entity&gt; event) {\n    // ...\n}\n\n// In the mod constructor\nmodEventBus.addListener(this::modEventHandler);\nforgeEventBus.addGenericListener(Entity.class, ExampleMod::forgeEventHandler);</code></pre>"},{"location":"en/concepts/events/#instance-annotated-event-handlers","title":"Instance Annotated Event Handlers","text":"<p>This event handler listens for the <code>EntityItemPickupEvent</code>, which is, as the name states, posted to the event bus whenever an <code>Entity</code> picks up an item.</p> <pre><code>public class MyForgeEventHandler {\n    @SubscribeEvent\n    public void pickupItem(EntityItemPickupEvent event) {\n        System.out.println(\"Item picked up!\");\n    }\n}</code></pre> <p>To register this event handler, use <code>MinecraftForge.EVENT_BUS.register(...)</code> and pass it an instance of the class the event handler is within. If you want to register this handler to the mod specific event bus, you should use <code>FMLJavaModLoadingContext.get().getModEventBus().register(...)</code> instead.</p>"},{"location":"en/concepts/events/#static-annotated-event-handlers","title":"Static Annotated Event Handlers","text":"<p>An event handler may also be static. The handling method is still annotated with <code>@SubscribeEvent</code>. The only difference from an instance handler is that it is also marked <code>static</code>. In order to register a static event handler, an instance of the class won\u2019t do. The <code>Class</code> itself has to be passed in. An example:</p> <pre><code>public class MyStaticForgeEventHandler {\n    @SubscribeEvent\n    public static void arrowNocked(ArrowNockEvent event) {\n        System.out.println(\"Arrow nocked!\");\n    }\n}</code></pre> <p>which must be registered like this: <code>MinecraftForge.EVENT_BUS.register(MyStaticForgeEventHandler.class)</code>.</p>"},{"location":"en/concepts/events/#automatically-registering-static-event-handlers","title":"Automatically Registering Static Event Handlers","text":"<p>A class may be annotated with the <code>@Mod$EventBusSubscriber</code> annotation. Such a class is automatically registered to <code>MinecraftForge#EVENT_BUS</code> when the <code>@Mod</code> class itself is constructed. This is essentially equivalent to adding <code>MinecraftForge.EVENT_BUS.register(AnnotatedClass.class);</code> at the end of the <code>@Mod</code> class\u2019s constructor.</p> <p>You can pass the bus you want to listen to the <code>@Mod$EventBusSubscriber</code> annotation. It is recommended you also specify the mod id, since the annotation process may not be able to figure it out, and the bus you are registering to, since it serves as a reminder to make sure you are on the correct one. You can also specify the <code>Dist</code>s or physical sides to load this event subscriber on. This can be used to not load client specific event subscribers on the dedicated server.</p> <p>An example for a static event listener listening to <code>RenderLevelStageEvent</code> which will only be called on the client:</p> <pre><code>@Mod.EventBusSubscriber(modid = \"mymod\", bus = Bus.FORGE, value = Dist.CLIENT)\npublic class MyStaticClientOnlyEventHandler {\n    @SubscribeEvent\n    public static void drawLast(RenderLevelStageEvent event) {\n        System.out.println(\"Drawing!\");\n    }\n}</code></pre> <p>Note</p> <p>This does not register an instance of the class; it registers the class itself (i.e. the event handling methods must be static).</p>"},{"location":"en/concepts/events/#canceling","title":"Canceling","text":"<p>If an event can be canceled, it will be marked with the <code>@Cancelable</code> annotation, and the method <code>Event#isCancelable()</code> will return <code>true</code>. The cancel state of a cancelable event may be modified by calling <code>Event#setCanceled(boolean canceled)</code>, wherein passing the boolean value <code>true</code> is interpreted as canceling the event, and passing the boolean value <code>false</code> is interpreted as \u201cun-canceling\u201d the event. However, if the event cannot be canceled (as defined by <code>Event#isCancelable()</code>), an <code>UnsupportedOperationException</code> will be thrown regardless of the passed boolean value, since the cancel state of a non-cancelable event event is considered immutable.</p> <p>Important</p> <p>Not all events can be canceled! Attempting to cancel an event that is not cancelable will result in an unchecked <code>UnsupportedOperationException</code> being thrown, which is expected to result in the game crashing! Always check that an event can be canceled using <code>Event#isCancelable()</code> before attempting to cancel it!</p>"},{"location":"en/concepts/events/#results","title":"Results","text":"<p>Some events have an <code>Event$Result</code>. A result can be one of three things: <code>DENY</code> which stops the event, <code>DEFAULT</code> which uses the Vanilla behavior, and <code>ALLOW</code> which forces the action to take place, regardless if it would have originally. The result of an event can be set by calling <code>#setResult</code> with an <code>Event$Result</code> on the event. Not all events have results; an event with a result will be annotated with <code>@HasResult</code>.</p> <p>Important</p> <p>Different events may use results in different ways, refer to the event\u2019s JavaDoc before using the result.</p>"},{"location":"en/concepts/events/#priority","title":"Priority","text":"<p>Event handler methods (marked with <code>@SubscribeEvent</code>) have a priority. You can set the priority of an event handler method by setting the <code>priority</code> value of the annotation. The priority can be any value of the <code>EventPriority</code> enum (<code>HIGHEST</code>, <code>HIGH</code>, <code>NORMAL</code>, <code>LOW</code>, and <code>LOWEST</code>). Event handlers with priority <code>HIGHEST</code> are executed first and from there in descending order until <code>LOWEST</code> events which are executed last.</p>"},{"location":"en/concepts/events/#sub-events","title":"Sub Events","text":"<p>Many events have different variations of themselves. These can be different but all based around one common factor (e.g. <code>PlayerEvent</code>) or can be an event that has multiple phases (e.g. <code>PotionBrewEvent</code>). Take note that if you listen to the parent event class, you will receive calls to your method for all subclasses.</p>"},{"location":"en/concepts/events/#mod-event-bus","title":"Mod Event Bus","text":"<p>The mod event bus is primarily used for listening to lifecycle events in which mods should initialize. Each event on the mod bus is required to implement <code>IModBusEvent</code>. Many of these events are also ran in parallel so mods can be initialized at the same time. This does mean you can\u2019t directly execute code from other mods in these events. Use the <code>InterModComms</code> system for that.</p> <p>These are the four most commonly used lifecycle events that are called during mod initialization on the mod event bus:</p> <ul> <li><code>FMLCommonSetupEvent</code></li> <li><code>FMLClientSetupEvent</code> &amp; <code>FMLDedicatedServerSetupEvent</code></li> <li><code>InterModEnqueueEvent</code></li> <li><code>InterModProcessEvent</code></li> </ul> <p>Note</p> <p>The <code>FMLClientSetupEvent</code> and <code>FMLDedicatedServerSetupEvent</code> are only called on their respective distribution.</p> <p>These four lifecycle events are all ran in parallel since they all are a subclass of <code>ParallelDispatchEvent</code>. If you want to run run code on the main thread during any <code>ParallelDispatchEvent</code>, you can use the <code>#enqueueWork</code> to do so.</p> <p>Next to the lifecycle events, there are a few miscellaneous events that are fired on the mod event bus where you can register, set up, or initialize various things. Most of these events are not ran in parallel in contrast to the lifecycle events. A few examples:</p> <ul> <li><code>RegisterColorHandlersEvent</code></li> <li><code>ModelEvent$BakingCompleted</code></li> <li><code>TextureStitchEvent</code></li> <li><code>RegisterEvent</code></li> </ul> <p>A good rule of thumb: events are fired on the mod event bus when they should be handled during initialization of a mod.</p>"},{"location":"en/concepts/internationalization/","title":"Internationalization and Localization","text":"<p>Internationalization, i18n for short, is a way of designing code so that it requires no changes to be adapted for various languages. Localization is the process of adapting displayed text to the user\u2019s language.</p> <p>I18n is implemented using translation keys. A translation key is a string that identifies a piece of displayable text in no specific language. For example, <code>block.minecraft.dirt</code> is the translation key referring to the name of the Dirt block. This way, displayable text may be referenced with no concern for a specific language. The code requires no changes to be adapted in a new language.</p> <p>Localization will happen in the game\u2019s locale. In a Minecraft client the locale is specified by the language settings. On a dedicated server, the only supported locale is <code>en_us</code>. A list of available locales can be found on the Minecraft Wiki.</p>"},{"location":"en/concepts/internationalization/#language-files","title":"Language files","text":"<p>Language files are located by <code>assets/[namespace]/lang/[locale].json</code> (e.g. all US English translations provided by <code>examplemod</code> would be within <code>assets/examplemod/lang/en_us.json</code>). The file format is simply a json map from translation keys to values. The file must be encoded in UTF-8. Old .lang files can be converted to json using a converter.</p> <pre><code>{\n  \"item.examplemod.example_item\": \"Example Item Name\",\n  \"block.examplemod.example_block\": \"Example Block Name\",\n  \"commands.examplemod.examplecommand.error\": \"Example Command Errored!\"\n}</code></pre>"},{"location":"en/concepts/internationalization/#usage-with-blocks-and-items","title":"Usage with Blocks and Items","text":"<p>Block, Item and a few other Minecraft classes have built-in translation keys used to display their names. These translation keys are specified by overriding <code>#getDescriptionId</code>. Item also has <code>#getDescriptionId(ItemStack)</code> which can be overridden to provide different translation keys depending on ItemStack NBT.</p> <p>By default, <code>#getDescriptionId</code> will return <code>block.</code> or <code>item.</code> prepended to the registry name of the block or item, with the colon replaced by a dot. <code>BlockItem</code>s override this method to take their corresponding <code>Block</code>\u2018s translation key by default. For example, an item with ID <code>examplemod:example_item</code> effectively requires the following line in a language file:</p> <pre><code>{\n  \"item.examplemod.example_item\": \"Example Item Name\"\n}</code></pre> <p>Note</p> <p>The only purpose of a translation key is internationalization. Do not use them for logic. Use registry names instead.</p>"},{"location":"en/concepts/internationalization/#localization-methods","title":"Localization methods","text":"<p>Warning</p> <p>A common issue is having the server localize for clients. The server can only localize in its own locale, which does not necessarily match the locale of connected clients.</p> <p>To respect the language settings of clients, the server should have clients localize text in their own locale using <code>TranslatableComponent</code> or other methods preserving the language neutral translation keys.</p>"},{"location":"en/concepts/internationalization/#netminecraftclientresourceslanguagei18n-client-only","title":"<code>net.minecraft.client.resources.language.I18n</code> (client only)","text":"<p>This I18n class can only be found on a Minecraft client! It is intended to be used by code that only runs on the client. Attempts to use this on a server will throw exceptions and crash.</p> <ul> <li><code>get(String, Object...)</code> localizes in the client\u2019s locale with formatting. The first parameter is a translation key, and the rest are formatting arguments for <code>String.format(String, Object...)</code>.</li> </ul>"},{"location":"en/concepts/internationalization/#translatablecontents","title":"<code>TranslatableContents</code>","text":"<p><code>TranslatableContents</code> is a <code>ComponentContents</code> that is localized and formatted lazily. It is very useful when sending messages to players because it will be automatically localized in their own locale.</p> <p>The first parameter of the <code>TranslatableContents(String, Object...)</code> constructor is a translation key, and the rest are used for formatting. The only supported format specifiers are <code>%s</code> and <code>%1$s</code>, <code>%2$s</code>, <code>%3$s</code> etc. Formatting arguments may be <code>Component</code>s that will be inserted into the resulting formatted text with all their attributes preserved.</p> <p>A <code>MutableComponent</code> can be created using <code>Component#translatable</code> by passing in the <code>TranslatableContents</code>\u2018s parameters. It can also be created using <code>MutableComponent#create</code> by passing in the <code>ComponentContents</code> itself.</p>"},{"location":"en/concepts/internationalization/#textcomponenthelper","title":"<code>TextComponentHelper</code>","text":"<ul> <li><code>createComponentTranslation(CommandSource, String, Object...)</code> creates a localized and formatted <code>MutableComponent</code> depending on a receiver. The localization and formatting is done eagerly if the receiver is a vanilla client. If not, the localization and formatting is done lazily with a <code>Component</code> containing <code>TranslatableContents</code>. This is only useful if the server should allow vanilla clients to connect.</li> </ul>"},{"location":"en/concepts/lifecycle/","title":"Mod Lifecycle","text":"<p>During the mod loading process, the various lifecycle events are fired on the mod-specific event bus. Many actions are performed during these events, such as registering objects, preparing for data generation, or communicating with other mods.</p> <p>Event listeners should be registered either using <code>@EventBusSubscriber(bus = Bus.MOD)</code> or in the mod constructor:</p> <pre><code>@Mod.EventBusSubscriber(modid = \"mymod\", bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class MyModEventSubscriber {\n  @SubscribeEvent\n  static void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}\n\n@Mod(\"mymod\")\npublic class MyMod {\n  public MyMod() {\n    FMLModLoadingContext.get().getModEventBus().addListener(this::onCommonSetup);\n  } \n\n  private void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}</code></pre> <p>Warning</p> <p>Most of the lifecycle events are fired in parallel: all mods will concurrently receive the same event.</p> <p>Mods must take care to be thread-safe, like when calling other mods\u2019 APIs or accessing vanilla systems. Defer code for later execution via <code>ParallelDispatchEvent#enqueueWork</code>.</p>"},{"location":"en/concepts/lifecycle/#registry-events","title":"Registry Events","text":"<p>The registry events are fired after the mod instance construction. There are two: <code>NewRegistryEvent</code> and <code>RegisterEvent</code>. These events are fired synchronously during mod loading.</p> <p><code>NewRegistryEvent</code> allows modders to register their own custom registries, using the <code>RegistryBuilder</code> class.</p> <p><code>RegisterEvent</code> is for registering objects into the registries. The event is fired for each registry. </p>"},{"location":"en/concepts/lifecycle/#data-generation","title":"Data Generation","text":"<p>If the game is setup to run data generators, then the <code>GatherDataEvent</code> will be the last event to fire. This event is for registering mods\u2019 data providers to their associated data generator. This event is also fired synchronously.</p>"},{"location":"en/concepts/lifecycle/#common-setup","title":"Common Setup","text":"<p><code>FMLCommonSetupEvent</code> is for actions that are common to both physical client and server, such as registering capabilities.</p>"},{"location":"en/concepts/lifecycle/#sided-setup","title":"Sided Setup","text":"<p>The sided-setup events are fired on their respective physical sides: <code>FMLClientSetupEvent</code> on the physical client, and <code>FMLDedicatedServerSetupEvent</code> for the dedicated server. This is where physical side-specific initialization should occur, such as registering client-side key bindings.</p>"},{"location":"en/concepts/lifecycle/#intermodcomms","title":"InterModComms","text":"<p>This is where messages can be sent to mods for cross-mod compatibility. There are two events: <code>InterModEnqueueEvent</code> and <code>InterModProcessEvent</code>.</p> <p><code>InterModComms</code> is the class responsible for holding messages for mods. The methods are safe to call during the lifecycle events, as it is backed by a <code>ConcurrentMap</code>.</p> <p>During the <code>InterModEnqueueEvent</code>, use <code>InterModComms#sendTo</code> to send messages to different mods. These methods take in the mod id that will be sent the message, the key associated with the message data, and a supplier holding the message data. Additionally, the sender of the message can also be specified, but by default it will be the mod id of the caller.</p> <p>Then during the <code>InterModProcessEvent</code>, use <code>InterModComms#getMessages</code> to get a stream of all received messages. The mod id supplied will almost always be the mod id of the mod the method is called on. Additionally, a predicate can be specified to filter out the message keys. This will return a stream of <code>IMCMessage</code>s which hold the sender of the data, the receiver of the data, the data key, and the supplied data itself.</p> <p>Note</p> <p>There are two other lifecycle events: <code>FMLConstructModEvent</code>, fired directly after mod instance construction but before the <code>RegisterEvent</code>, and <code>FMLLoadCompleteEvent</code>, fired after the <code>InterModComms</code> events, for when the mod loading process is complete.</p>"},{"location":"en/concepts/registries/","title":"Registries","text":"<p>Registration is the process of taking the objects of a mod (such as items, blocks, sounds, etc.) and making them known to the game. Registering things is important, as without registration the game will simply not know about these objects, which will cause unexplainable behaviors and crashes. </p> <p>Most things that require registration in the game are handled by the Forge registries. A registry is an object similar to a map that assigns values to keys. Forge uses registries with <code>ResourceLocation</code> keys to register objects. This allows the <code>ResourceLocation</code> to act as the \u201cregistry name\u201d for objects.</p> <p>Every type of registrable object has its own registry. To see all registries wrapped by Forge, see the <code>ForgeRegistries</code> class. All registry names within a registry must be unique. However, names in different registries will not collide. For example, there\u2019s a <code>Block</code> registry, and an <code>Item</code> registry. A <code>Block</code> and an <code>Item</code> may be registered with the same name <code>example:thing</code> without colliding; however, if two different <code>Block</code>s or <code>Item</code>s were registered with the same exact name, the second object will override the first.</p>"},{"location":"en/concepts/registries/#methods-for-registering","title":"Methods for Registering","text":"<p>There are two proper ways to register objects: the <code>DeferredRegister</code> class, and the <code>RegisterEvent</code> lifecycle event.</p>"},{"location":"en/concepts/registries/#deferredregister","title":"DeferredRegister","text":"<p><code>DeferredRegister</code> is the recommended way to register objects. It allows the use and convenience of static initializers while avoiding the issues associated with it. It simply maintains a list of suppliers for entries and registers the objects from those suppliers during <code>RegisterEvent</code>.</p> <p>An example of a mod registering a custom block:</p> <pre><code>private static final DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n\npublic static final RegistryObject&lt;Block&gt; ROCK_BLOCK = BLOCKS.register(\"rock\", () -&gt; new Block(BlockBehaviour.Properties.of(Material.STONE)));\n\npublic ExampleMod() {\n  BLOCKS.register(FMLJavaModLoadingContext.get().getModEventBus());\n}</code></pre>"},{"location":"en/concepts/registries/#registerevent","title":"<code>RegisterEvent</code>","text":"<p><code>RegisterEvent</code> is the second way to register objects. This event is fired for each registry after the mod constructors and before the loading of configs. Objects are registered using <code>#register</code> by passing in the registry key, the name of the registry object, and the object itself. There is an additional <code>#register</code> overload which takes in a consumed helper to register an object with a given name. It is recommended to use this method to avoid unnecessary object creation.</p> <p>Here is an example: (the event handler is registered on the mod event bus)</p> <pre><code>@SubscribeEvent\npublic void register(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.BLOCKS,\n    helper -&gt; {\n      helper.register(new ResourceLocation(MODID, \"example_block_1\"), new Block(...));\n      helper.register(new ResourceLocation(MODID, \"example_block_2\"), new Block(...));\n      helper.register(new ResourceLocation(MODID, \"example_block_3\"), new Block(...));\n      // ...\n    }\n  );\n}</code></pre>"},{"location":"en/concepts/registries/#registries-that-arent-forge-registries","title":"Registries that aren\u2019t Forge Registries","text":"<p>Not all registries are wrapped by Forge. These can be static registries, like <code>LootItemConditionType</code>, which are safe to use. There are also dynamic registries, like <code>ConfiguredFeature</code> and some other worldgen registries, which are typically represented in JSON. <code>DeferredRegister#create</code> has an overload which allows modders to specify the registry key of which vanilla registry to create a <code>RegistryObject</code> for. The registry method and attaching to the mod event bus is the same as other <code>DeferredRegister</code>s.</p> <p>Important</p> <p>Dynamic registry objects can only be registered through data files (e.g. JSON). They cannot be registered in-code.</p> <pre><code>private static final DeferredRegister&lt;LootItemConditionType&gt; REGISTER = DeferredRegister.create(Registries.LOOT_CONDITION_TYPE, \"examplemod\");\n\npublic static final RegistryObject&lt;LootItemConditionType&gt; EXAMPLE_LOOT_ITEM_CONDITION_TYPE = REGISTER.register(\"example_loot_item_condition_type\", () -&gt; new LootItemConditionType(...));</code></pre> <p>Note</p> <p>Some classes cannot by themselves be registered. Instead, <code>*Type</code> classes are registered, and used in the formers\u2019 constructors. For example, <code>BlockEntity</code> has <code>BlockEntityType</code>, and <code>Entity</code> has <code>EntityType</code>. These <code>*Type</code> classes are factories that simply create the containing type on demand. </p> <p>These factories are created through the use of their <code>*Type$Builder</code> classes. An example: (<code>REGISTER</code> refers to a <code>DeferredRegister&lt;BlockEntityType&gt;</code>) <pre><code>public static final RegistryObject&lt;BlockEntityType&lt;ExampleBlockEntity&gt;&gt; EXAMPLE_BLOCK_ENTITY = REGISTER.register(\n  \"example_block_entity\", () -&gt; BlockEntityType.Builder.of(ExampleBlockEntity::new, EXAMPLE_BLOCK.get()).build(null)\n);</code></pre></p>"},{"location":"en/concepts/registries/#referencing-registered-objects","title":"Referencing Registered Objects","text":"<p>Registered objects should not be stored in fields when they are created and registered. They are to be always newly created and registered whenever <code>RegisterEvent</code> is fired for that registry. This is to allow dynamic loading and unloading of mods in a future version of Forge.</p> <p>Registered objects must always be referenced through a <code>RegistryObject</code> or a field with <code>@ObjectHolder</code>.</p>"},{"location":"en/concepts/registries/#using-registryobjects","title":"Using RegistryObjects","text":"<p><code>RegistryObject</code>s can be used to retrieve references to registered objects once they are available. These are used by <code>DeferredRegister</code> to return a reference to the registered objects. Their references are updated after <code>RegisterEvent</code> is called for their registry, along with the <code>@ObjectHolder</code> annotations.</p> <p>To get a <code>RegistryObject</code>, call <code>RegistryObject#create</code> with a <code>ResourceLocation</code> and the <code>IForgeRegistry</code> of the registrable object. Custom registries can also be used by supplying the registry name instead. Store the <code>RegistryObject</code> in a <code>public static final</code> field, and call <code>#get</code> whenever you need the registered object.</p> <p>An example of using <code>RegistryObject</code>:</p> <pre><code>public static final RegistryObject&lt;Item&gt; BOW = RegistryObject.create(new ResourceLocation(\"minecraft:bow\"), ForgeRegistries.ITEMS);\n\n// assume that 'neomagicae:mana_type' is a valid registry, and 'neomagicae:coffeinum' is a valid object within that registry\npublic static final RegistryObject&lt;ManaType&gt; COFFEINUM = RegistryObject.create(new ResourceLocation(\"neomagicae\", \"coffeinum\"), new ResourceLocation(\"neomagicae\", \"mana_type\"), \"neomagicae\"); </code></pre>"},{"location":"en/concepts/registries/#using-objectholder","title":"Using @ObjectHolder","text":"<p>Registered objects from registries can be injected into the <code>public static</code> fields by annotating classes or fields with <code>@ObjectHolder</code> and supplying enough information to construct a <code>ResourceLocation</code> to identify a specific object in a specific registry.</p> <p>The rules for <code>@ObjectHolder</code> are as follows:</p> <ul> <li>If the class is annotated with <code>@ObjectHolder</code>, its value will be the default namespace for all fields within if not explicitly defined</li> <li>If the class is annotated with <code>@Mod</code>, the modid will be the default namespace for all annotated fields within if not explicitly defined</li> <li>A field is considered for injection if:</li> <li>it has at least the modifiers <code>public static</code>;</li> <li>the field is annotated with <code>@ObjectHolder</code>, and:<ul> <li>the name value is explicitly defined; and</li> <li>the registry name value is explicitly defined</li> </ul> </li> <li>A compile-time exception is thrown if a field does not have a corresponding registry or name.</li> <li>An exception is thrown if the resulting <code>ResourceLocation</code> is incomplete or invalid (non-valid characters in path)</li> <li>If no other errors or exceptions occur, the field will be injected</li> <li>If all of the above rules do not apply, no action will be taken (and a message may be logged)</li> </ul> <p><code>@ObjectHolder</code>-annotated fields are injected with their values after <code>RegisterEvent</code> is fired for their registry, along with the <code>RegistryObject</code>s.</p> <p>Note</p> <p>If the object does not exist in the registry when it is to be injected, a debug message will be logged and no value will be injected.</p> <p>As these rules are rather complicated, here are some examples:</p> <pre><code>class Holder {\n  @ObjectHolder(registryName = \"minecraft:enchantment\", value = \"minecraft:flame\")\n  public static final Enchantment flame = null;     // Annotation present. [public static] is required. [final] is optional.\n                                                    // Registry name is explicitly defined: \"minecraft:enchantment\"\n                                                    // Resource location is explicitly defined: \"minecraft:flame\"\n                                                    // To inject: \"minecraft:flame\" from the [Enchantment] registry\n\n  public static final Biome ice_flat = null;        // No annotation on the field.\n                                                    // Therefore, the field is ignored.\n\n  @ObjectHolder(\"minecraft:creeper\")\n  public static Entity creeper = null;              // Annotation present. [public static] is required.\n                                                    // The registry has not been specified on the field.\n                                                    // Therefore, THIS WILL PRODUCE A COMPILE-TIME EXCEPTION.\n\n  @ObjectHolder(registryName = \"potion\")\n  public static final Potion levitation = null;     // Annotation present. [public static] is required. [final] is optional.\n                                                    // Registry name is explicitly defined: \"minecraft:potion\"\n                                                    // Resource location is not specified on the field\n                                                    // Therefore, THIS WILL PRODUCE A COMPILE-TIME EXCEPTION.\n}</code></pre>"},{"location":"en/concepts/registries/#creating-custom-forge-registries","title":"Creating Custom Forge Registries","text":"<p>Custom registries can usually just be a simple map of key to value. This is a common style; however, it forces a hard dependency on the registry being present. It also requires that any data that needs to be synced between sides must be done manually. Custom Forge Registries provide a simple alternative for creating soft dependents along with better management and automatic syncing between sides (unless told otherwise). Since the objects also use a Forge registry, registration becomes standardized in the same way.</p> <p>Custom Forge Registries are created with the help of a <code>RegistryBuilder</code>, through either <code>NewRegistryEvent</code> or the <code>DeferredRegister</code>. The <code>RegistryBuilder</code> class takes various parameters (such as the registry\u2019s name, id range, and various callbacks for different events happening on the registry). New registries are registered to the <code>RegistryManager</code> after <code>NewRegistryEvent</code> finishes firing.</p> <p>Any newly created registry should use its associated registration method to register the associated objects.</p>"},{"location":"en/concepts/registries/#using-newregistryevent","title":"Using NewRegistryEvent","text":"<p>When using <code>NewRegistryEvent</code>, calling <code>#create</code> with a <code>RegistryBuilder</code> will return a supplier-wrapped registry. The supplied registry can be accessed after <code>NewRegistryEvent</code> has finished posting to the mod event bus. Getting the custom registry from the supplier before <code>NewRegistryEvent</code> finishes firing will result in a <code>null</code> value.</p>"},{"location":"en/concepts/registries/#with-deferredregister","title":"With DeferredRegister","text":"<p>The <code>DeferredRegister</code> method is once again another wrapper around the above event. Once a <code>DeferredRegister</code> is created in a constant field using the <code>#create</code> overload which takes in the registry name and the mod id, the registry can be constructed via <code>DeferredRegister#makeRegistry</code>. This takes in  a supplied <code>RegistryBuilder</code> containing any additional configurations. The method already populates <code>#setName</code> by default. Since this method can be returned at any time, a supplied version of an <code>IForgeRegistry</code> is returned instead. Getting the custom registry from the supplier before <code>NewRegistryEvent</code> is fired will result in a <code>null</code> value.</p> <p>Important</p> <p><code>DeferredRegister#makeRegistry</code> must be called before the <code>DeferredRegister</code> is added to the mod event bus via <code>#register</code>. <code>#makeRegistry</code> also uses the <code>#register</code> method to create the registry during <code>NewRegistryEvent</code>.</p>"},{"location":"en/concepts/registries/#handling-missing-entries","title":"Handling Missing Entries","text":"<p>There are cases where certain registry objects will cease to exist whenever a mod is updated or, more likely, removed. It is possible to specify actions to handle the missing mapping through the third of the registry events: <code>MissingMappingsEvent</code>. Within this event, a list of missing mappings can be obtained either by <code>#getMappings</code> given a registry key and mod id or all mappings via <code>#getAllMappings</code> given a registry key.</p> <p>Important</p> <p><code>MissingMappingsEvent</code> is fired on the Forge event bus.</p> <p>For each <code>Mapping</code>, one of four mapping types can be selected to handle the missing entry:</p> Action Description IGNORE Ignores the missing entry and abandons the mapping. WARN Generates a warning in the log. FAIL Prevents the world from loading. REMAP Remaps the entry to an already registered, non-null object. <p>If no action is specified, then the default action will occur by notifying the user about the missing entry and whether they still would like to load the world. All actions besides remapping will prevent any other registry object from taking the place of the existing id in case the associated entry ever gets added back into the game.</p>"},{"location":"en/concepts/resources/","title":"Resources","text":"<p>A resource is extra data used by the game, and is stored in a data file, instead of being in the code.  Minecraft has two primary resource systems active: one on the logical client used for visuals such as models, textures, and localization called <code>assets</code>, and one on the logical server used for gameplay such as recipes and loot tables called <code>data</code>. Resource packs control the former, while Datapacks control the latter.</p> <p>In the default mod development kit, assets and data directories are located under the <code>src/main/resources</code> directory of the project. </p> <p>When multiple resource packs or data packs are enabled, they are merged. Generally, files from packs at the top of the stack override those below; however, for certain files, such as localization files and tags, data is actually merged contentwise. Mods define resource and data packs in their <code>resources</code> directories, but they are seen as subsets of the \u201cMod Resources\u201d pack. Mod resource packs cannot be disabled, but they can be overridden by other resource packs. Mod datapacks can be disabled with the vanilla <code>/datapack</code> command.</p> <p>All resources should have snake case paths and filenames (lowercase, using \u201c_\u201d for word boundaries), which is enforced in 1.11 and above.</p>"},{"location":"en/concepts/resources/#resourcelocation","title":"<code>ResourceLocation</code>","text":"<p>Minecraft identifies resources using <code>ResourceLocation</code>s. A <code>ResourceLocation</code> contains two parts: a namespace and a path. It generally points to the resource at <code>assets/&lt;namespace&gt;/&lt;ctx&gt;/&lt;path&gt;</code>, where <code>ctx</code> is a context-specific path fragment that depends on how the <code>ResourceLocation</code> is being used. When a <code>ResourceLocation</code> is written/read as from a string, it is seen as <code>&lt;namespace&gt;:&lt;path&gt;</code>. If the namespace and the colon are left out, then when the string is read into an <code>ResourceLocation</code> the namespace will always default to <code>\"minecraft\"</code>. A mod should put its resources into a namespace with the same name as its mod id (e.g. a mod with the id <code>examplemod</code> should place its resources in <code>assets/examplemod</code> and <code>data/examplemod</code> respectively, and <code>ResourceLocation</code>s pointing to those files would look like <code>examplemod:&lt;path&gt;</code>.). This is not a requirement, and in some cases it can be desirable to use a different (or even more than one) namespace. <code>ResourceLocation</code>s are used outside the resource system, too, as they happen to be a great way to uniquely identify objects (e.g. registries).</p>"},{"location":"en/concepts/sides/","title":"Sides in Minecraft","text":"<p>A very important concept to understand when modding Minecraft are the two sides: client and server. There are many, many common misconceptions and mistakes regarding siding, which can lead to bugs that might not crash the game, but can rather have unintended and often unpredictable effects.</p>"},{"location":"en/concepts/sides/#different-kinds-of-sides","title":"Different Kinds of Sides","text":"<p>When we say \u201cclient\u201d or \u201cserver\u201d, it usually follows with a fairly intuitive understanding of what part of the game we are talking about. After all, a client is what the user interacts with, and a server is where the user connects for a multiplayer game. Easy, right?</p> <p>As it turns out, there can be some ambiguity even with two such terms. Here we disambiguate the four possible meanings of \u201cclient\u201d and \u201cserver\u201d:</p> <ul> <li>Physical client - The physical client is the entire program that runs whenever you launch Minecraft from the launcher. All threads, processes, and services that run during the game\u2019s graphical, interactable lifetime are part of the physical client.</li> <li>Physical server - Often known as the dedicated server, the physical server is the entire program that runs whenever you launch any sort of <code>minecraft_server.jar</code> that does not bring up a playable GUI.</li> <li>Logical server - The logical server is what runs game logic: mob spawning, weather, updating inventories, health, AI, and all other game mechanics. The logical server is present within a physical server, but it also can run inside a physical client together with a logical client, as a single player world. The logical server always runs in a thread named the <code>Server Thread</code>.</li> <li>Logical client - The logical client is what accepts input from the player and relays it to the logical server. In addition, it also receives information from the logical server and makes it available graphically to the player. The logical client runs in the <code>Render Thread</code>, though often several other threads are spawned to handle things like audio and chunk render batching.</li> </ul> <p>In the MinecraftForge codebase, the physical side is represented by an enum called <code>Dist</code>, while the logical side is represented by an enum called <code>LogicalSide</code>.</p>"},{"location":"en/concepts/sides/#performing-side-specific-operations","title":"Performing Side-Specific Operations","text":""},{"location":"en/concepts/sides/#levelisclientside","title":"<code>Level#isClientSide</code>","text":"<p>This boolean check will be your most used way to check sides. Querying this field on a <code>Level</code> object establishes the  logical side the level belongs to. That is, if this field is <code>true</code>, the level is currently running on the logical client. If the field is <code>false</code>, the level is running on the logical server. It follows that the physical server will always contain <code>false</code> in this field, but we cannot assume that <code>false</code> implies a physical server, since this field can also be <code>false</code> for the logical server inside a physical client (in other words, a single player world).</p> <p>Use this check whenever you need to determine if game logic and other mechanics should be run. For example, if you want to damage the player every time they click your block, or have your machine process dirt into diamonds, you should only do so after ensuring <code>#isClientSide</code> is <code>false</code>. Applying game logic to the logical client can cause desynchronization (ghost entities, desynchronized stats, etc.) in the best case, and crashes in the worst case.</p> <p>This check should be used as your go-to default. Aside from <code>DistExecutor</code>, rarely will you need the other ways of determining side and adjusting behavior.</p>"},{"location":"en/concepts/sides/#distexecutor","title":"<code>DistExecutor</code>","text":"<p>Considering the use of a single \u201cuniversal\u201d jar for client and server mods, and the separation of the physical sides into two jars, an important question comes to mind: How do we use code that is only present on one physical side? All code in <code>net.minecraft.client</code> is only present on the physical client. If any class you write references those names in any way, they will crash the game when that respective class is loaded in an environment where those names do not exist. A very common mistake in beginners is to call <code>Minecraft.getInstance().&lt;doStuff&gt;()</code> in block or block entity classes, which will crash any physical server as soon as the class is loaded.</p> <p>How do we resolve this? Luckily, FML has <code>DistExecutor</code>, which provides various methods to run different methods on different physical sides, or a single method only on one side.</p> <p>Note</p> <p>It is important to understand that FML checks based on the physical side. A single player world (logical server + logical client within a physical client) will always use <code>Dist.CLIENT</code>!</p> <p><code>DistExecutor</code> works by taking in a supplied supplier executing a method, effectively preventing classloading by taking advantage of the <code>invokedynamic</code> JVM instruction. The executed method should be static and within a different class. Additionally, if no parameters are present for the static method, a method reference should be used instead of a supplier executing a method.</p> <p>There are two main methods within <code>DistExecutor</code>: <code>#runWhenOn</code> and <code>#callWhenOn</code>. The methods take in the physical side the executing method should run on and the supplied executing method which either runs or returns a result respectively.</p> <p>These two methods are subdivided further into <code>#safe*</code> and <code>#unsafe*</code> variants. Safe and unsafe variants are misnomers for their purposes. The main difference is that when in a development environment, the <code>#safe*</code> methods will validate that the supplied executing method is a lambda returning a method reference to another class with an error being thrown otherwise. Within the production environment, <code>#safe*</code> and <code>#unsafe*</code> are functionally the same.</p> <pre><code>// In a client class: ExampleClass\npublic static void unsafeRunMethodExample(Object param1, Object param2) {\n  // ...\n}\n\npublic static Object safeCallMethodExample() {\n  // ...\n}\n\n// In some common class\nDistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -&gt; ExampleClass.unsafeRunMethodExample(var1, var2));\n\nDistExecutor.safeCallWhenOn(Dist.CLIENT, () -&gt; ExampleClass::safeCallMethodExample);\n</code></pre> <p>Warning</p> <p>Due to a change in how <code>invokedynamic</code> works in Java 9+, all <code>#safe*</code> variants of the <code>DistExecutor</code> methods throw the original exception wrapped within a <code>BootstrapMethodError</code> in the development environment. <code>#unsafe*</code> variants or a check to <code>FMLEnvironment#dist</code> should be used instead.</p>"},{"location":"en/concepts/sides/#thread-groups","title":"Thread Groups","text":"<p>If <code>Thread.currentThread().getThreadGroup() == SidedThreadGroups.SERVER</code> is true, it is likely the current thread is on the logical server. Otherwise, it is likely on the logical client. This is useful to retrieve the logical side when you do not have access to a <code>Level</code> object to check <code>isClientSide</code>. It guesses which logical side you are on by looking at the group of the currently running thread. Because it is a guess, this method should only be used when other options have been exhausted. In nearly every case, you should prefer checking <code>Level#isClientSide</code>.</p>"},{"location":"en/concepts/sides/#fmlenvironmentdist-and-onlyin","title":"<code>FMLEnvironment#dist</code> and <code>@OnlyIn</code>","text":"<p><code>FMLEnvironment#dist</code> holds the physical side your code is running on. Since it is determined at startup, it does not rely on guessing to return its result. The number of use cases for this is limited, however.</p> <p>Annotating a method or field with the <code>@OnlyIn(Dist)</code> annotation indicates to the loader that the respective member should be completely stripped out of the definition not on the specified physical side. Usually, these are only seen when browsing through the decompiled Minecraft code, indicating methods that the Mojang obfuscator stripped out. There is NO reason for using this annotation directly. Use <code>DistExecutor</code> or a check on <code>FMLEnvironment#dist</code> instead.</p>"},{"location":"en/concepts/sides/#common-mistakes","title":"Common Mistakes","text":""},{"location":"en/concepts/sides/#reaching-across-logical-sides","title":"Reaching Across Logical Sides","text":"<p>Whenever you want to send information from one logical side to another, you must always use network packets. It is incredibly tempting, when in a single player scenario, to directly transfer data from the logical server to the logical client.</p> <p>This is actually very commonly inadvertently done through static fields. Since the logical client and logical server share the same JVM in a single player scenario, both threads writing to and reading from static fields will cause all sorts of race conditions and the classical issues associated with threading.</p> <p>This mistake can also be made explicitly by accessing physical client-only classes such as <code>Minecraft</code> from common code that runs or can run on the logical server. This mistake is easy to miss for beginners who debug in a physical client. The code will work there, but it will immediately crash on a physical server.</p>"},{"location":"en/concepts/sides/#writing-one-sided-mods","title":"Writing One-Sided Mods","text":"<p>In recent versions, Minecraft Forge has removed a \u201csidedness\u201d attribute from the mods.toml. This means that your mods are expected to work whether they are loaded on the physical client or the physical server. So for one-sided mods, you would typically register your event handlers inside a <code>DistExecutor#safeRunWhenOn</code> or <code>DistExecutor#unsafeRunWhenOn</code> instead of directly calling the relevant registration methods in your mod constructor. Basically, if your mod is loaded on the wrong side, it should simply do nothing, listen to no events, and so on. A one-sided mod by nature should not register blocks, items, \u2026 since they would need to be available on the other side, too.</p> <p>Additionally, if your mod is one-sided, it typically does not forbid the user from joining a server that is lacking that mod. Therefore, you should set the <code>displayTest</code> property in your mods.toml to whatever value is necessary.</p> <pre><code>[[mods]]\n  # ...\n\n  # MATCH_VERSION means that your mod will cause a red X if the versions on client and server differ. This is the default behaviour and should be what you choose if you have server and client elements to your mod.\n  # IGNORE_SERVER_VERSION means that your mod will not cause a red X if it's present on the server but not on the client. This is what you should use if you're a server only mod.\n  # IGNORE_ALL_VERSION means that your mod will not cause a red X if it's present on the client or the server. This is a special case and should only be used if your mod has no server component.\n  # NONE means that no display test is set on your mod. You need to do this yourself, see IExtensionPoint.DisplayTest for more information. You can define any scheme you wish with this value.\n  # IMPORTANT NOTE: this is NOT an instruction as to which environments (CLIENT or DEDICATED SERVER) your mod loads on. Your mod should load (and maybe do nothing!) whereever it finds itself.\n  displayTest=\"IGNORE_ALL_VERSION\" # MATCH_VERSION is the default if nothing is specified (#optional)</code></pre> <p>If a custom display test is to be used, then the <code>displayTest</code> option should be set to <code>NONE</code>, and an <code>IExtensionPoint$DisplayTest</code> extension should be registered:</p> <pre><code>//Make sure the mod being absent on the other network side does not cause the client to display the server as incompatible\nModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, () -&gt; new IExtensionPoint.DisplayTest(() -&gt; NetworkConstants.IGNORESERVERONLY, (a, b) -&gt; true));</code></pre> <p>This tells the client that it should ignore the server version being absent, and the server that it should not tell the client this mod should be present. So this snippet works both for client- and server-only-sided mods.</p>"},{"location":"en/datagen/","title":"Data Generators","text":"<p>Data generators are a way to programmatically generate the assets and data of mods. It allows the definition of the contents of these files in the code and their automatic generation, without worrying about the specifics.</p> <p>The data generator system is loaded by the main class <code>net.minecraft.data.Main</code>. Different command-line arguments can be passed to customize which mods\u2019 data are gathered, what existing files are considered, etc. The class responsible for data generation is <code>net.minecraft.data.DataGenerator</code>.</p> <p>The default configurations in the MDK <code>build.gradle</code> adds the <code>runData</code> task for running the data generators.</p>"},{"location":"en/datagen/#existing-files","title":"Existing Files","text":"<p>All references to textures or other data files not generated for data generation must reference existing files on the system. This is to ensure that all referenced textures are in the correct places, so typos can be found and corrected. </p> <p><code>ExistingFileHelper</code> is the class responsible for validating the existence of those data files. An instance can be retrieved from  <code>GatherDataEvent#getExistingFileHelper</code>.</p> <p>The <code>--existing &lt;folderpath&gt;</code> argument allows the specified folder and its subfolders to be used when validating the existence of files. Additionally, the <code>--existing-mod &lt;modid&gt;</code> argument allows the resources of a loaded mod to be used for validation. By default, only the vanilla datapack and resources are available to the <code>ExistingFileHelper</code>.</p>"},{"location":"en/datagen/#generator-modes","title":"Generator Modes","text":"<p>The data generator can be configured to run 4 different data generations, which are configured from the command-line parameters, and can be checked from <code>GatherDataEvent#include***</code> methods.</p> <ul> <li>Client Assets</li> <li>Generates client-only files in <code>assets</code>: block/item models, blockstate JSONs, language files, etc.</li> <li><code>--client</code>, <code>#includeClient</code></li> <li>Server Data</li> <li>Generates server-only files in <code>data</code>: recipes, advancements, tags, etc.</li> <li><code>--server</code>, <code>#includeServer</code></li> <li>Development Tools</li> <li>Runs some development tools: converting SNBT to NBT and vice-versa, etc.</li> <li><code>--dev</code>, <code>#includeDev</code></li> <li>Reports</li> <li>Dumps all registered blocks, items, commands, etc.</li> <li><code>--reports</code>, <code>#includeReports</code></li> </ul> <p>All of the generators can be included using <code>--all</code>.</p>"},{"location":"en/datagen/#data-providers","title":"Data Providers","text":"<p>Data providers are the classes that actually define what data will be generated and provided. All data providers implement <code>DataProvider</code>. Minecraft has abstract implementations for most assets and data, so modders need only to extend and override the specified method.</p> <p>The <code>GatherDataEvent</code> is fired on the mod event bus when the data generator is being created, and the <code>DataGenerator</code> can be obtained from the event. Create and register data providers using <code>DataGenerator#addProvider</code>.</p>"},{"location":"en/datagen/#client-assets","title":"Client Assets","text":"<ul> <li><code>net.minecraftforge.common.data.LanguageProvider</code> - for language strings; implement <code>#addTranslations</code></li> <li><code>net.minecraftforge.common.data.SoundDefinitionsProvider</code> - for <code>sounds.json</code>; implement <code>#registerSounds</code></li> <li><code>net.minecraftforge.client.model.generators.ModelProvider&lt;?&gt;</code> - for models; implement <code>#registerModels</code><ul> <li><code>ItemModelProvider</code> - for item models</li> <li><code>BlockModelProvider</code> - for block models</li> </ul> </li> <li><code>net.minecraftforge.client.model.generators.BlockStateProvider</code> - for blockstate JSONs and their block and item models; implement <code>#registerStatesAndModels</code></li> </ul>"},{"location":"en/datagen/#server-data","title":"Server Data","text":"<p>These classes are under the <code>net.minecraftforge.common.data</code> package:</p> <ul> <li><code>GlobalLootModifierProvider</code> - for global loot modifiers; implement <code>#start</code></li> <li><code>DatapackBuiltinEntriesProvider</code> for datapack registry objects; pass in <code>RegistrySetBuilder</code> to the constructor</li> </ul> <p>These classes are under the <code>net.minecraft.data</code> package:</p> <ul> <li><code>loot.LootTableProvider</code> - for loot tables; pass in <code>LootTableProvider$SubProviderEntry</code>s to the constructor</li> <li><code>recipes.RecipeProvider</code> - for recipes and their unlocking advancements; implement <code>#buildRecipes</code></li> <li><code>tags.TagsProvider</code> - for tags; implement <code>#addTags</code></li> <li><code>advancements.AdvancementProvider</code> - for advancements; pass in <code>AdvancementSubProvider</code>s to the constructor</li> </ul>"},{"location":"en/datagen/client/localization/","title":"Language Generation","text":"<p>Language files can be generated for a mod by subclassing <code>LanguageProvider</code> and implementing <code>#addTranslations</code>. Each <code>LanguageProvider</code> subclass created represents a separate locale (<code>en_us</code> represents American English, <code>es_es</code> represents Spanish, etc.). After implementation, the provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        // Localizations for American English\n        output -&gt; new MyLanguageProvider(output, MOD_ID, \"en_us\")\n    );\n}</code></pre>"},{"location":"en/datagen/client/localization/#languageprovider","title":"<code>LanguageProvider</code>","text":"<p>Each language provider is simple a map of strings where each translation key is mapped to a localized name. A translation key mapping can be added using <code>#add</code>. Additionally, there are methods which use the translation key of a <code>Block</code>, <code>Item</code>, <code>ItemStack</code>, <code>Enchantment</code>, <code>MobEffect</code>, and <code>EntityType</code>.</p> <pre><code>// In LanguageProvider#addTranslations\nthis.addBlock(EXAMPLE_BLOCK, \"Example Block\");\nthis.add(\"object.examplemod.example_object\", \"Example Object\");</code></pre> <p>Tip</p> <p>Localized names which contain alphanumeric values not in American English can be supplied as is. The provider automatically translates the characters into their unicode equivalents to be read by the game.</p> <pre><code>// Encdoded as 'Example with a d\\u00EDacritic'\nthis.addItem(\"example.diacritic\", \"Example with a d\u00edacritic\");</code></pre>"},{"location":"en/datagen/client/modelproviders/","title":"Model Generation","text":"<p>Models can be generated for models or block states by default. Each provides a method of generating the necessary JSONs (<code>ModelBuilder#toJson</code> for models and <code>IGeneratedBlockState#toJson</code> for block states). After implementation, the associated providers must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    DataGenerator gen = event.getGenerator();\n    ExistingFileHelper efh = event.getExistingFileHelper();\n\n    gen.addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -&gt; new MyItemModelProvider(output, MOD_ID, efh)\n    );\n    gen.addProvider(\n        event.includeClient(),\n        output -&gt; new MyBlockStateProvider(output, MOD_ID, efh)\n    );\n}</code></pre>"},{"location":"en/datagen/client/modelproviders/#model-files","title":"Model Files","text":"<p>A <code>ModelFile</code> acts as the base for all models referenced or generated by a provider. Each model file stores the location relative to the <code>models</code> subdirectory and can assert whether the file exists.</p>"},{"location":"en/datagen/client/modelproviders/#existing-model-files","title":"Existing Model Files","text":"<p><code>ExistingModelFile</code> is a subclass of <code>ModelFile</code> which checks via <code>ExistingFileHelper#exists</code> whether the model already exists within the <code>models</code> subdirectory. All non-generated models are usually referenced through <code>ExistingModelFile</code>s.</p>"},{"location":"en/datagen/client/modelproviders/#unchecked-model-files","title":"Unchecked Model Files","text":"<p><code>UncheckedModelFile</code> is a subclass of <code>ModelFile</code> which assumes the specified model exists in some location.</p> <p>Note</p> <p>There should be no cases where an <code>UncheckedModelFile</code> is used to reference a model. If there is, then the associated resources are not properly being tracked by <code>ExistingFileHelper</code>.</p>"},{"location":"en/datagen/client/modelproviders/#model-builders","title":"Model Builders","text":"<p>A <code>ModelBuilder</code> represents a to-be-generated <code>ModelFile</code>. It contains all the data about a model: its parent, faces, textures, transformations, lighting, and loader.</p> <p>Tip</p> <p>While a complex model can be generated, it is recommended that those models be constructed using a modeling software beforehand. Then, the data provider can generate the children models with specific textures applied through the defined references in the parent complex model.</p> <p>The parent (via <code>ModelBuilder#parent</code>) of the builder can be any <code>ModelFile</code>: generated or existing. Generated files are added to <code>ModelProvider</code>s as soon as the builder is created. The builder itself can be passed in as a parent, or the <code>ResourceLocation</code> can supplied alternatively.</p> <p>Warning</p> <p>If the parent is not generated before the child model when passing in a <code>ResourceLocation</code>, then an exception will be thrown.</p> <p>Each element (via <code>ModelBuilder#element</code>) within a model is defined as cube using two three-dimensional points (<code>ElementBuilder#from</code> and <code>#to</code> respectively) where each axis is limited to the values <code>[-16,32]</code> (between -16 and 32 inclusive). Each face (<code>ElementBuilder#face</code>) of the cube can specify when the face is culled (<code>FaceBuilder#cullface</code>), tint index (<code>FaceBuilder#tintindex</code>), texture reference from the <code>textures</code> keys (<code>FaceBuilder#texture</code>), UV coordinate on the texture (<code>FaceBuilder#uvs</code>), and rotation in 90 degree intervals (<code>FaceBuilder#rotation</code>).</p> <p>Note</p> <p>It recommended for block models which have elements that exceed a bound of <code>[0,16]</code> on any axis to separate into multiple blocks, such as for a multiblock structure, to avoid lighting and culling issues.</p> <p>Each cube can additionally be rotated (<code>ElementBuilder#rotation</code>) around a specified point (<code>RotationBuilder#origin</code>) for a given axis (<code>RotationBuilder#axis</code>) in 22.5 degree intervals (<code>RotationBuilder#angle</code>). The cube can scale all faces in relation to the entire model as well (<code>RotationBuilder#rescale</code>). The cube can also determine whether its shadows should be rendered (<code>ElementBuilder#shade</code>).</p> <p>Each model defines a list of texture keys (<code>ModelBuilder#texture</code>) which points to either a location or a reference. Each key can then be referenced in any element by prefixing using a <code>#</code> (a texture key of <code>example</code> can be referenced in an element using <code>#example</code>). A location specifies where a texture is in <code>assets/&lt;namespace&gt;/textures/&lt;path&gt;.png</code>. A reference is used by any models parenting the current model as keys to define textures for later.</p> <p>The model can additionally be transformed (<code>ModelBuilder#transforms</code>) for any defined perspective (in the left hand in first person, in the gui, on the ground, etc.). For any perspective (<code>TransformsBuilder#transform</code>), the rotation (<code>TransformVecBuilder#rotation</code>), translation (<code>TransformVecBuilder#translation</code>), and scale (<code>TransformVecBuilder#scale</code>) can be set.</p> <p>Finally, the model can set whether to use ambient occlusion in a level (<code>ModelBuilder#ao</code>) and from what location to light and shade the model from <code>ModelBuilder#guiLight</code>.</p>"},{"location":"en/datagen/client/modelproviders/#blockmodelbuilder","title":"<code>BlockModelBuilder</code>","text":"<p>A <code>BlockModelBuilder</code> represents a block model to-be-generated. In addition to the <code>ModelBuilder</code>, a transform to the entire model (<code>BlockModelBuilder#rootTransform</code>) can be generated. The root can be translated (<code>RootTransformBuilder#transform</code>), rotated (<code>RootTransformBuilder#rotation</code>, <code>RootTransformBuilder#postRotation</code>), and scaled (<code>RootTransformBuilder#scale</code>) either individually or all in one transformation (<code>RootTransformBuilder#transform</code>) around some origin (<code>RootTransformBuilder#origin</code>).</p>"},{"location":"en/datagen/client/modelproviders/#itemmodelbuilder","title":"<code>ItemModelBuilder</code>","text":"<p>An <code>ItemModelBuilder</code> represents an item model to-be-generated. In addition to the <code>ModelBuilder</code>, overrides (<code>OverrideBuilder#override</code>) can be generated. Each override applied to a model can apply conditions which represent for a given property that must be above the specified value (<code>OverrideBuilder#predicate</code>). If the conditions are met, then the specified model (<code>OverrideBuilder#model</code>) will be rendered instead of this model.</p>"},{"location":"en/datagen/client/modelproviders/#model-providers","title":"Model Providers","text":"<p>The <code>ModelProvider</code> subclasses are responsible for generating the constructed <code>ModelBuilder</code>s. The provider takes in the generator, mod id, subdirectory in the <code>models</code> folder to generate within, a <code>ModelBuilder</code> factory, and the existing file helper. Each provider subclass must implement <code>#registerModels</code>.</p> <p>The provider contains basic methods which either create the <code>ModelBuilder</code> or provides convenience for getting texture or model references:</p> Method Description <code>getBuilder</code> Creates a new <code>ModelBuilder</code> within the provider\u2019s subdirectory for the given mod id. <code>withExistingParent</code> Creates a new <code>ModelBuilder</code> for the given parent. Should be used when the parent is not generated by the builder. <code>mcLoc</code> Creates a <code>ResourceLocation</code> for the path in the <code>minecraft</code> namespace. <code>modLoc</code> Creates a <code>ResourceLocation</code> for the path in the given mod id\u2019s namespace. <p>Additionally, there are several helpers for easily generating common models using vanilla templates. Most are for block models with only a few being universal.</p> <p>Note</p> <p>Although the models are within a specific subdirectory, that does not mean that the model cannot be referenced by a model in another subdirectory. Usually, it is indicative of that model being used for that type of object.</p>"},{"location":"en/datagen/client/modelproviders/#blockmodelprovider","title":"<code>BlockModelProvider</code>","text":"<p>The <code>BlockModelProvider</code> is used for generating block models via <code>BlockModelBuilder</code> in the <code>block</code> folder. Block models should typically parent <code>minecraft:block/block</code> or one of its children models for use with item models.</p> <p>Note</p> <p>Block models and its item model counterpart are typically not generated through a direct subclass of <code>BlockModelProvider</code> and <code>ItemModelProvider</code> but through <code>BlockStateProvider</code>.</p>"},{"location":"en/datagen/client/modelproviders/#itemmodelprovider","title":"<code>ItemModelProvider</code>","text":"<p>The <code>ItemModelProvider</code> is used for generating block models via <code>ItemModelBuilder</code> in the <code>item</code> folder. Most item models parent <code>item/generated</code> and use <code>layer0</code> to specify their texture, which can be done using <code>#singleTexture</code>.</p> <p>Note</p> <p><code>item/generated</code> can support five texture layers stacked on top of each other: <code>layer0</code>, <code>layer1</code>, <code>layer2</code>, <code>layer3</code>, and <code>layer4</code>.</p> <pre><code>// In some ItemModelProvider#registerModels\n\n// Will generate 'assets/&lt;modid&gt;/models/item/example_item.json'\n// Parent will be 'minecraft:item/generated'\n// For the texture key 'layer0'\n//  It will be at 'assets/&lt;modid&gt;/textures/item/example_item.png'\nthis.basicItem(EXAMPLE_ITEM.get());</code></pre> <p>Note</p> <p>Item models for blocks should typically parent an existing block model instead of generating a separate model for an item.</p>"},{"location":"en/datagen/client/modelproviders/#block-state-provider","title":"Block State Provider","text":"<p>A <code>BlockStateProvider</code> is responsible for generating block state JSONs in <code>blockstates</code>, block models in <code>models/block</code>, and item models in <code>models/item</code> for said blocks. The provider takes in the data generator, mod id, and existing file helper. Each <code>BlockStateProvider</code> subclass must implement <code>#registerStatesAndModels</code>.</p> <p>The provider contains basic methods for generating block state JSONs and block models. Item models must be generated separately as a block state JSON may define multiple models to use in different contexts. There are a number of common methods, however, that that the modder should be aware of when dealing with more complex tasks:</p> Method Description <code>models</code> Gets the <code>BlockModelProvider</code> used to generate the item block models. <code>itemModels</code> Gets the <code>ItemModelProvider</code> used to generate the item block models. <code>modLoc</code> Creates a <code>ResourceLocation</code> for the path in the given mod id\u2019s namespace. <code>mcLoc</code> Creates a <code>ResourceLocation</code> for the path in the <code>minecraft</code> namespace. <code>blockTexture</code> References a texture within <code>textures/block</code> which has the same name as the block. <code>simpleBlockItem</code> Creates an item model for a block given the associated model file. <code>simpleBlockWithItem</code> Creates a single block state for a block model and an item model using the block model as its parent. <p>A block state JSON is made up of variants or conditions. Each variant or condition references a <code>ConfiguredModelList</code>: a list of <code>ConfiguredModel</code>s. Each configured model contains the model file (via <code>ConfiguredModel$Builder#modelFile</code>), the X and Y rotation in 90 degree intervals (via <code>#rotationX</code> and <code>rotationY</code> respectively), whether the texture can rotate when the model is rotated by the block state JSON (via <code>#uvLock</code>), and the weight of the model appearing compared to other models in the list (via <code>#weight</code>).</p> <p>The builder (<code>ConfiguredModel#builder</code>) can also create an array of <code>ConfiguredModel</code>s by creating the next model using <code>#nextModel</code> and repeating the settings until <code>#build</code> is called.</p>"},{"location":"en/datagen/client/modelproviders/#variantblockstatebuilder","title":"<code>VariantBlockStateBuilder</code>","text":"<p>Variants can be generated using <code>BlockStateProvider#getVariantBuilder</code>. Each variant specifies a list of properties (<code>PartialBlockstate</code>) which when matches a <code>BlockState</code> in a level, will display a model chosen from the corresponding model list. An exception is thrown if there is a <code>BlockState</code> which is not covered by any variant defined. Only one variant can be true for any <code>BlockState</code>.</p> <p>A <code>PartialBlockstate</code> is typically defined using one of three methods:</p> Method Description <code>partialState</code> Creates a <code>PartialBlockstate</code> to be defined. <code>forAllStates</code> Defines a function where a given <code>BlockState</code> can be represented by an array of <code>ConfiguredModel</code>s. <code>forAllStatesExcept</code> Defines a function similar to <code>#forAllStates</code>; however, it also specifies which properties do not affect the models rendered. <p>For a <code>PartialBlockstate</code>, the properties defined can be specified (<code>#with</code>). The configured models can be set (<code>#setModels</code>), appended to the existing models (<code>#addModels</code>), or built (<code>#modelForState</code> and then <code>ConfiguredModel$Builder#addModel</code> once finished instead of <code>#ConfiguredModel$Builder#build</code>).</p> <pre><code>// In some BlockStateProvider#registerStatesAndModels\n\n// EXAMPLE_BLOCK_1: Has Property BlockStateProperties#AXIS\nthis.getVariantBuilder(EXAMPLE_BLOCK_1) // Get variant builder\n  .partialState() // Construct partial state\n  .with(AXIS, Axis.Y) // When BlockState AXIS = Y\n    .modelForState() // Set models when AXIS = Y\n    .modelFile(yModelFile1) // Can show 'yModelFile1'\n    .nextModel() // Adds another model when AXIS = Y\n    .modelFile(yModelFile2) // Can show 'yModelFile2'\n    .weight(2) // Will show 'yModelFile2' 2/3 of the time\n    .addModel() // Finalizes models when AXIS = Y\n  .with(AXIS, Axis.Z) // When BlockState AXIS = Z\n    .modelForState() // Set models when AXIS = Z\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .addModel() // Finalizes models when AXIS = Z\n  .with(AXIS, Axis.X)  // When BlockState AXIS = X\n    .modelForState() // Set models when AXIS = X\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .rotationY(90) // Rotates 'hModelFile' 90 degrees on the Y axis\n    .addModel(); // Finalizes models when AXIS = X\n\n// EXAMPLE_BLOCK_2: Has Property BlockStateProperties#HORIZONTAL_FACING\nthis.getVariantBuilder(EXAMPLE_BLOCK_2) // Get variant builder\n  .forAllStates(state -&gt; // For all possible states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build() // Creates the array of configured models\n  );\n\n// EXAMPLE_BLOCK_3: Has Properties BlockStateProperties#HORIZONTAL_FACING, BlockStateProperties#WATERLOGGED\nthis.getVariantBuilder(EXAMPLE_BLOCK_3) // Get variant builder\n  .forAllStatesExcept(state -&gt; // For all HORIZONTAL_FACING states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build(), // Creates the array of configured models\n  WATERLOGGED); // Ignores WATERLOGGED property</code></pre>"},{"location":"en/datagen/client/modelproviders/#multipartblockstatebuilder","title":"<code>MultiPartBlockStateBuilder</code>","text":"<p>Multiparts can be generated using <code>BlockStateProvider#getMultipartBuilder</code>. Each part (<code>MultiPartBlockStateBuilder#part</code>) specifies a group of conditions of properties which when matches a <code>BlockState</code> in a level, will display a model from the model list. All condition groups that match the <code>BlockState</code> will display their chosen model overlaid on each other.</p> <p>For any part (obtained via <code>ConfiguredModel$Builder#addModel</code>), a condition can be added (via <code>#condition</code>) when a property is one of the specified values. Conditions must all succeed or, when <code>#useOr</code> is set, at least one must succeed. Conditions can be grouped (via <code>#nestedGroup</code>) as long as the current grouping only contains other groups and no single conditions. Groups of conditions can be left using <code>#endNestedGroup</code> and a given part can be finished via <code>#end</code>.</p> <pre><code>// In some BlockStateProvider#registerStatesAndModels\n\n// Redstone Wire\nthis.getMultipartBuilder(REDSTONE) // Get multipart builder\n  .part() // Create part\n    .modelFile(redstoneDot) // Can show 'redstoneDot'\n    .addModel() // 'redstoneDot' is displayed when...\n    .useOr() // At least one of these conditions are true\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, NONE) // true when WEST_REDSTONE is NONE\n      .condition(EAST_REDSTONE, NONE) // true when EAST_REDSTONE is NONE\n      .condition(SOUTH_REDSTONE, NONE) // true when SOUTH_REDSTONE is NONE\n      .condition(NORTH_REDSTONE, NONE) // true when NORTH_REDSTONE is NONE\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide0) // Can show 'redstoneSide0'\n    .addModel() // 'redstoneSide0' is displayed when...\n    .condition(NORTH_REDSTONE, SIDE, UP) // NORTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt0) // Can show 'redstoneSideAlt0'\n    .addModel() // 'redstoneSideAlt0' is displayed when...\n    .condition(SOUTH_REDSTONE, SIDE, UP) // SOUTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt1) // Can show 'redstoneSideAlt1'\n    .rotationY(270) // Rotates 'redstoneSideAlt1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSideAlt1' is displayed when...\n    .condition(EAST_REDSTONE, SIDE, UP) // EAST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide1) // Can show 'redstoneSide1'\n    .rotationY(270) // Rotates 'redstoneSide1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSide1' is displayed when...\n    .condition(WEST_REDSTONE, SIDE, UP) // WEST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(NORTH_REDSTONE, UP) // NORTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(90) // Rotates 'redstoneUp' 90 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(EAST_REDSTONE, UP) // EAST_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(180) // Rotates 'redstoneUp' 180 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(SOUTH_REDSTONE, UP) // SOUTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(270) // Rotates 'redstoneUp' 270 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(WEST_REDSTONE, UP) // WEST_REDSTONE is UP\n    .end(); // Finish part</code></pre>"},{"location":"en/datagen/client/modelproviders/#model-loader-builders","title":"Model Loader Builders","text":"<p>Custom model loaders can also be generated for a given <code>ModelBuilder</code>. Custom model loaders subclass <code>CustomLoaderBuilder</code> and can be applied to a <code>ModelBuilder</code> via <code>#customLoader</code>. The factory method passed in creates a new loader builder to which configurations can be made. After all the changes have been finished, the custom loader can return back to the <code>ModelBuilder</code> via <code>CustomLoaderBuilder#end</code>.</p> Model Builder Factory Method Description <code>DynamicFluidContainerModelBuilder</code> <code>#begin</code> Generates a bucket model for the specified fluid. <code>CompositeModelBuilder</code> <code>#begin</code> Generates a model composed of models. <code>ItemLayersModelBuilder</code> <code>#begin</code> Generates a Forge implementation of an <code>item/generated</code> model. <code>SeparateTransformsModelBuilder</code> <code>#begin</code> Generates a model which changes based on the specified transform. <code>ObjModelBuilder</code> <code>#begin</code> Generates an OBJ model. <pre><code>// For some BlockModelBuilder builder\nbuilder.customLoader(ObjModelBuilder::begin) // Custom loader 'forge:obj'\n  .modelLocation(modLoc(\"models/block/model.obj\")) // Set the OBJ model location\n  .flipV(true) // Flips the V coordinate in the supplied .mtl texture\n  .end() // Finish custom loader configuration\n.texture(\"particle\", mcLoc(\"block/dirt\")) // Set particle texture to dirt\n.texture(\"texture0\", mcLoc(\"block/dirt\")); // Set 'texture0' texture to dirt</code></pre>"},{"location":"en/datagen/client/modelproviders/#custom-model-loader-builders","title":"Custom Model Loader Builders","text":"<p>Custom loader builders can be created by extending <code>CustomLoaderBuilder</code>. The constructor can still have a <code>protected</code> visibility with the <code>ResourceLocation</code> hardcoded to the loader id registered via <code>ModelEvent$RegisterGeometryLoaders#register</code>. The builder can then be initialized via a static factory method or the constructor if made <code>public</code>.</p> <pre><code>public class ExampleLoaderBuilder&lt;T extends ModelBuilder&lt;T&gt;&gt; extends CustomLoaderBuilder&lt;T&gt; {\n  public static &lt;T extends ModelBuilder&lt;T&gt;&gt; ExampleLoaderBuilder&lt;T&gt; begin(T parent, ExistingFileHelper existingFileHelper) {\n    return new ExampleLoaderBuilder&lt;&gt;(parent, existingFileHelper);\n  }\n\n  protected ExampleLoaderBuilder(T parent, ExistingFileHelper existingFileHelper) {\n    super(new ResourceLocation(MOD_ID, \"example_loader\"), parent, existingFileHelper);\n  }\n}</code></pre> <p>Afterwards, any configurations specified by the loader should be added as chainable methods.</p> <pre><code>// In ExampleLoaderBuilder\npublic ExampleLoaderBuilder&lt;T&gt; exampleInt(int example) {\n  // Set int\n  return this;\n}\n\npublic ExampleLoaderBuilder&lt;T&gt; exampleString(String example) {\n  // Set string\n  return this;\n}</code></pre> <p>If any additional configuration is specified, <code>#toJson</code> should be overridden to write the additional properties.</p> <pre><code>// In ExampleLoaderBuilder\n@Override\npublic JsonObject toJson(JsonObject json) {\n  json = super.toJson(json); // Handle base loader properties\n  // Encode custom loader properties\n  return json;\n}</code></pre>"},{"location":"en/datagen/client/modelproviders/#custom-model-providers","title":"Custom Model Providers","text":"<p>Custom model providers require a <code>ModelBuilder</code> subclass, which defines the base of the model to generate, and a <code>ModelProvider</code> subclass, which generates the models.</p> <p>The <code>ModelBuilder</code> subclass contains any special properties to which can be applied specifically to those types of models (item models can have overrides). If any additional properties are added, <code>#toJson</code> needs to be overridden to write the additional information.</p> <pre><code>public class ExampleModelBuilder extends ModelBuilder&lt;ExampleModelBuilder&gt; {\n  // ...\n}</code></pre> <p>The <code>ModelProvider</code> subclass requires no special logic. The constructor should hardcode the subdirectory within the <code>models</code> folder and the <code>ModelBuilder</code> to represent the to-be-generated models.</p> <pre><code>public class ExampleModelProvider extends ModelProvider&lt;ExampleModelBuilder&gt; {\n\n  public ExampleModelProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    // Models will be generated to 'assets/&lt;modid&gt;/models/example' if no 'modid' is specified in '#getBuilder'\n    super(output, modid, \"example\", ExampleModelBuilder::new, existingFileHelper);\n  }\n}</code></pre>"},{"location":"en/datagen/client/modelproviders/#custom-model-consumers","title":"Custom Model Consumers","text":"<p>Custom model consumers like <code>BlockStateProvider</code> can be created by manually generating the models themselves. The <code>ModelProvider</code> subclass used to generate the models should be specified and made available.</p> <pre><code>public class ExampleModelConsumerProvider implements IDataProvider {\n\n  public ExampleModelConsumerProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    this.example = new ExampleModelProvider(output, modid, existingFileHelper);\n  }\n}</code></pre> <p>Once the data provider is running, the models within the <code>ModelProvider</code> subclass can be generated using <code>ModelProvider#generateAll</code>.</p> <pre><code>// In ExampleModelConsumerProvider\n@Override\npublic CompletableFuture&lt;?&gt; run(CachedOutput cache) {\n  // Populate the model provider\n  CompletableFuture&lt;?&gt; exampleFutures = this.example.generateAll(cache); // Generate the models\n\n  // Run logic and create CompletableFuture(s) for writing files\n  // ...\n\n  // Assume we have a new CompletableFuture providerFuture\n  return CompletableFuture.allOf(exampleFutures, providerFuture);\n}</code></pre>"},{"location":"en/datagen/client/sounds/","title":"Sound Definition Generation","text":"<p>The <code>sounds.json</code> file can be generated for a mod by subclassing <code>SoundDefinitionsProvider</code> and implementing <code>#registerSounds</code>. After implementation, the provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -&gt; new MySoundDefinitionsProvider(output, MOD_ID, event.getExistingFileHelper())\n    );\n}</code></pre>"},{"location":"en/datagen/client/sounds/#adding-a-sound","title":"Adding a Sound","text":"<p>A sound definition can be generated by specifying the sound name and definition via <code>#add</code>. The sound name can either be provided from a <code>SoundEvent</code>, <code>ResourceLocation</code>, or string.</p> <p>Warning</p> <p>The sound name supplied will always assume the namespace is the mod id supplied to the constructor of the provider. There is no validation performed on the namespace of the sound name!</p>"},{"location":"en/datagen/client/sounds/#sounddefinition","title":"<code>SoundDefinition</code>","text":"<p>The <code>SoundDefinition</code> can be created using <code>#definition</code>. The definition contains the data to define a sound instance.</p> <p>A definition specifies a few methods:</p> Method Description <code>with</code> Adds a sound(s) which may be played when the definition is selected. <code>subtitle</code> Sets the translation key of the definition. <code>replace</code> When <code>true</code>, removes the sounds already defined by other <code>sounds.json</code> for this definition instead of appending to it."},{"location":"en/datagen/client/sounds/#sounddefinitionsound","title":"<code>SoundDefinition$Sound</code>","text":"<p>A sound supplied to the <code>SoundDefinition</code> can be specified using <code>SoundDefinitionsProvider#sound</code>. These methods take in the reference of the sound and a <code>SoundType</code> if specified.</p> <p>The <code>SoundType</code> can be one of two values:</p> Sound Type Definition <code>SOUND</code> Specifies a reference to the sound located at <code>assets/&lt;namespace&gt;/sounds/&lt;path&gt;.ogg</code>. <code>EVENT</code> Specifies a reference to the name of another sound defined by the <code>sounds.json</code>. <p>Each <code>Sound</code> created from <code>SoundDefinitionsProvider#sound</code> can specify additional configurations on how to load and play the sound provided:</p> Method Description <code>volume</code> Sets the volume scale of the sound, must be greater than <code>0</code>. <code>pitch</code> Sets the pitch scale of the sound, must be greater than <code>0</code>. <code>weight</code> Sets the likelihood of the sound getting played when the sound is selected. <code>stream</code> When <code>true</code>, reads the sound from file instead of loading the sound into memory. Recommended for long sounds: background music, music discs, etc. <code>attenuationDistance</code> Sets the number of blocks the sound can be heard from. <code>preload</code> When <code>true</code>, immediately loads the sound into memory as soon as the resource pack is loaded. <pre><code>// In some SoundDefinitionsProvider#registerSounds\nthis.add(EXAMPLE_SOUND_EVENT, definition()\n  .subtitle(\"sound.examplemod.example_sound\") // Set translation key\n  .with(\n    sound(new ResourceLocation(MODID, \"example_sound_1\")) // Set first sound\n      .weight(4) // Has a 4 / 5 = 80% chance of playing\n      .volume(0.5), // Scales all volumes called on this sound by half\n    sound(new ResourceLocation(MODID, \"example_sound_2\")) // Set second sound\n      .stream() // Streams the sound\n  )\n);\n\nthis.add(EXAMPLE_SOUND_EVENT_2, definition()\n  .subtitle(\"sound.examplemod.example_sound\") // Set translation key\n  .with(\n    sound(EXAMPLE_SOUND_EVENT.getLocation(), SoundType.EVENT) // Adds sounds from 'EXAMPLE_SOUND_EVENT'\n      .pitch(0.5) // Scales all pitches called on this sound by half\n  )\n);</code></pre>"},{"location":"en/datagen/server/advancements/","title":"Advancement Generation","text":"<p>Advancements can be generated for a mod by constructing a new <code>AdvancementProvider</code> and providing <code>AdvancementSubProvider</code>s. Advancements can either be created and supplied manually or, for convenience, created using <code>Advancement$Builder</code>. The provider must be added to the <code>DataGenerator</code>.</p> <p>Note</p> <p>Forge provides an extension for the <code>AdvancementProvider</code> called <code>ForgeAdvancementProvider</code> which integrates better for generating advancements. So, this documentation will use <code>ForgeAdvancementProvider</code> along with the sub provider interface <code>ForgeAdvancementProvider$AdvancementGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -&gt; new ForgeAdvancementProvider(\n          output,\n          event.getLookupProvider(),\n          event.getExistingFileHelper(),\n          // Sub providers which generate the advancements\n          List.of(subProvider1, subProvider2, /*...*/)\n        )\n    );\n}</code></pre>"},{"location":"en/datagen/server/advancements/#forgeadvancementprovideradvancementgenerator","title":"<code>ForgeAdvancementProvider$AdvancementGenerator</code>","text":"<p>A <code>ForgeAdvancementProvider$AdvancementGenerator</code> is responsible for generating advancements, containing a method which takes in a registry lookup, the writer (<code>Consumer&lt;Advancement&gt;</code>), and the existing file helper..</p> <pre><code>// In some subclass of ForgeAdvancementProvider$AdvancementGenerator or as a lambda reference\n\n@Override\npublic void generate(HolderLookup.Provider registries, Consumer&lt;Advancement&gt; writer, ExistingFileHelper existingFileHelper) {\n  // Build advancements here\n}</code></pre>"},{"location":"en/datagen/server/advancements/#advancementbuilder","title":"<code>Advancement$Builder</code>","text":"<p><code>Advancement$Builder</code> is a convenience implementation for creating <code>Advancement</code>s to generate. It allows the definition of the parent advancement, the display information, the rewards when the advancement has been completed, and the requirements to unlock the advancement. Only the requirements need to be specified to create an <code>Advancement</code>.</p> <p>Although not required, there are a number of methods that are important to know of:</p> Method Description <code>parent</code> Sets the advancement which this advancement is directly linked to. Can either specify the name of the advancement or the advancement itself if its generated by the modder. <code>display</code> Sets the information to display to the chat, toast, and advancement screen. <code>rewards</code> Sets the rewards obtained when this advancement is completed. <code>addCriterion</code> Adds a condition to the advancement. <code>requirements</code> Specifies if the conditions must all return true or at least one must return true. An additional overload can be used to mix-and-match those operations. <p>Once an <code>Advancement$Builder</code> is ready to be built, the <code>#save</code> method should be called which takes in the writer, the registry name of the advancement, and the file helper used to check whether the supplied parent exists.</p> <pre><code>// In some ForgeAdvancementProvider$AdvancementGenerator#generate(registries, writer, existingFileHelper)\nAdvancement example = Advancement.Builder.advancement()\n  .addCriterion(\"example_criterion\", triggerInstance) // How the advancement is unlocked\n  .save(writer, name, existingFileHelper); // Add data to builder</code></pre>"},{"location":"en/datagen/server/datapackregistries/","title":"Datapack Registry Object Generation","text":"<p>Datapack registry objects can be generated for a mod by constructing a new <code>DatapackBuiltinEntriesProvider</code> and providing a <code>RegistrySetBuilder</code> with the new objects to register. The provider must be added to the <code>DataGenerator</code>.</p> <p>Note</p> <p><code>DatapackBuiltinEntriesProvider</code> is a Forge extension on top of <code>RegistriesDatapackGenerator</code> which properly handles referencing existing datapack registry objects without exploding the entry. So, this documentation will use <code>DatapackBuiltinEntriesProvider</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -&gt; new DatapackBuiltinEntriesProvider(\n          output,\n          event.getLookupProvider(),\n          // The builder containing the datapack registry objects to generate\n          new RegistrySetBuilder().add(/* ... */),\n          // Set of mod ids to generate the datapack registry objects of\n          Set.of(MOD_ID)\n        )\n    );\n}</code></pre>"},{"location":"en/datagen/server/datapackregistries/#registrysetbuilder","title":"<code>RegistrySetBuilder</code>","text":"<p>A <code>RegistrySetBuilder</code> is responsible for building all datapack registry objects to be used within the game. The builder can add a new entry for a registry, which can then register objects to that registry.</p> <p>First, a new instance of a <code>RegistrySetBuilder</code> can be initialized by calling the constructor. Then, the <code>#add</code> method (which takes in the <code>ResourceKey</code> of the registry, a <code>RegistryBootstrap</code> consumer containing the <code>BootstapContext</code> to register the objects, and an optional <code>Lifecycle</code> argument to indicate the registry\u2019s current lifecycle status) can be called to handle a specific registry for registration.</p> <pre><code>new RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -&gt; {\n    // Register configured features here\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -&gt; {\n    // Register placed features here\n  });</code></pre> <p>Note</p> <p>Datapack registries created through Forge can also generate their objects using this builder by also passing in the associated <code>ResourceKey</code>.</p>"},{"location":"en/datagen/server/datapackregistries/#registering-with-bootstapcontext","title":"Registering with <code>BootstapContext</code>","text":"<p>The <code>#register</code> method in the <code>BootstapContext</code> provided by the builder can be used to register objects. It takes in the <code>ResourceKey</code> representing the registry name of the object, the object to register, and an optional <code>Lifecycle</code> argument to indicate the registry object\u2019s current lifecycle status. </p> <pre><code>public static final ResourceKey&lt;ConfiguredFeature&lt;?, ?&gt;&gt; EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  new ResourceLocation(MOD_ID, \"example_configured_feature\")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -&gt; {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature&lt;&gt;(\n        Feature.ORE, // Create an ore feature\n        new OreConfiguration(\n          List.of(), // Does nothing\n          8 // in veins of at most 8\n        )\n      )\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -&gt; {\n    // Register placed features here\n  });</code></pre>"},{"location":"en/datagen/server/datapackregistries/#datapack-registry-object-lookup","title":"Datapack Registry Object Lookup","text":"<p>Sometimes datapack registry objects may want to use other datapack registry objects or tags containing datapack registry objects. In those cases, you can look up another datapack registry using <code>BootstapContext#lookup</code> to get a <code>HolderGetter</code>. From there, you can get a <code>Holder$Reference</code> to the datapack registry object or a <code>HolderSet$Named</code> for the tag via <code>#getOrThrow</code> by passing in the associated key.</p> <pre><code>public static final ResourceKey&lt;ConfiguredFeature&lt;?, ?&gt;&gt; EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  new ResourceLocation(MOD_ID, \"example_configured_feature\")\n);\n\npublic static final ResourceKey&lt;PlacedFeature&gt; EXAMPLE_PLACED_FEATURE = ResourceKey.create(\n  Registries.PLACED_FEATURE,\n  new ResourceLocation(MOD_ID, \"example_placed_feature\")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -&gt; {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature(/* ... */)\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -&gt; {\n    // Register placed features here\n\n    // Get configured feature registry\n    HolderGetter&lt;ConfiguredFeature&lt;?, ?&gt;&gt; configured = bootstrap.lookup(Registries.CONFIGURED_FEATURE);\n\n    bootstrap.register(\n      // The resource key for the placed feature\n      EXAMPLE_PLACED_FEATURE,\n      new PlacedFeature(\n        configured.getOrThrow(EXAMPLE_CONFIGURED_FEATURE), // Get the configured feature\n        List.of() // and do nothing to the placement location\n      )\n    )\n  });</code></pre>"},{"location":"en/datagen/server/glm/","title":"Global Loot Modifier Generation","text":"<p>Global Loot Modifiers (GLMs) can be generated for a mod by subclassing <code>GlobalLootModifierProvider</code> and implementing <code>#start</code>. Each GLM can be added generated by calling <code>#add</code> and specifying the name of the modifier and the modifier instance to be serialized. After implementation, the provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -&gt; new MyGlobalLootModifierProvider(output, MOD_ID)\n    );\n}\n\n// In some GlobalLootModifierProvider#start\nthis.add(\"example_modifier\", new ExampleModifier(\n  new LootItemCondition[] {\n    WeatherCheck.weather().setRaining(true).build() // Executes when raining\n  },\n  \"val1\",\n  10,\n  Items.DIRT\n));</code></pre>"},{"location":"en/datagen/server/loottables/","title":"Loot Table Generation","text":"<p>Loot tables can be generated for a mod by constructing a new <code>LootTableProvider</code> and providing <code>LootTableProvider$SubProviderEntry</code>s. The provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -&gt; new MyLootTableProvider(\n          output,\n          // Specify registry names of tables that are required to generate, or can leave empty\n          Collections.emptySet(),\n          // Sub providers which generate the loot\n          List.of(subProvider1, subProvider2, /*...*/)\n        )\n    );\n}</code></pre>"},{"location":"en/datagen/server/loottables/#loottablesubprovider","title":"<code>LootTableSubProvider</code>","text":"<p>Each <code>LootTableProvider$SubProviderEntry</code> takes in a supplied <code>LootTableSubProvider</code>, which generates the loot table, for a given <code>LootContextParamSet</code>. The <code>LootTableSubProvider</code> contains a method which takes in the writer (<code>BiConsumer&lt;ResourceLocation, LootTable.Builder&gt;</code>) to generate a table.</p> <pre><code>public class ExampleSubProvider implements LootTableSubProvider {\n\n  // Used to create a factory method for the wrapping Supplier\n  public ExampleSubProvider() {}\n\n  // The method used to generate the loot tables\n  @Override\n  public void generate(BiConsumer&lt;ResourceLocation, LootTable.Builder&gt; writer) {\n    // Generate loot tables here by calling writer#accept\n  }\n}</code></pre> <p>The table can then be added to <code>LootTableProvider#getTables</code> for any available <code>LootContextParamSet</code>:</p> <pre><code>// In the list passed into the LootTableProvider constructor\nnew LootTableProvider.SubProviderEntry(\n  ExampleSubProvider::new,\n  // Loot table generator for the 'empty' param set\n  LootContextParamSets.EMPTY\n)</code></pre>"},{"location":"en/datagen/server/loottables/#blocklootsubprovider-and-entitylootsubprovider-subclasses","title":"<code>BlockLootSubProvider</code> and <code>EntityLootSubProvider</code> Subclasses","text":"<p>For <code>LootContextParamSets#BLOCK</code> and <code>#ENTITY</code>, there are special types (<code>BlockLootSubProvider</code> and <code>EntityLootSubProvider</code> respectively) which provide additional helper methods for creating and validating that there are loot tables.</p> <p>The <code>BlockLootSubProvider</code>\u2018s constructor takes in a list of items, which are explosion resistant to determine whether the loot table can be generated if a block is exploded, and a <code>FeatureFlagSet</code>, which determines whether the block is enabled so that a loot table is generated for it.</p> <pre><code>// In some BlockLootSubProvider subclass\npublic MyBlockLootSubProvider() {\n  super(Collections.emptySet(), FeatureFlags.REGISTRY.allFlags());\n}</code></pre> <p>The <code>EntityLootSubProvider</code>\u2018s constructor takes in a <code>FeatureFlagSet</code>, which determines whether the entity type is enabled so that a loot table is generated for it.</p> <pre><code>// In some EntityLootSubProvider subclass\npublic MyEntityLootSubProvider() {\n  super(FeatureFlags.REGISTRY.allFlags());\n}</code></pre> <p>To use them, all registered objects must be supplied to either <code>BlockLootSubProvider#getKnownBlocks</code> and <code>EntityLootSubProvider#getKnownEntityTypes</code> respectively. These methods are to make sure all objects within the iterable has a loot table.</p> <p>Tip</p> <p>If <code>DeferredRegister</code> is being used to register a mod\u2019s objects, then the <code>#getKnown*</code> methods can be supplied the entries via <code>DeferredRegister#getEntries</code>:</p> <pre><code>// In some BlockLootSubProvider subclass for some DeferredRegister BLOCK_REGISTRAR\n@Override\nprotected Iterable&lt;Block&gt; getKnownBlocks() {\n  return BLOCK_REGISTRAR.getEntries() // Get all registered entries\n    .stream() // Stream the wrapped objects\n    .flatMap(RegistryObject::stream) // Get the object if available\n    ::iterator; // Create the iterable\n}</code></pre> <p>The loot tables themselves can be added by implementing the <code>#generate</code> method.</p> <pre><code>// In some BlockLootSubProvider subclass\n@Override\npublic void generate() {\n  // Add loot tables here\n}</code></pre>"},{"location":"en/datagen/server/loottables/#loot-table-builders","title":"Loot Table Builders","text":"<p>To generate loot tables, they are accepted by the <code>LootTableSubProvider</code> as a <code>LootTable$Builder</code>. Afterwards, the specified <code>LootContextParamSet</code> is set in the <code>LootTableProvider$SubProviderEntry</code> and then built via <code>#build</code>. Before being built, the builder can specify entries, conditions, and modifiers which affect how the loot table functions.</p> <p>Note</p> <p>The functionality of loot tables is so expansive that it will not be covered by this documentation in its entirety. Instead, a brief description of each component will be mentioned. The specific subtypes of each component can be found using an IDE. Their implementations will be left as an exercise to the reader.</p>"},{"location":"en/datagen/server/loottables/#loottable","title":"LootTable","text":"<p>Loot tables are the base object and can be transformed into the required <code>LootTable$Builder</code> using <code>LootTable#lootTable</code>. The loot table can be built with a list of pools (via <code>#withPool</code>) applied in the order they are specified along with functions (via <code>#apply</code>) to modify the resulting items of those pools.</p>"},{"location":"en/datagen/server/loottables/#lootpool","title":"LootPool","text":"<p>Loot pools represents a group to perform operations and can generate a  <code>LootPool$Builder</code> using <code>LootPool#lootPool</code>. Each loot pool can specify the entries (via <code>#add</code>) which define the operations in the pool, the conditions (via <code>#when</code>) which define if the operations in the pool should be performed, and functions (via <code>#apply</code>) to modify the resulting items of the entries. Each pool can be executed as many times as specified (via <code>#setRolls</code>). Additionally, bonus executions can be specified (via <code>#setBonusRolls</code>) which is modified by the luck of the executor.</p>"},{"location":"en/datagen/server/loottables/#lootpoolentrycontainer","title":"LootPoolEntryContainer","text":"<p>Loot entries define the operations to occur when selected, typically generating items. Each entry has an associated, registered <code>LootPoolEntryType</code>. They also have their own associated builders which subtype <code>LootPoolEntryContainer$Builder</code>. Multiple entries can execute at the same time (via <code>#append</code>) or sequentially until one fails (via <code>#then</code>). Additionally, entries can default to another entry on failure (via <code>#otherwise</code>).</p>"},{"location":"en/datagen/server/loottables/#lootitemcondition","title":"LootItemCondition","text":"<p>Loot conditions define requirements which need to be met for some operation to execute. Each condition has an associated, registered <code>LootItemConditionType</code>. They also have their own associated builders which subtype <code>LootItemCondition$Builder</code>. By default, all loot conditions specified must return true for an operation to execute. Loot conditions can also be specified such that only one must return true instead (via <code>#or</code>). Additionally, the resulting output of a condition can be inverted (via <code>#invert</code>).</p>"},{"location":"en/datagen/server/loottables/#lootitemfunction","title":"LootItemFunction","text":"<p>Loot functions modify the result of an execution before passing it to the output. Each function has an associated, registered <code>LootItemFunctionType</code>. They also have their own associated builders which subtype <code>LootItemFunction$Builder</code>.</p>"},{"location":"en/datagen/server/loottables/#nbtprovider","title":"NbtProvider","text":"<p>NBT providers are a special type of functions defined by <code>CopyNbtFunction</code>. They define where to pull tag information from. Each provider has an associated, registered <code>LootNbtProviderType</code>.</p>"},{"location":"en/datagen/server/loottables/#numberprovider","title":"NumberProvider","text":"<p>Number providers determine how many times a loot pool executes. Each provider has an associated, registered <code>LootNumberProviderType</code>.</p>"},{"location":"en/datagen/server/loottables/#scoreboardnameprovider","title":"ScoreboardNameProvider","text":"<p>Scoreboard providers are a special type of number providers defined by <code>ScoreboardValue</code>. They define the name of the scoreboard to pull the number of rolls to execute from. Each provider has an associated, registered <code>LootScoreProviderType</code>.</p>"},{"location":"en/datagen/server/recipes/","title":"Recipe Generation","text":"<p>Recipes can be generated for a mod by subclassing <code>RecipeProvider</code> and implementing <code>#buildRecipes</code>. A recipe is supplied for data generation once a <code>FinishedRecipe</code> view is accepted by the consumer. <code>FinishedRecipe</code>s can either be created and supplied manually or, for convenience, created using a <code>RecipeBuilder</code>.</p> <p>After implementation, the provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        MyRecipeProvider::new\n    );\n}</code></pre>"},{"location":"en/datagen/server/recipes/#recipebuilder","title":"<code>RecipeBuilder</code>","text":"<p><code>RecipeBuilder</code> is a convenience implementation for creating <code>FinishedRecipe</code>s to generate. It provides basic definitions for unlocking, grouping, saving, and getting the result of a recipe. This is done through <code>#unlockedBy</code>, <code>#group</code>, <code>#save</code>, and <code>#getResult</code> respectively.</p> <p>Important</p> <p><code>ItemStack</code> outputs in recipes are not supported within vanilla recipe builders. A <code>FinishedRecipe</code> must be built in a different manner for existing vanilla recipe serializers to generate this data.</p> <p>Warning</p> <p>The item results being generated must have a valid <code>RecipeCategory</code> specified; otherwise, a <code>NullPointerException</code> will be thrown.</p> <p>All recipe builders except for [<code>SpecialRecipeBuilder</code>] require an advancement criteria to be specified. All recipes generate a criteria unlocking the recipe if the player has used the recipe previously. However, an additional criteria must be specified that allows the player to obtain the recipe without any prior knowledge. If any of the criteria specified is true, then the played will obtain the recipe for the recipe book.</p> <p>Tip</p> <p>Recipe criteria commonly use <code>InventoryChangeTrigger</code> to unlock their recipe when certain items are present in the user\u2019s inventory.</p>"},{"location":"en/datagen/server/recipes/#shapedrecipebuilder","title":"ShapedRecipeBuilder","text":"<p><code>ShapedRecipeBuilder</code> is used to generate shaped recipes. The builder can be initialized via <code>#shaped</code>. The recipe group, input symbol pattern, symbol definition of ingredients, and the recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nShapedRecipeBuilder builder = ShapedRecipeBuilder.shaped(RecipeCategory.MISC, result)\n  .pattern(\"a a\") // Create recipe pattern\n  .define('a', item) // Define what the symbol represents\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#additional-validation-checks","title":"Additional Validation Checks","text":"<p>Shaped recipes have some additional validation checks performed before building:</p> <ul> <li>A pattern must be defined and take in more than one item.</li> <li>All pattern rows must be the same width.</li> <li>A symbol cannot be defined more than once.</li> <li>The space character (<code>' '</code>) is reserved for representing no item in a slot and, as such, cannot be defined.</li> <li>A pattern must use all symbols defined by the user.</li> </ul>"},{"location":"en/datagen/server/recipes/#shapelessrecipebuilder","title":"ShapelessRecipeBuilder","text":"<p><code>ShapelessRecipeBuilder</code> is used to generate shapeless recipes. The builder can be initialized via <code>#shapeless</code>. The recipe group, input ingredients, and the recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nShapelessRecipeBuilder builder = ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, result)\n  .requires(item) // Add item to the recipe\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#simplecookingrecipebuilder","title":"SimpleCookingRecipeBuilder","text":"<p><code>SimpleCookingRecipeBuilder</code> is used to generate smelting, blasting, smoking, and campfire cooking recipes. Additionally, custom cooking recipes using the <code>SimpleCookingSerializer</code> can also be data generated using this builder. The builder can be initialized via <code>#smelting</code>, <code>#blasting</code>, <code>#smoking</code>, <code>#campfireCooking</code>, or <code>#cooking</code> respectively. The recipe group and the recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nSimpleCookingRecipeBuilder builder = SimpleCookingRecipeBuilder.smelting(input, RecipeCategory.MISC, result, experience, cookingTime)\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked \n  .save(writer); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#singleitemrecipebuilder","title":"SingleItemRecipeBuilder","text":"<p><code>SingleItemRecipeBuilder</code> is used to generate stonecutting recipes. Additionally, custom single item recipes using a serializer like <code>SingleItemRecipe$Serializer</code> can also be data generated using this builder. The builder can be initialized via <code>#stonecutting</code> or through the constructor respectively. The recipe group and the recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nSingleItemRecipeBuilder builder = SingleItemRecipeBuilder.stonecutting(input, RecipeCategory.MISC, result)\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#non-recipebuilder-builders","title":"Non-<code>RecipeBuilder</code> Builders","text":"<p>Some recipe builders do not implement <code>RecipeBuilder</code> due to lacking features used by all previously mentioned recipes.</p>"},{"location":"en/datagen/server/recipes/#smithingtransformrecipebuilder","title":"SmithingTransformRecipeBuilder","text":"<p><code>SmithingTransformRecipeBuilder</code> is used to generate smithing recipes which transform an item. Additionally, custom recipes using a serializer like <code>SmithingTransformRecipe$Serializer</code> can also be data generated using this builder. The builder can be initialized via <code>#smithing</code> or through the constructor respectively. The recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nSmithingTransformRecipeBuilder builder = SmithingTransformRecipeBuilder.smithing(template, base, addition, RecipeCategory.MISC, result)\n  .unlocks(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer, name); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#smithingtrimrecipebuilder","title":"SmithingTrimRecipeBuilder","text":"<p><code>SmithingTrimRecipeBuilder</code> is used to generate smithing recipes for armor trims. Additionally, custom upgrade recipes using a serializer like <code>SmithingTrimRecipe$Serializer</code> can also be data generated using this builder. The builder can be initialized via <code>#smithingTrim</code> or through the constructor respectively. The recipe unlock criteria can be specified before saving.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nSmithingTrimRecipe builder = SmithingTrimRecipe.smithingTrim(template, base, addition, RecipeCategory.MISC)\n  .unlocks(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer, name); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#specialrecipebuilder","title":"SpecialRecipeBuilder","text":"<p><code>SpecialRecipeBuilder</code> is used to generate empty JSONs for dynamic recipes that cannot easily be constrained to the recipe JSON format (dying armor, firework, etc.). The builder can be initialized via <code>#special</code>.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nSpecialRecipeBuilder.special(dynamicRecipeSerializer)\n  .save(writer, name); // Add data to builder</code></pre>"},{"location":"en/datagen/server/recipes/#conditional-recipes","title":"Conditional Recipes","text":"<p>Conditional recipes can also be data generated via <code>ConditionalRecipe$Builder</code>. The builder can be obtained using <code>#builder</code>.</p> <p>Conditions for each recipe can be specified by first calling <code>#addCondition</code> and then calling <code>#addRecipe</code> after all conditions have been specified. This process can be repeated as many times as the programmer would like.</p> <p>After all recipes have been specified, advancements can be added for each recipe at the end using <code>#generateAdvancement</code>. Alternatively, the conditional advancement can be set using <code>#setAdvancement</code>.</p> <pre><code>// In RecipeProvider#buildRecipes(writer)\nConditionalRecipe.builder()\n  // Add the conditions for the recipe\n  .addCondition(...)\n  // Add recipe to return when conditions are true\n  .addRecipe(...)\n\n  // Add the next conditions for the next recipe\n  .addCondition(...)\n  // Add next recipe to return when the next conditions are true\n  .addRecipe(...)\n\n  // Create conditional advancement which uses the conditions\n  // and unlocking advancement in the recipes above\n  .generateAdvancement()\n  .build(writer, name);</code></pre>"},{"location":"en/datagen/server/recipes/#iconditionbuilder","title":"IConditionBuilder","text":"<p>To simplify adding conditions to conditional recipes without having to construct the instances of each condition instance manually, the extended <code>RecipeProvider</code> can implement <code>IConditionBuilder</code>. The interface adds methods to easily construct condition instances.</p> <pre><code>// In ConditionalRecipe$Builder#addCondition\n(\n  // If either 'examplemod:example_item'\n  // OR 'examplemod:example_item2' exists\n  // AND\n  // NOT FALSE\n\n  // Methods are defined by IConditionBuilder\n  and( \n    or(\n      itemExists(\"examplemod\", \"example_item\"),\n      itemExists(\"examplemod\", \"example_item2\")\n    ),\n    not(\n      FALSE()\n    )\n  )\n)</code></pre>"},{"location":"en/datagen/server/recipes/#custom-recipe-serializers","title":"Custom Recipe Serializers","text":"<p>Custom recipe serializers can be data generated by creating a builder that can construct a <code>FinishedRecipe</code>. The finished recipe encodes the recipe data and its unlocking advancement, when present, to JSON. Additionally, the name and serializer of the recipe is also specified to know where to write to and what can decode the object when loading. Once a <code>FinishedRecipe</code> is constructed, it simply needs to be passed to the <code>Consumer</code> supplied by <code>RecipeProvider#buildRecipes</code>.</p> <p>Tip</p> <p><code>FinishedRecipe</code>s are flexible enough that any object transformation can be data generated, not just items.</p>"},{"location":"en/datagen/server/tags/","title":"Tag Generation","text":"<p>Tags can be generated for a mod by subclassing <code>TagsProvider</code> and implementing <code>#addTags</code>. After implementation, the provider must be added to the <code>DataGenerator</code>.</p> <pre><code>// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        // Extends net.minecraftforge.common.data.BlockTagsProvider\n        output -&gt; new MyBlockTagsProvider(\n          output,\n          event.getLookupProvider(),\n          MOD_ID,\n          event.getExistingFileHelper()\n        )\n    );\n}</code></pre>"},{"location":"en/datagen/server/tags/#tagsprovider","title":"<code>TagsProvider</code>","text":"<p>The tags provider has two methods used for generating tags: creating a tag with objects and other tags via <code>#tag</code>, or using tags from other object types to generate the tag data via <code>#getOrCreateRawBuilder</code>.</p> <p>Note</p> <p>Typically, a provider will not call <code>#getOrCreateRawBuilder</code> directly unless a registry contains a representation of objects from a different registry (blocks have item representations to obtain the blocks in the inventory).</p> <p>When <code>#tag</code> is called, a <code>TagAppender</code> is created which acts as a chainable consumer of elements to add to the tag:</p> Method Description <code>add</code> Adds an object to a tag through its resource key. <code>addOptional</code> Adds an object to a tag through its name. If the object is not present, then the object will be skipped when loading. <code>addTag</code> Adds a tag to a tag through its tag key. All elements within the inner tag are now a part of the outer tag. <code>addOptionalTag</code> Adds a tag to a tag through its name. If the tag is not present, then the tag will be skipped when loading. <code>replace</code> When <code>true</code>, all previously loaded entries added to this tag from other datapacks will be discarded. If a datapack is loaded after this one, then it will still append the entries to the tag. <code>remove</code> Removes an object or tag from a tag through its name or key. <pre><code>// In some TagProvider#addTags\nthis.tag(EXAMPLE_TAG)\n  .add(EXAMPLE_OBJECT) // Adds an object to the tag\n  .addOptional(new ResourceLocation(\"othermod\", \"other_object\")) // Adds an object from another mod to the tag\n\nthis.tag(EXAMPLE_TAG_2)\n  .addTag(EXAMPLE_TAG) // Adds a tag to the tag\n  .remove(EXAMPLE_OBJECT) // Removes an object from this tag</code></pre> <p>Important</p> <p>If the mod\u2019s tags softly depends on another mod\u2019s tags (the other mod may or may not be present at runtime), the other mods\u2019 tags should be referenced using the optional methods.</p>"},{"location":"en/datagen/server/tags/#existing-providers","title":"Existing Providers","text":"<p>Minecraft contains a few tag providers for certain registries that can be subclassed instead. Additionally, some providers contain additional helper methods to more easily create tags.</p> Registry Object Type Tag Provider <code>Block</code> <code>BlockTagsProvider</code>* <code>Item</code> <code>ItemTagsProvider</code> <code>EntityType</code> <code>EntityTypeTagsProvider</code> <code>Fluid</code> <code>FluidTagsProvider</code> <code>GameEvent</code> <code>GameEventTagsProvider</code> <code>Biome</code> <code>BiomeTagsProvider</code> <code>FlatLevelGeneratorPreset</code> <code>FlatLevelGeneratorPresetTagsProvider</code> <code>WorldPreset</code> <code>WorldPresetTagsProvider</code> <code>Structure</code> <code>StructureTagsProvider</code> <code>PoiType</code> <code>PoiTypeTagsProvider</code> <code>BannerPattern</code> <code>BannerPatternTagsProvider</code> <code>CatVariant</code> <code>CatVariantTagsProvider</code> <code>PaintingVariant</code> <code>PaintingVariantTagsProvider</code> <code>Instrument</code> <code>InstrumentTagsProvider</code> <code>DamageType</code> <code>DamageTypeTagsProvider</code> <p>* <code>BlockTagsProvider</code> is a Forge added <code>TagsProvider</code>.</p>"},{"location":"en/datagen/server/tags/#itemtagsprovidercopy","title":"<code>ItemTagsProvider#copy</code>","text":"<p>Blocks have item representations to obtain them in the inventory. As such, many of the block tags can also be an item tag. To easily generate item tags to have the same entries as block tags, the <code>#copy</code> method can be used which takes in the block tag to copy from and the item tag to copy to.</p> <pre><code>//In ItemTagsProvider#addTags\nthis.copy(EXAMPLE_BLOCK_TAG, EXAMPLE_ITEM_TAG);</code></pre>"},{"location":"en/datagen/server/tags/#custom-tag-providers","title":"Custom Tag Providers","text":"<p>A custom tag provider can be created via a <code>TagsProvider</code> subclass which takes in the registry key to generate tags for.</p> <pre><code>public RecipeTypeTagsProvider(PackOutput output, CompletableFuture&lt;HolderLookup.Provider&gt; registries, ExistingFileHelper fileHelper) {\n  super(output, Registries.RECIPE_TYPE, registries, MOD_ID, fileHelper);\n}</code></pre>"},{"location":"en/datagen/server/tags/#intrinsic-holder-tags-providers","title":"Intrinsic Holder Tags Providers","text":"<p>One special type of <code>TagProvider</code>s are <code>IntrinsicHolderTagsProvider</code>s. When creating a tag using this provider via <code>#tag</code>, the object itself can be used to add itself to the tag via <code>#add</code>. To do so, a function is provided within the constructor to turn an object into its <code>ResourceKey</code>.</p> <pre><code>// Subtype of `IntrinsicHolderTagsProvider`\npublic AttributeTagsProvider(PackOutput output, CompletableFuture&lt;HolderLookup.Provider&gt; registries, ExistingFileHelper fileHelper) {\n  super(\n    output,\n    ForgeRegistries.Keys.ATTRIBUTES,\n    registries,\n    attribute -&gt; ForgeRegistries.ATTRIBUTES.getResourceKey(attribute).get(),\n    MOD_ID,\n    fileHelper\n  );\n}</code></pre>"},{"location":"en/datastorage/capabilities/","title":"The Capability System","text":"<p>Capabilities allow exposing features in a dynamic and flexible way without having to resort to directly implementing many interfaces.</p> <p>In general terms, each capability provides a feature in the form of an interface.</p> <p>Forge adds capability support to BlockEntities, Entities, ItemStacks, Levels, and LevelChunks, which can be exposed either by attaching them through an event or by overriding the capability methods in your own implementations of the objects. This will be explained in more detail in the following sections.</p>"},{"location":"en/datastorage/capabilities/#forge-provided-capabilities","title":"Forge-provided Capabilities","text":"<p>Forge provides three capabilities: <code>IItemHandler</code>, <code>IFluidHandler</code> and <code>IEnergyStorage</code></p> <p><code>IItemHandler</code> exposes an interface for handling inventory slots. It can be applied to BlockEntities (chests, machines, etc.), Entities (extra player slots, mob/creature inventories/bags), or ItemStacks (portable backpacks and such). It replaces the old <code>Container</code> and <code>WorldlyContainer</code> with an automation-friendly system.</p> <p><code>IFluidHandler</code> exposes an interface for handling fluid inventories. It can also be applied to BlockEntities, Entities, or ItemStacks.</p> <p><code>IEnergyStorage</code> exposes an interface for handling energy containers. It can be applied to BlockEntities, Entities, or ItemStacks. It is based on the RedstoneFlux API by TeamCoFH.</p>"},{"location":"en/datastorage/capabilities/#using-an-existing-capability","title":"Using an Existing Capability","text":"<p>As mentioned earlier, BlockEntities, Entities, and ItemStacks implement the capability provider feature through the <code>ICapabilityProvider</code> interface. This interface adds the method <code>#getCapability</code>, which can be used to query the capabilities present in the associated provider objects.</p> <p>In order to obtain a capability, you will need to refer it by its unique instance. In the case of the <code>IItemHandler</code>, this capability is primarily stored in <code>ForgeCapabilities#ITEM_HANDLER</code>, but it is possible to get other instance references by using <code>CapabilityManager#get</code></p> <pre><code>public static final Capability&lt;IItemHandler&gt; ITEM_HANDLER = CapabilityManager.get(new CapabilityToken&lt;&gt;(){});</code></pre> <p>When called, <code>CapabilityManager#get</code> provides a non-null capability for your associated type. The anonymous <code>CapabilityToken</code> allows Forge to keep a soft dependency system while still having the necessary generic information to get the correct capability.</p> <p>Important</p> <p>Even if you have a non-null capability available to you at all times, it does not mean the capability itself is usable or registered yet. This can be checked via <code>Capability#isRegistered</code>.</p> <p>The <code>#getCapability</code> method has a second parameter, of type <code>Direction</code>, which can be used to request the specific instance for that one face. If passed <code>null</code>, it can be assumed that the request comes either from within the block or from some place where the side has no meaning, such as a different dimension. In this case a general capability instance that does not care about sides will be requested instead. The return type of <code>#getCapability</code> will correspond to a <code>LazyOptional</code> of the type declared in the capability passed to the method. For the Item Handler capability, this is <code>LazyOptional&lt;IItemHandler&gt;</code>. If the capability is not available for a particular provider, it will return an empty <code>LazyOptional</code> instead.</p>"},{"location":"en/datastorage/capabilities/#exposing-a-capability","title":"Exposing a Capability","text":"<p>In order to expose a capability, you will first need an instance of the underlying capability type. Note that you should assign a separate instance to each object that keeps the capability, since the capability will most probably be tied to the containing object.</p> <p>In the case of <code>IItemHandler</code>, the default implementation uses the <code>ItemStackHandler</code> class, which has an optional argument in the constructor, to specify a number of slots. However, relying on the existence of these default implementations should be avoided, as the purpose of the capability system is to prevent loading errors in contexts where the capability is not present, so instantiation should be protected behind a check testing if the capability has been registered (see the remarks about <code>CapabilityManager#get</code> in the previous section).</p> <p>Once you have your own instance of the capability interface, you will want to notify users of the capability system that you expose this capability and provide a <code>LazyOptional</code> of the interface reference. This is done by overriding the <code>#getCapability</code> method, and comparing the capability instance with the capability you are exposing. If your machine has different slots based on which side is being queried, you can test this with the <code>side</code> parameter. For Entities and ItemStacks, this parameter can be ignored, but it is still possible to have side as a context, such as different armor slots on a player (<code>Direction#UP</code> exposing the player\u2019s helmet slot), or about the surrounding blocks in the inventory (<code>Direction#WEST</code> exposing the input slot of a furnace). Do not forget to fall back to <code>super</code>, otherwise existing attached capabilities will stop working.</p> <p>Capabilities must be invalidated at the end of the provider\u2019s lifecycle via <code>LazyOptional#invalidate</code>. For owned BlockEntities and Entities, the <code>LazyOptional</code> can be invalidated within <code>#invalidateCaps</code>. For non-owned providers, a runnable supplying the invalidation should be passed into <code>AttachCapabilitiesEvent#addListener</code>.</p> <pre><code>// Somewhere in your BlockEntity subclass\nLazyOptional&lt;IItemHandler&gt; inventoryHandlerLazyOptional;\n\n// Supplied instance (e.g. () -&gt; inventoryHandler)\n// Ensure laziness as initialization should only happen when needed\ninventoryHandlerLazyOptional = LazyOptional.of(inventoryHandlerSupplier);\n\n@Override\npublic &lt;T&gt; LazyOptional&lt;T&gt; getCapability(Capability&lt;T&gt; cap, Direction side) {\n  if (cap == ForgeCapabilities.ITEM_HANDLER) {\n    return inventoryHandlerLazyOptional.cast();\n  }\n  return super.getCapability(cap, side);\n}\n\n@Override\npublic void invalidateCaps() {\n  super.invalidateCaps();\n  inventoryHandlerLazyOptional.invalidate();\n}</code></pre> <p>Tip</p> <p>If only one capability is exposed on a given object, you can use <code>Capability#orEmpty</code> as an alternative to the if/else statement.</p> <pre><code>@Override\npublic &lt;T&gt; LazyOptional&lt;T&gt; getCapability(Capability&lt;T&gt; cap, Direction side) {\n  return ForgeCapabilities.ITEM_HANDLER.orEmpty(cap, inventoryHandlerLazyOptional);\n}</code></pre> <p><code>Item</code>s are a special case since their capability providers are stored on an <code>ItemStack</code>. Instead, a provider should be attached through <code>Item#initCapabilities</code>. This should hold your capabilities for the lifecycle of the stack.</p> <p>It is strongly suggested that direct checks in code are used to test for capabilities instead of attempting to rely on maps or other data structures, since capability tests can be done by many objects every tick, and they need to be as fast as possible in order to avoid slowing down the game.</p>"},{"location":"en/datastorage/capabilities/#attaching-capabilities","title":"Attaching Capabilities","text":"<p>As mentioned, attaching capabilities to existing providers, <code>Level</code>s, and <code>LevelChunk</code>s can be done using <code>AttachCapabilitiesEvent</code>. The same event is used for all objects that can provide capabilities. <code>AttachCapabilitiesEvent</code> has 5 valid generic types providing the following events:</p> <ul> <li><code>AttachCapabilitiesEvent&lt;Entity&gt;</code>: Fires only for entities.</li> <li><code>AttachCapabilitiesEvent&lt;BlockEntity&gt;</code>: Fires only for block entities.</li> <li><code>AttachCapabilitiesEvent&lt;ItemStack&gt;</code>: Fires only for item stacks.</li> <li><code>AttachCapabilitiesEvent&lt;Level&gt;</code>: Fires only for levels.</li> <li><code>AttachCapabilitiesEvent&lt;LevelChunk&gt;</code>: Fires only for level chunks.</li> </ul> <p>The generic type cannot be more specific than the above types. For example: If you want to attach capabilities to <code>Player</code>, you have to subscribe to the <code>AttachCapabilitiesEvent&lt;Entity&gt;</code>, and then determine that the provided object is an <code>Player</code> before attaching the capability.</p> <p>In all cases, the event has a method <code>#addCapability</code> which can be used to attach capabilities to the target object. Instead of adding capabilities themselves to the list, you add capability providers, which have the chance to return capabilities only from certain sides. While the provider only needs to implement <code>ICapabilityProvider</code>, if the capability needs to store data persistently, it is possible to implement <code>ICapabilitySerializable&lt;T extends Tag&gt;</code> which, on top of returning the capabilities, will provide tag save/load functions.</p> <p>For information on how to implement <code>ICapabilityProvider</code>, refer to the Exposing a Capability section.</p>"},{"location":"en/datastorage/capabilities/#creating-your-own-capability","title":"Creating Your Own Capability","text":"<p>A capability can be registered using one of two ways: <code>RegisterCapabilitiesEvent</code> or <code>@AutoRegisterCapability</code>.</p>"},{"location":"en/datastorage/capabilities/#registercapabilitiesevent","title":"RegisterCapabilitiesEvent","text":"<p>A capability can be registered using <code>RegisterCapabilitiesEvent</code> by supplying the class of the capability type to the <code>#register</code> method. The event is handled on the mod event bus.</p> <pre><code>@SubscribeEvent\npublic void registerCaps(RegisterCapabilitiesEvent event) {\n  event.register(IExampleCapability.class);\n}</code></pre>"},{"location":"en/datastorage/capabilities/#autoregistercapability","title":"@AutoRegisterCapability","text":"<p>A capability is registered using <code>@AutoRegisterCapability</code> by annotating the capability type.</p> <pre><code>@AutoRegisterCapability\npublic interface IExampleCapability {\n  // ...\n}</code></pre>"},{"location":"en/datastorage/capabilities/#persisting-levelchunk-and-blockentity-capabilities","title":"Persisting LevelChunk and BlockEntity capabilities","text":"<p>Unlike Levels, Entities, and ItemStacks, LevelChunks and BlockEntities are only written to disk when they have been marked as dirty. A capability implementation with persistent state for a LevelChunk or a BlockEntity should therefore ensure that whenever its state changes, its owner is marked as dirty.</p> <p><code>ItemStackHandler</code>, commonly used for inventories in BlockEntities, has an overridable method <code>void onContentsChanged(int slot)</code> designed to be used to mark the BlockEntity as dirty.</p> <pre><code>public class MyBlockEntity extends BlockEntity {\n\n  private final IItemHandler inventory = new ItemStackHandler(...) {\n    @Override\n    protected void onContentsChanged(int slot) {\n      super.onContentsChanged(slot);\n      setChanged();\n    }\n  }\n\n  // ...\n}</code></pre>"},{"location":"en/datastorage/capabilities/#synchronizing-data-with-clients","title":"Synchronizing Data with Clients","text":"<p>By default, capability data is not sent to clients. In order to change this, the mods have to manage their own synchronization code using packets.</p> <p>There are three different situations in which you may want to send synchronization packets, all of them optional:</p> <ol> <li>When the entity spawns in the level, or the block is placed, you may want to share the initialization-assigned values with the clients.</li> <li>When the stored data changes, you may want to notify some or all of the watching clients.</li> <li>When a new client starts viewing the entity or block, you may want to notify it of the existing data.</li> </ol> <p>Refer to the Networking page for more information on implementing network packets.</p>"},{"location":"en/datastorage/capabilities/#persisting-across-player-deaths","title":"Persisting across Player Deaths","text":"<p>By default, the capability data does not persist on death. In order to change this, the data has to be manually copied when the player entity is cloned during the respawn process.</p> <p>This can be done via <code>PlayerEvent$Clone</code> by reading the data from the original entity and assigning it to the new entity. In this event, the <code>#isWasDeath</code> method can be used to distinguish between respawning after death and returning from the End. This is important because the data will already exist when returning from the End, so care has to be taken to not duplicate values in this case.</p>"},{"location":"en/datastorage/capabilities/#migrating-from-iextendedentityproperties","title":"Migrating from IExtendedEntityProperties","text":"<p>Although the Capability system can do everything IEEPs (IExtendedEntityProperties) did and more, the two concepts don\u2019t fully match 1:1. This section will explain how to convert existing IEEPs into Capabilities.</p> <p>This is a quick list of IEEP concepts and their Capability equivalent:</p> <ul> <li>Property name/id (<code>String</code>): Capability key (<code>ResourceLocation</code>)</li> <li>Registration (<code>EntityConstructing</code>): Attaching (<code>AttachCapabilitiesEvent&lt;Entity&gt;</code>), the real registration of the <code>Capability</code> happens during <code>FMLCommonSetupEvent</code>.</li> <li>Tag read/write methods: Does not happen automatically. Attach an <code>ICapabilitySerializable</code> in the event and run the read/write methods from the <code>serializeNBT</code>/<code>deserializeNBT</code>.</li> </ul> <p>Quick conversion guide:</p> <ol> <li>Convert the IEEP key/id string into a <code>ResourceLocation</code> (which will use your MODID as a namespace).</li> <li>In your handler class (not the class that implements your capability interface), create a field that will hold the Capability instance.</li> <li>Change the <code>EntityConstructing</code> event to <code>AttachCapabilitiesEvent</code>, and instead of querying the IEEP, you will want to attach an <code>ICapabilityProvider</code> (probably <code>ICapabilitySerializable</code>, which allows saving/loading from a tag).</li> <li>Create a registration method if you don\u2019t have one (you may have one where you registered your IEEP\u2019s event handlers) and in it, run the capability registration function.</li> </ol>"},{"location":"en/datastorage/codecs/","title":"Codecs","text":"<p>Codecs are a serialization tool from Mojang\u2019s DataFixerUpper used to describe how objects can be transformed between different formats, such as <code>JsonElement</code>s for JSON and <code>Tag</code>s for NBT.</p>"},{"location":"en/datastorage/codecs/#using-codecs","title":"Using Codecs","text":"<p>Codecs are primarily used to encode, or serialize, Java objects to some data format type and decode, or deserialize, formatted data objects back to its associated Java type. This is typically accomplished using <code>Codec#encodeStart</code> and <code>Codec#parse</code>, respectively.</p>"},{"location":"en/datastorage/codecs/#dynamicops","title":"DynamicOps","text":"<p>To determine what intermediate file format to encode and decode to, both <code>#encodeStart</code> and <code>#parse</code> require a <code>DynamicOps</code> instance to define the data within that format.</p> <p>The DataFixerUpper library contains <code>JsonOps</code> to codec JSON data stored in <code>Gson</code>\u2018s <code>JsonElement</code> instances. <code>JsonOps</code> supports two versions of <code>JsonElement</code> serialization: <code>JsonOps#INSTANCE</code> which defines a standard JSON file, and <code>JsonOps#COMPRESSED</code> which allows data to be compressed into a single string.</p> <pre><code>// Let exampleCodec represent a Codec&lt;ExampleJavaObject&gt;\n// Let exampleObject be a ExampleJavaObject\n// Let exampleJson be a JsonElement\n\n// Encode Java object to regular JsonElement\nexampleCodec.encodeStart(JsonOps.INSTANCE, exampleObject);\n\n// Encode Java object to compressed JsonElement\nexampleCodec.encodeStart(JsonOps.COMPRESSED, exampleObject);\n\n// Decode JsonElement into Java object\n// Assume JsonElement was parsed normally\nexampleCodec.parse(JsonOps.INSTANCE, exampleJson);</code></pre> <p>Minecraft also provides <code>NbtOps</code> to codec NBT data stored in <code>Tag</code> instances. This can be referenced using <code>NbtOps#INSTANCE</code>.</p> <pre><code>// Let exampleCodec represent a Codec&lt;ExampleJavaObject&gt;\n// Let exampleObject be a ExampleJavaObject\n// Let exampleNbt be a Tag\n\n// Encode Java object to Tag\nexampleCodec.encodeStart(JsonOps.INSTANCE, exampleObject);\n\n// Decode Tag into Java object\nexampleCodec.parse(JsonOps.INSTANCE, exampleNbt);</code></pre>"},{"location":"en/datastorage/codecs/#format-conversion","title":"Format Conversion","text":"<p><code>DynamicOps</code> can also be used separately to convert between two different encoded formats. This can be done using <code>#convertTo</code> and supplying the <code>DynamicOps</code> format and the encoded object to convert.</p> <pre><code>// Convert Tag to JsonElement\n// Let exampleTag be a Tag\nJsonElement convertedJson = NbtOps.INSTANCE.convertTo(JsonOps.INSTANCE, exampleTag);</code></pre>"},{"location":"en/datastorage/codecs/#dataresult","title":"DataResult","text":"<p>Encoded or decoded data using codecs return a <code>DataResult</code> which holds the converted instance or some error data depending on whether the conversion was successful. When the conversion is successful, the <code>Optional</code> supplied by <code>#result</code> will contain the successfully converted object. If the conversion fails, the <code>Optional</code> supplied by <code>#error</code> will contain the <code>PartialResult</code>, which holds the error message and a partially converted object depending on the codec.</p> <p>Additionally, there are many methods on <code>DataResult</code> that can be used to transform the result or error into the desired format. For example, <code>#resultOrPartial</code> will return an <code>Optional</code> containing the result on success, and the partially converted object on failure. The method takes in a string consumer to determine how to report the error message if present.</p> <pre><code>// Let exampleCodec represent a Codec&lt;ExampleJavaObject&gt;\n// Let exampleJson be a JsonElement\n\n// Decode JsonElement into Java object\nDataResult&lt;ExampleJavaObject&gt; result = exampleCodec.parse(JsonOps.INSTANCE, exampleJson);\n\nresult\n  // Get result or partial on error, report error message\n  .resultOrPartial(errorMessage -&gt; /* Do something with error message */)\n  // If result or partial is present, do something\n  .ifPresent(decodedObject -&gt; /* Do something with decoded object */);</code></pre>"},{"location":"en/datastorage/codecs/#existing-codecs","title":"Existing Codecs","text":""},{"location":"en/datastorage/codecs/#primitives","title":"Primitives","text":"<p>The <code>Codec</code> class contains static instances of codecs for certain defined primitives.</p> Codec Java Type <code>BOOL</code> <code>Boolean</code> <code>BYTE</code> <code>Byte</code> <code>SHORT</code> <code>Short</code> <code>INT</code> <code>Integer</code> <code>LONG</code> <code>Long</code> <code>FLOAT</code> <code>Float</code> <code>DOUBLE</code> <code>Double</code> <code>STRING</code> <code>String</code> <code>BYTE_BUFFER</code> <code>ByteBuffer</code> <code>INT_STREAM</code> <code>IntStream</code> <code>LONG_STREAM</code> <code>LongStream</code> <code>PASSTHROUGH</code> <code>Dynamic&lt;?&gt;</code>* <code>EMPTY</code> <code>Unit</code>** <p>* <code>Dynamic</code> is an object which holds a value encoded in a supported <code>DynamicOps</code> format. These are typically used to convert encoded object formats into other encoded object formats.</p> <p>** <code>Unit</code> is an object used to represent <code>null</code> objects.</p>"},{"location":"en/datastorage/codecs/#vanilla-and-forge","title":"Vanilla and Forge","text":"<p>Minecraft and Forge define many codecs for objects that are frequently encoded and decoded. Some examples include <code>ResourceLocation#CODEC</code> for <code>ResourceLocation</code>s, <code>ExtraCodecs#INSTANT_ISO8601</code> for <code>Instant</code>s in the <code>DateTimeFormatter#ISO_INSTANT</code> format, and <code>CompoundTag#CODEC</code> for <code>CompoundTag</code>s.</p> <p>Warning</p> <p><code>CompoundTag</code>s cannot decode lists of numbers from JSON using <code>JsonOps</code>. <code>JsonOps</code>, when converting, sets a number to its most narrow type. <code>ListTag</code>s force a specific type for its data, so numbers with different types (e.g. <code>64</code> would be <code>byte</code>, <code>384</code> would be <code>short</code>) will throw an error on conversion.</p> <p>Vanilla and Forge registries also have codecs for the type of object the registry contains (e.g. <code>Registry#BLOCK</code> or <code>ForgeRegistries#BLOCKS</code> have a <code>Codec&lt;Block&gt;</code>). <code>Registry#byNameCodec</code> and <code>IForgeRegistry#getCodec</code> will encode the registry object to their registry name, or an integer identifier if compressed. Vanilla registries also have a <code>Registry#holderByNameCodec</code> which encodes to a registry name and decodes to the registry object wrapped in a <code>Holder</code>.</p>"},{"location":"en/datastorage/codecs/#creating-codecs","title":"Creating Codecs","text":"<p>Codecs can be created for encoding and decoding any object. For understanding purposes, the equivalent encoded JSON will be shown.</p>"},{"location":"en/datastorage/codecs/#records","title":"Records","text":"<p>Codecs can define objects through the use of records. Each record codec defines any object with explicit named fields. There are many ways to create a record codec, but the simplest is via <code>RecordCodecBuilder#create</code>.</p> <p><code>RecordCodecBuilder#create</code> takes in a function which defines an <code>Instance</code> and returns an application (<code>App</code>) of the object. A correlation can be drawn to creating a class instance and the constructors used to apply the class to the constructed object.</p> <pre><code>// Some object to create a codec for\npublic class SomeObject {\n\n  public SomeObject(String s, int i, boolean b) { /* ... */ }\n\n  public String s() { /* ... */ }\n\n  public int i() { /* ... */ }\n\n  public boolean b() { /* ... */ }\n}</code></pre>"},{"location":"en/datastorage/codecs/#fields","title":"Fields","text":"<p>An <code>Instance</code> can define up to 16 fields using <code>#group</code>. Each field must be an application defining the instance the object is being made for and the type of the object. The simplest way to meet this requirement is by taking a <code>Codec</code>, setting the name of the field to decode from, and setting the getter used to encode the field.</p> <p>A field can be created from a <code>Codec</code> using <code>#fieldOf</code>, if the field is required, or <code>#optionalFieldOf</code>, if the field is wrapped in an <code>Optional</code> or defaulted. Either method requires a string containing the name of the field in the encoded object. The getter used to encode the field can then be set using <code>#forGetter</code>, taking in a function which given the object, returns the field data.</p> <p>From there, the resulting product can be applied via <code>#apply</code> to define how the instance should construct the object for the application. For ease of convenience, the grouped fields should be listed in the same order they appear in the constructor such that the function can simply be a constructor method reference.</p> <pre><code>public static final Codec&lt;SomeObject&gt; RECORD_CODEC = RecordCodecBuilder.create(instance -&gt; // Given an instance\n  instance.group( // Define the fields within the instance\n    Codec.STRING.fieldOf(\"s\").forGetter(SomeObject::s), // String\n    Codec.INT.optionalFieldOf(\"i\", 0).forGetter(SomeObject::i), // Integer, defaults to 0 if field not present\n    Codec.BOOL.fieldOf(\"b\").forGetter(SomeObject::b) // Boolean\n  ).apply(instance, SomeObject::new) // Define how to create the object\n);</code></pre> <pre><code>// Encoded SomeObject\n{\n  \"s\": \"value\",\n  \"i\": 5,\n  \"b\": false\n}\n\n// Another encoded SomeObject\n{\n  \"s\": \"value2\",\n  // i is omitted, defaults to 0\n  \"b\": true\n}</code></pre>"},{"location":"en/datastorage/codecs/#transformers","title":"Transformers","text":"<p>Codecs can be transformed into equivalent, or partially equivalent, representations through mapping methods. Each mapping method takes in two functions: one to transform the current type into the new type, and one to transform the new type back to the current type. This is done through the <code>#xmap</code> function.</p> <pre><code>// A class\npublic class ClassA {\n\n  public ClassB toB() { /* ... */ }\n}\n\n// Another equivalent class\npublic class ClassB {\n\n  public ClassA toA() { /* ... */ }\n}\n\n// Assume there is some codec A_CODEC\npublic static final Codec&lt;ClassB&gt; B_CODEC = A_CODEC.xmap(ClassA::toB, ClassB::toA);</code></pre> <p>If a type is partially equivalent, meaning that there are some restrictions during conversion, there are mapping functions which return a <code>DataResult</code> which can be used to return an error state whenever an exception or invalid state is reached.</p> Is A Fully Equivalent to B Is B Fully Equivalent to A Transform Method Yes Yes <code>#xmap</code> Yes No <code>#flatComapMap</code> No Yes <code>#comapFlatMap</code> No No <code>#flatXMap</code> <pre><code>// Given an string codec to convert to a integer\n// Not all strings can become integers (A is not fully equivalent to B)\n// All integers can become strings (B is fully equivalent to A)\npublic static final Codec&lt;Integer&gt; INT_CODEC = Codec.STRING.comapFlatMap(\n  s -&gt; { // Return data result containing error on failure\n    try {\n      return DataResult.success(Integer.valueOf(s));\n    } catch (NumberFormatException e) {\n      return DataResult.error(s + \" is not an integer.\");\n    }\n  },\n  Integer::toString // Regular function\n);</code></pre> <pre><code>// Will return 5\n\"5\"\n\n// Will error, not an integer\n\"value\"</code></pre>"},{"location":"en/datastorage/codecs/#range-codecs","title":"Range Codecs","text":"<p>Range codecs are an implementation of <code>#flatXMap</code> which returns an error <code>DataResult</code> if the value is not inclusively between the set minimum and maximum. The value is still provided as a partial result if outside the bounds. There are implementations for integers, floats, and doubles via <code>#intRange</code>, <code>#floatRange</code>, and <code>#doubleRange</code> respectively.</p> <pre><code>public static final Codec&lt;Integer&gt; RANGE_CODEC = Codec.intRange(0, 4); </code></pre> <pre><code>// Will be valid, inside [0, 4]\n4\n\n// Will error, outside [0, 4]\n5</code></pre>"},{"location":"en/datastorage/codecs/#defaults","title":"Defaults","text":"<p>If the result of encoding or decoding fails, a default value can be supplied instead via <code>Codec#orElse</code> or <code>Codec#orElseGet</code>.</p> <pre><code>public static final Codec&lt;Integer&gt; DEFAULT_CODEC = Codec.INT.orElse(0); // Can also be a supplied value via #orElseGet</code></pre> <pre><code>// Not an integer, defaults to 0\n\"value\"</code></pre>"},{"location":"en/datastorage/codecs/#unit","title":"Unit","text":"<p>A codec which supplies an in-code value and encodes to nothing can be represented using <code>Codec#unit</code>. This is useful if a codec uses a non-encodable entry within the data object.</p> <pre><code>public static final Codec&lt;IForgeRegistry&lt;Block&gt;&gt; UNIT_CODEC = Codec.unit(\n  () -&gt; ForgeRegistries.BLOCKS // Can also be a raw value\n);</code></pre> <pre><code>// Nothing here, will return block registry codec</code></pre>"},{"location":"en/datastorage/codecs/#list","title":"List","text":"<p>A codec for a list of objects can be generated from an object codec via <code>Codec#listOf</code>.</p> <pre><code>// BlockPos#CODEC is a Codec&lt;BlockPos&gt;\npublic static final Codec&lt;List&lt;BlockPos&gt;&gt; LIST_CODEC = BlockPos.CODEC.listOf();</code></pre> <pre><code>// Encoded List&lt;BlockPos&gt;\n[\n  [1, 2, 3], // BlockPos(1, 2, 3)\n  [4, 5, 6], // BlockPos(4, 5, 6)\n  [7, 8, 9]  // BlockPos(7, 8, 9)\n]</code></pre> <p>List objects decoded using a list codec are stored in an immutable list. If a mutable list is needed, a transformer should be applied to the list codec.</p>"},{"location":"en/datastorage/codecs/#map","title":"Map","text":"<p>A codec for a map of keys and value objects can be generated from two codecs via <code>Codec#unboundedMap</code>. Unbounded maps can specify any string-based or string-transformed value to be a key.</p> <pre><code>// BlockPos#CODEC is a Codec&lt;BlockPos&gt;\npublic static final Codec&lt;Map&lt;String, BlockPos&gt;&gt; MAP_CODEC = Codec.unboundedMap(Codec.STRING, BlockPos.CODEC);</code></pre> <pre><code>// Encoded Map&lt;String, BlockPos&gt;\n{\n  \"key1\": [1, 2, 3], // key1 -&gt; BlockPos(1, 2, 3)\n  \"key2\": [4, 5, 6], // key2 -&gt; BlockPos(4, 5, 6)\n  \"key3\": [7, 8, 9]  // key3 -&gt; BlockPos(7, 8, 9)\n}</code></pre> <p>Map objects decoded using a unbounded map codec are stored in an immutable map. If a mutable map is needed, a transformer should be applied to the map codec.</p> <p>Warning</p> <p>Unbounded maps only support keys that encode/decode to/from strings. A key-value pair list codec can be used to get around this restriction.</p>"},{"location":"en/datastorage/codecs/#pair","title":"Pair","text":"<p>A codec for pairs of objects can be generated from two codecs via <code>Codec#pair</code>.</p> <p>A pair codec decodes objects by first decoding the left object in the pair, then taking the remaining part of the encoded object and decodes the right object from that. As such, the codecs must either express something about the encoded object after decoding (such as records), or they have to be augmented into a <code>MapCodec</code> and transformed into a regular codec via <code>#codec</code>. This can typically done by making the codec a field of some object.</p> <pre><code>public static final Codec&lt;Pair&lt;Integer, String&gt;&gt; PAIR_CODEC = Codec.pair(\n  Codec.INT.fieldOf(\"left\").codec(),\n  Codec.STRING.fieldOf(\"right\").codec()\n);</code></pre> <pre><code>// Encoded Pair&lt;Integer, String&gt;\n{\n  \"left\": 5,       // fieldOf looks up 'left' key for left object\n  \"right\": \"value\" // fieldOf looks up 'right' key for right object\n}</code></pre> <p>Tip</p> <p>A map codec with a non-string key can be encoded/decoded using a list of key-value pairs applied with a transformer.</p>"},{"location":"en/datastorage/codecs/#either","title":"Either","text":"<p>A codec for two different methods of encoding/decoding some object data can be generated from two codecs via <code>Codec#either</code>.</p> <p>An either codec attempts to decode the object using the first codec. If it fails, it attempts to decode using the second codec. If that also fails, then the <code>DataResult</code> will only contain the error from the second codec failure.</p> <pre><code>public static final Codec&lt;Either&lt;Integer, String&gt;&gt; EITHER_CODEC = Codec.either(\n  Codec.INT,\n  Codec.STRING\n);</code></pre> <pre><code>// Encoded Either$Left&lt;Integer, String&gt;\n5\n\n// Encoded Either$Right&lt;Integer, String&gt;\n\"value\"</code></pre> <p>Tip</p> <p>This can be used in conjunction with a transformer to get a specific object from two different methods of encoding.</p>"},{"location":"en/datastorage/codecs/#dispatch","title":"Dispatch","text":"<p>Codecs can have subcodecs which can decode a particular object based upon some specified type via <code>Codec#dispatch</code>. This is typically used in registries which contain codecs, such as rule tests or block placers.</p> <p>A dispatch codec first attempts to get the encoded type from some string key (usually <code>type</code>). From there, the type is decoded, calling a getter for the specific codec used to decode the actual object. If the <code>DynamicOps</code> used to decode the object compresses its maps, or the object codec itself is not augmented into a <code>MapCodec</code> (such as records or fielded primitives), then the object needs to be stored within a <code>value</code> key. Otherwise, the object is decoded at the same level as the rest of the data.</p> <pre><code>// Define our object\npublic abstract class ExampleObject {\n\n  // Define the method used to specify the object type for encoding\n  public abstract Codec&lt;? extends ExampleObject&gt; type();\n}\n\n// Create simple object which stores a string\npublic class StringObject extends ExampleObject {\n\n  public StringObject(String s) { /* ... */ }\n\n  public String s() { /* ... */ }\n\n  public Codec&lt;? extends ExampleObject&gt; type() {\n    // A registered registry object\n    // \"string\":\n    //   Codec.STRING.xmap(StringObject::new, StringObject::s)\n    return STRING_OBJECT_CODEC.get();\n  }\n}\n\n// Create complex object which stores a string and integer\npublic class ComplexObject extends ExampleObject {\n\n  public ComplexObject(String s, int i) { /* ... */ }\n\n  public String s() { /* ... */ }\n\n  public int i() { /* ... */ }\n\n  public Codec&lt;? extends ExampleObject&gt; type() {\n    // A registered registry object\n    // \"complex\":\n    //   RecordCodecBuilder.create(instance -&gt;\n    //     instance.group(\n    //       Codec.STRING.fieldOf(\"s\").forGetter(ComplexObject::s),\n    //       Codec.INT.fieldOf(\"i\").forGetter(ComplexObject::i)\n    //     ).apply(instance, ComplexObject::new)\n    //   )\n    return COMPLEX_OBJECT_CODEC.get();\n  }\n}\n\n// Assume there is an IForgeRegistry&lt;Codec&lt;? extends ExampleObject&gt;&gt; DISPATCH\npublic static final Codec&lt;ExampleObject&gt; = DISPATCH.getCodec() // Gets Codec&lt;Codec&lt;? extends ExampleObject&gt;&gt;\n  .dispatch(\n    ExampleObject::type, // Get the codec from the specific object\n    Function.identity() // Get the codec from the registry\n  );</code></pre> <pre><code>// Simple object\n{\n  \"type\": \"string\", // For StringObject\n  \"value\": \"value\" // Codec type is not augmented from MapCodec, needs field\n}\n\n// Complex object\n{\n  \"type\": \"complex\", // For ComplexObject\n\n  // Codec type is augmented from MapCodec, can be inlined\n  \"s\": \"value\",\n  \"i\": 0\n}</code></pre>"},{"location":"en/datastorage/saveddata/","title":"Saved Data","text":"<p>The Saved Data (SD) system is an alternative to level capabilities that can attach data per level.</p>"},{"location":"en/datastorage/saveddata/#declaration","title":"Declaration","text":"<p>Each SD implementation must subtype the <code>SavedData</code> class. There are two important methods to be aware of:</p> <ul> <li><code>save</code>: Allows the implementation to write NBT data to the level.</li> <li><code>setDirty</code>: A method that must be called after changing the data, to notify the game that there are changes that need to be written. If not called, <code>#save</code> will not get called and the existing data will persist.</li> </ul>"},{"location":"en/datastorage/saveddata/#attaching-to-a-level","title":"Attaching to a Level","text":"<p>Any <code>SavedData</code> is loaded and/or attached to a level dynamically. As such, if one is never created on a level, then it will not exist.</p> <p><code>SavedData</code>s are created and loaded from the <code>DimensionDataStorage</code>, which can be accessed by either <code>ServerChunkCache#getDataStorage</code> or <code>ServerLevel#getDataStorage</code>. From there, you can get or create an instance of your SD by calling <code>DimensionDataStorage#computeIfAbsent</code>. This will attempt to get the current instance of the SD if present or create a new one and load all available data.</p> <p><code>DimensionDataStorage#computeIfAbsent</code> takes in three arguments: a function to load NBT data into a SD and return it, a supplier to construct a new instance of the SD, and the name of the <code>.dat</code> file stored within the <code>data</code> folder for the implemented level.</p> <p>For example, if a SD was named \u201cexample\u201d within the Nether, then a file would be created at <code>./&lt;level_folder&gt;/DIM-1/data/example.dat</code> and would be implemented like so:</p> <pre><code>// In some class\npublic ExampleSavedData create() {\n  return new ExampleSavedData();\n}\n\npublic ExampleSavedData load(CompoundTag tag) {\n  ExampleSavedData data = this.create();\n  // Load saved data\n  return data;\n}\n\n// In some method within the class\nnetherDataStorage.computeIfAbsent(this::load, this::create, \"example\");</code></pre> <p>To persist a SD across levels, a SD should be attached to the Overworld, which can be obtained from <code>MinecraftServer#overworld</code>. The Overworld is the only dimension that is never fully unloaded and as such makes it perfect to store multi-level data on.</p>"},{"location":"en/forgedev/","title":"Getting Started","text":"<p>If you have decided to contribute to Forge, you will have to take some special steps to get started with developing. A simple mod development environment will not suffice to work with Forge\u2019s codebase directly. Instead, you can use the following guide to help you with your setup and get you started with improving Forge!</p>"},{"location":"en/forgedev/#forking-and-cloning-the-repository","title":"Forking and Cloning the Repository","text":"<p>Like most major open source projects you will find, Forge is hosted on GitHub. If you have contributed to another project before, you will know this process already and can skip right ahead to the next section.</p> <p>For those who are beginners when it comes to collaboration via Git, here are two easy steps to get you started.</p> <p>Note</p> <p>This guide assumes that you already have a GitHub account set up. If you do not, visit their registration page to create an account. Furthermore, this guide is not a tutorial for git\u2019s usage. Please consult different sources first if you are struggling to get it working.</p>"},{"location":"en/forgedev/#forking","title":"Forking","text":"<p>First of all, you have to \u201cfork\u201d the MinecraftForge repository by clicking the \u201cFork\u201d button in the upper right hand corner. If you are in an organization, select the account you want your fork to be hosted on.</p> <p>Forking the repository is necessary since not every GitHub user can have free access to every repository. Instead, you create a copy of the original repository to later contribute your changes via a so called Pull Request, which you will learn more about later.</p>"},{"location":"en/forgedev/#cloning","title":"Cloning","text":"<p>After forking the repository, it is time to get local access to actually make some changes. For this, you need to clone the repository onto your local machine.</p> <p>Using your favorite git client, simply clone your fork into a directory of your choice. As general example, here is a command line snippet that should work on all correctly configured systems and clones the repository into a directory called \u201cMinecraftForge\u201d under the current directory (note that you have to replace <code>&lt;User&gt;</code> with your username):</p> <p><code>git clone https://github.com/&lt;User&gt;/MinecraftForge</code></p>"},{"location":"en/forgedev/#checking-out-the-correct-branch","title":"Checking out the Correct Branch","text":"<p>Forking and cloning the repository are the only mandatory steps to develop for Forge. However, to ease the process of creating Pull Requests for you, it is best to work with branches.</p> <p>It is recommended to create and check out a branch for each PR you plan to submit. This way, you can always keep around the latest changes of Forge for new PRs while you still work on older patches.</p> <p>After completing this step, you are ready to go and set up your development environment.</p>"},{"location":"en/forgedev/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>Depending on your favorite IDE, there is a different set of recommended steps you have to follow to successfully set up a development environment.</p>"},{"location":"en/forgedev/#eclipse","title":"Eclipse","text":"<p>Due to the way Eclipse workspaces work, ForgeGradle can do most of the work involved to get you started with a Forge workspace.</p> <ol> <li>Open a terminal/command prompt and navigate to the directory of your cloned fork.</li> <li>Type <code>./gradlew setup</code> and hit enter. Wait until ForgeGradle is done.</li> <li>Type <code>./gradlew genEclipseRuns</code> and hit enter. Once again, wait until ForgeGradle is done.</li> <li>Open your Eclipse workspace and go to <code>File -&gt; Import -&gt; General -&gt; Existing Gradle Project</code>.</li> <li>Browse to the repo directory for the \u201cProject root directory\u201d option in the dialog that opens.</li> <li>Complete the import by clicking the \u201cFinish\u201d button.</li> </ol> <p>That is all it takes to get you up and running with Eclipse. There is no extra steps required to get the test mods running. Simply hit \u201cRun\u201d like in any other project and select the appropriate run configuration.</p>"},{"location":"en/forgedev/#intellij-idea","title":"IntelliJ IDEA","text":"<p>JetBrains\u2019 flagship IDE comes with great integrated support for Gradle: Forge\u2019s build system of choice. Due to some peculiarities of Minecraft mod development, however, there are additional steps required to get everything to work properly.</p>"},{"location":"en/forgedev/#idea-2021-onwards","title":"IDEA 2021 onwards","text":"<ol> <li>Start IntelliJ IDEA 2021.<ul> <li>If you already have another project open, close the project with the File -&gt; Close project option.</li> </ul> </li> <li>In the projects tab of the \u201cWelcome to IntelliJ IDEA\u201d window, click the \u201cOpen\u201d button on the top right and select the MinecraftForge folder you cloned earlier.</li> <li>Click \u201cTrust Project\u201d if prompted.</li> <li>After IDEA is done importing the project and indexing its files, run the Gradle setup task. You can do this by:<ul> <li>Open the Gradle sidebar on the right hand side of your screen, then open the forge project tree, select Tasks, then other and double-click the <code>setup</code> task (may also appear as <code>MinecraftForge[Setup]</code>) found in Forge -&gt; Tasks -&gt; other -&gt; <code>setup</code>.</li> </ul> </li> <li>Generate the run configurations:<ul> <li>Open the Gradle sidebar on the right hand side of your screen, then open the forge project tree, select Tasks, then other and double-click the <code>genIntellijRuns</code> task (may also appear as <code>MinecraftForge[genIntellijRuns]</code>) found in Forge -&gt; Tasks -&gt; forgegradle runs -&gt; <code>genIntellijRuns</code>.</li> <li>If you get a licensing error during build before making any changes, running the <code>updateLicenses</code> task may help. This task is found in Forge -&gt; Tasks -&gt; other as well.</li> </ul> </li> </ol>"},{"location":"en/forgedev/#idea-2019-2020","title":"IDEA 2019-2020","text":"<p>There are a few minor differences between IDEA 2021 and these versions for setup.</p> <ol> <li>Import Forge\u2019s <code>build.gradle</code> as an IDEA project. For this, simply click <code>Import Project</code> from the <code>Welcome to IntelliJ IDEA</code> splash screen, then select the <code>build.gradle</code> file.</li> <li>After IDEA is done importing the project and indexing the files, run the Gradle setup task. Either:<ol> <li>Open the Gradle sidebar on the right hand side of your screen, then open the <code>forge</code> project tree, select <code>Tasks</code>, then <code>other</code> and double-click the <code>setup</code> task (may also appear as <code>MinecraftForge[Setup]</code>. Or alternatively:</li> <li>Tap the CTRL key twice, and type <code>gradle setup</code> in the <code>Run</code> command window that pops up.</li> </ol> </li> </ol> <p>You can then run Forge using the <code>forge_client</code> gradle task (<code>Tasks -&gt; fg_runs -&gt; forge_client</code>): right-click the task and select either <code>Run</code> or <code>Debug</code> as desired.</p> <p>You should now be able to work with your mod using the changes you introduce to the Forge and Vanilla codebase.</p>"},{"location":"en/forgedev/#making-changes-and-pull-requests","title":"Making Changes and Pull Requests","text":"<p>Once you have set up your development environment, it is time to make some changes to Forge\u2019s codebase. There are, however, some pitfalls you have to avoid when editing the project\u2019s code.</p> <p>The most important thing to note is that if you wish to edit Minecraft source code, you must only do so in the \u201cForge\u201d sub-project. Any changes in the \u201cClean\u201d project will mess with ForgeGradle and generating the patches. This can have disastrous consequences and might render your environment completely useless. If you wish to have a flawless experience, make sure you only edit code in the \u201cForge\u201d project!</p>"},{"location":"en/forgedev/#generating-patches","title":"Generating Patches","text":"<p>After you have made changes to the code base and tested them thoroughly, you may go ahead and generate patches. This is only necessary if you work on the Minecraft code base (i.e. in the \u201cForge\u201d project), but this step is vital for your changes to work elsewhere. Forge works by injecting only changed things into Vanilla Minecraft and hence needs those changes available in an appropriate format. Thankfully, ForgeGradle is capable of generating the changeset for you to commit it.</p> <p>To initiate the patch generation, simply run the <code>genPatches</code> Gradle task from your IDE or the command line. After its completion, you can commit all your changes (make sure you do not add any unnecessary files) and submit your Pull Request!</p>"},{"location":"en/forgedev/#pull-requests","title":"Pull Requests","text":"<p>The last step before your contribution is added to Forge is a Pull Request (PR in short). This is a formal request to incorporate your fork\u2019s changes into the live code base. Creating a PR is easy. Simply go to this GitHub page and follow the proposed steps. It is now that a good setup with branches pays off, since you are able to select precisely the changes you want to submit.</p> <p>Note</p> <p>Pull Requests are bound to rules; not every request will blindly be accepted. Follow this document to get further information and to ensure the best quality of your PR! If you want to maximize the chances of your PR getting accepted, follow these PR guidelines!</p>"},{"location":"en/forgedev/prguidelines/","title":"Pull Request Guidelines","text":"<p>Mods are built on top of Forge, but there are some things that Forge does not support, and that limits what mods can do. When modders run into something like that, they can make a change to Forge to support it, and submit that change as a Pull Request on Github.</p> <p>To make the best use of both your and the Forge team\u2019s time, it is recommended to follow some rough guidelines when preparing a Pull Request. The following points are the most important aspects to keep in mind when it comes to writing a good Pull Request.</p>"},{"location":"en/forgedev/prguidelines/#what-exactly-is-forge","title":"What Exactly is Forge?","text":"<p>At a high level, Forge is a mod compatibility layer on top of Minecraft.  Early mods edited Minecraft\u2019s code directly (like coremods do now), but they ran into conflicts with each other when they edited the same things. They also ran into issues when one mod changed behavior in ways that the other mods could not anticipate (like coremods do now), causing mysterious issues and lots of headaches.  </p> <p>By using something like Forge, mods can centralize common changes and avoid conflicts. Forge also includes supporting structures for common mod features like Capabilities, Registries, and others that allow mods to work together better.</p> <p>When writing a good Forge Pull Request, you also have to know what Forge is at a lower level.  There are two main types of code in Forge: Minecraft patches, and Forge code.</p>"},{"location":"en/forgedev/prguidelines/#patches","title":"Patches","text":"<p>Patches are applied as direct changes to Minecraft\u2019s source code, and aim to be as minimal as possible. Every time Minecraft code changes, all the Forge patches need to be looked over carefully and applied correctly to the new code. This means that large patches that change lots of things are difficult to maintain, so Forge aims to avoid those and keep patches as small as possible. In addition to making sure the code makes sense, reviews for patches will focus on minimizing the size.</p> <p>There are many strategies to make small patches, and reviews will often point out better methods to do things. Forge patches often insert a single line that fires an event or a code hook, which affects the code after it if the event meets some condition. This allows most of the code to exist outside of the patch, which keeps the patch small and simple.</p> <p>For more detailed information about creating patches, see the GitHub wiki.</p>"},{"location":"en/forgedev/prguidelines/#forge-code","title":"Forge Code","text":"<p>Aside from the patches, Forge code is just normal Java code. It can be event code, compatibility features, or anything else that is not directly editing Minecraft code. When Minecraft updates, Forge code has to update just like everything else. However, it is much easier because it is not directly entangled in the Minecraft code.</p> <p>Because this code stands on its own, there is no size restriction like there is with the patches.</p> <p>In addition to making sure the code makes sense, reviews will focus on making the code clean: with proper formatting and Java documentation.</p>"},{"location":"en/forgedev/prguidelines/#explain-yourself","title":"Explain Yourself","text":"<p>All Pull Requests need to answer the question: why is this necessary? Any code added to Forge needs to be maintained, and more code means more potential for bugs, so solid justification is needed for adding code.</p> <p>A common Pull Request issue is offering no explanation, or giving cryptic examples for how the Pull Request might theoretically be used. This only delays the Pull Request process. A clear explanation for the general case is good, but also give a concrete example of how your mod needs this Pull Request.</p> <p>Sometimes there is better way to do what you wanted, or a way to do it without a Pull Request at all. Code changes can not be accepted until those possibilities have been completely ruled out.</p>"},{"location":"en/forgedev/prguidelines/#show-that-it-works","title":"Show that it Works","text":"<p>The code you submit to Forge should work perfectly, and it is up to you to convince the reviewers that it does.  </p> <p>One of the best ways to do that is to add an example mod or JUnit test to Forge that makes use of your new code and shows it working.  </p> <p>To set up and run a Forge Environment with the example mods, see this guide.</p>"},{"location":"en/forgedev/prguidelines/#breaking-changes-in-forge","title":"Breaking Changes in Forge","text":"<p>Forge cannot make changes that break the mods that depend on it. This means that Pull Requests have to ensure that they do not break binary compatibility with previous Forge versions. A change that breaks binary compatibility is called a Breaking Change.</p> <p>There are some exceptions to this:</p> <ul> <li>Forge accepts Breaking Changes at the beginning of new Minecraft versions, where Minecraft itself already causes Breaking Changes for modders.  </li> <li>Sometimes an emergency breaking change is required outside of that time window, but it is rare and can cause dependency headaches for everyone in the modded Minecraft community.</li> </ul> <p>Outside of those exceptional times, Pull Requests with breaking changes are not accepted. They must be adapted to support the old behavior or wait for the next Minecraft version.</p>"},{"location":"en/forgedev/prguidelines/#be-patient-civil-and-empathetic","title":"Be Patient, Civil, and Empathetic","text":"<p>When submitting Pull Requests, you will often have to survive code review and make several changes before it is the best Pull Request possible. Keep in mind that code review is not judgement against you. Bugs in your code are not personal. Nobody is perfect, and that is why we are working together. </p> <p>Negativity will not help. Threatening to give up on your Pull Request and write a coremod instead will just make people upset and make the modded ecosystem worse. It is important that while working together you assume the best intentions of the people who are reviewing your Pull Request and not take things personally.</p>"},{"location":"en/forgedev/prguidelines/#review","title":"Review","text":"<p>If you do your best to understand the slow and perfectionistic nature of the Pull Request process, we will do our best to understand your point of view as well.</p> <p>After your Pull Request has been reviewed and cleaned up to the best of everyone\u2019s ability, it will be marked for a final review by Lex, who has the final say on what is included in the project or not.</p>"},{"location":"en/gameeffects/particles/","title":"Particles","text":"<p>Particles are an effect within the game used as polish to better improve immersion. Their usefulness also requires great caution because of their methods of creation and reference.</p>"},{"location":"en/gameeffects/particles/#creating-a-particle","title":"Creating a Particle","text":"<p>Particles are broken up between its client only implementation to display the particle and its common implementation to reference the particle or sync data from the server.</p> Class Side Description ParticleType BOTH The registry object of a particle\u2019s type definition used to reference the particle on either side ParticleOptions BOTH A data holder used to sync information from the network or a command to the associated client(s) ParticleProvider CLIENT A factory registered by the <code>ParticleType</code> used to construct a <code>Particle</code> from the associated <code>ParticleOptions</code>. Particle CLIENT The renderable logic to display on the associated client(s)"},{"location":"en/gameeffects/particles/#particletype","title":"ParticleType","text":"<p>A <code>ParticleType</code> is the registry object defining what a particular particle type is and provides an available reference to the specific particle on both sides. As such, every <code>ParticleType</code> must be registered.</p> <p>Each <code>ParticleType</code> takes in two parameters: an <code>overrideLimiter</code> which determines whether the particle renders regardless of distance, and a <code>ParticleOptions$Deserializer</code> which is used to read the sent <code>ParticleOptions</code> on the client. As the base <code>ParticleType</code> is abstract, a single method needs to be implemented: <code>#codec</code>. This represents how to encode and decode the associated <code>ParticleOptions</code> of the type.</p> <p>Note</p> <p><code>ParticleType#codec</code> is only used within the biome codec for vanilla implementations.</p> <p>In most cases, there is no need to have any particle data sent to the client. For these instances, it is easier to create a new instance of <code>SimpleParticleType</code>: an implementation of <code>ParticleType</code> and <code>ParticleOptions</code> which does not send any custom data to the client besides the type. Most vanilla implementations use <code>SimpleParticleType</code> besides redstone dust for coloring and block/item dependent particles.</p> <p>Important</p> <p>A <code>ParticleType</code> is not needed to make a particle spawn if only referenced on the client. However, it is necessary to use any of the prebuilt logic within <code>ParticleEngine</code> or spawn a particle from the server.</p>"},{"location":"en/gameeffects/particles/#particleoptions","title":"ParticleOptions","text":"<p>An <code>ParticleOptions</code> represents the data that each particle takes in. It is also used to send data from particles spawned via the server. All particle spawning methods take in a <code>ParticleOptions</code> such that it knows the type of the particle and the data associated with spawning one.</p> <p><code>ParticleOptions</code> is broken down into three methods:</p> Method Description getType Gets the type definition of the particle, or the <code>ParticleType</code> writeToNetwork Writes the particle data to a buffer on the server to send to the client writeToString Writes the particle data to a string <p>These objects are either constructed on the fly as needed, or they are singletons as a result of being a <code>SimpleParticleType</code>.</p>"},{"location":"en/gameeffects/particles/#particleoptionsdeserializer","title":"ParticleOptions$Deserializer","text":"<p>To receive the <code>ParticleOptions</code> on the client, or to reference the data within a command, the particle data must be deserialized via <code>ParticleOptions$Deserializer</code>. Each method within <code>ParticleOptions$Deserializer</code> has a parity encoding method within <code>ParticleOptions</code>:</p> Method ParticleOptions Encoder Description fromCommand writeToString Decodes a particle data from a string, usually from a command. fromNetwork writeToNetwork Decodes a particle data from a buffer on the client. <p>This object, when needing to send custom particle data, is passed into the constructor of the <code>ParticleType</code>.</p>"},{"location":"en/gameeffects/particles/#particle","title":"Particle","text":"<p>A <code>Particle</code> provides the rendering logic needed to draw said data onto the screen. To create any <code>Particle</code>, two methods must be implemented:</p> Method Description render Renders the particle onto the screen. getRenderType Gets the render type of the particle. <p>A common subclass of <code>Particle</code> to render textures is <code>TextureSheetParticle</code>. While <code>#getRenderType</code> needs to be implemented, whatever the texture sprite is set will be rendered at the particle\u2019s location.</p>"},{"location":"en/gameeffects/particles/#particlerendertype","title":"ParticleRenderType","text":"<p><code>ParticleRenderType</code> is a variation on <code>RenderType</code> which constructs the startup and teardown phase for every particle of that type and then renders them all at once via the <code>Tesselator</code>. There are six different render types a particle can be in.</p> Render Type Description TERRAIN_SHEET Renders a particle whose texture is located within the available blocks. PARTICLE_SHEET_OPAQUE Renders a particle whose texture is opaque and located within the available particles. PARTICLE_SHEET_TRANSLUCENT Renders a particle whose texture is translucent and located within the available particles. PARTICLE_SHEET_LIT Same as <code>PARTICLE_SHEET_OPAQUE</code> except without using the particle shader. CUSTOM Provides setup for blending and depth mask but provides no rendering functionality as that would be implemented within <code>Particle#render</code>. NO_RENDER The particle will never render. <p>Implementing a custom render type will be left as an exercise to the reader.</p>"},{"location":"en/gameeffects/particles/#particleprovider","title":"ParticleProvider","text":"<p>Finally, a particle is usually created via an <code>ParticleProvider</code>. A factory has a single method <code>#createParticle</code> which is used to create a particle given the particle data, client level, position, and movement delta. Since a <code>Particle</code> is not beholden to any particular <code>ParticleType</code>, it can be reused in different factories as necessary.</p> <p>An <code>ParticleProvider</code> must be registered by subscribing to the <code>RegisterParticleProvidersEvent</code> on the mod event bus. Within the event, the factory can be registered via <code>#registerSpecial</code> by supplying an instance of the factory to the method.</p> <p>Important</p> <p><code>RegisterParticleProvidersEvent</code> should only be called on the client and thus sided off in some isolated client class, referenced by either <code>DistExecutor</code> or <code>@EventBusSubscriber</code>.</p>"},{"location":"en/gameeffects/particles/#particledescription-spriteset-and-spriteparticleregistration","title":"ParticleDescription, SpriteSet, and SpriteParticleRegistration","text":"<p>There are three particle render types that cannot use the above method of registration: <code>PARTICLE_SHEET_OPAQUE</code>, <code>PARTICLE_SHEET_TRANSLUCENT</code>, and <code>PARTICLE_SHEET_LIT</code>. This is because all three of these particle render types use a sprite set that is loaded by the <code>ParticleEngine</code> directly. As such, the textures supplied must be obtained and registered through a different method. This will assume your particle is a subtype of <code>TextureSheetParticle</code> as that is the only vanilla implementation for this logic.</p> <p>To add a texture to a particle, a new JSON file must be added to <code>assets/&lt;modid&gt;/particles</code>. This is known as the <code>ParticleDescription</code>. The name of this file will represent the registry name of the <code>ParticleType</code> the factory is being attached to. Each particle JSON is an object. The object stores a single key <code>textures</code> which holds an array of <code>ResourceLocation</code>s. Any <code>&lt;modid&gt;:&lt;path&gt;</code> texture represented here will point to a texture at <code>assets/&lt;modid&gt;/textures/particle/&lt;path&gt;.png</code>.</p> <pre><code>{\n  \"textures\": [\n    // Will point to a texture located in\n    // assets/mymod/textures/particle/particle_texture.png\n    \"mymod:particle_texture\",\n    // Textures should by ordered by drawing order\n    // e.g. particle_texture will render first, then particle_texture2\n    //      after some time\n    \"mymod:particle_texture2\"\n  ]\n}</code></pre> <p>To reference a particle texture, the subtype of <code>TextureSheetParticle</code> should either take in an <code>SpriteSet</code> or a <code>TextureAtlasSprite</code> obtained from <code>SpriteSet</code>. <code>SpriteSet</code> holds a list of textures which refer to the sprites as defined by our <code>ParticleDescription</code>. <code>SpriteSet</code> has two methods, both of which grab a <code>TextureAtlasSprite</code> in different methods. The first method takes in two integers. The backing implementation allows the sprite to have a texture change as it ages. The second method takes in a <code>Random</code> instance to get a random texture from the sprite set. The sprite can be set within <code>TextureSheetParticle</code> by using one of the helper methods that takes in the <code>SpriteSet</code>: <code>#pickSprite</code> which uses the random method of picking a texture, and <code>#setSpriteFromAge</code> which uses the percentage method of two integers to pick the texture.</p> <p>To register these particle textures, a <code>SpriteParticleRegistration</code> needs to be supplied to the <code>RegisterParticleProvidersEvent#registerSpriteSet</code> method. This method takes in an <code>SpriteSet</code> holding the associated sprite set for the particle and creates an <code>ParticleProvider</code> to create the particle. The simplest method of implementation can be done by implementing <code>ParticleProvider</code> on some class and having the constructor take in an <code>SpriteSet</code>. Then the <code>SpriteSet</code> can be passed to the particle as normal.</p> <p>Note</p> <p>If you are registering a <code>TextureSheetParticle</code> subtype which only contains one texture, then you can supply a <code>ParticleProvider$Sprite</code> instead to the <code>#registerSprite</code> method, which has essentially the same functional interface method as <code>ParticleProvider</code>.</p>"},{"location":"en/gameeffects/particles/#spawning-a-particle","title":"Spawning a Particle","text":"<p>Particles can be spawned from either level instance. However, each side has a specific way to spawn a particle. If on the <code>ClientLevel</code>, <code>#addParticle</code> can be called to spawn a particle or <code>#addAlwaysVisibleParticle</code> can be called to spawn a particle that is visible from any distance. If on the <code>ServerLevel</code>, <code>#sendParticles</code> can be called to send a packet to the client to spawn the particle. Calling the two <code>ClientLevel</code> methods on the server will result in nothing.</p>"},{"location":"en/gameeffects/sounds/","title":"Sounds","text":""},{"location":"en/gameeffects/sounds/#terminology","title":"Terminology","text":"Term Description Sound Events Something that triggers a sound effect. Examples include <code>minecraft:block.anvil.hit</code> or <code>botania:spreader_fire</code>. Sound Category The category of the sound, for example <code>player</code>, <code>block</code> or simply <code>master</code>. The sliders in the sound settings GUI represent these categories. Sound File The literal file on disk that is played: an .ogg file."},{"location":"en/gameeffects/sounds/#soundsjson","title":"<code>sounds.json</code>","text":"<p>This JSON defines sound events, and defines which sound files they play, the subtitle, etc. Sound events are identified with <code>ResourceLocation</code>s. <code>sounds.json</code> should be located at the root of a resource namespace (<code>assets/&lt;namespace&gt;/sounds.json</code>), and it defines sound events in that namespace (<code>assets/&lt;namespace&gt;/sounds.json</code> defines sound events in the namespace <code>namespace</code>.).</p> <p>A full specification is available on the vanilla wiki, but this example highlights the important parts:</p> <pre><code>{\n  \"open_chest\": {\n    \"subtitle\": \"mymod.subtitle.open_chest\",\n    \"sounds\": [ \"mymod:open_chest_sound_file\" ]\n  },\n  \"epic_music\": {\n    \"sounds\": [\n      {\n        \"name\": \"mymod:music/epic_music\",\n        \"stream\": true\n      }\n    ]\n  }\n}</code></pre> <p>Underneath the top-level object, each key corresponds to a sound event. Note that the namespace is not given, as it is taken from the namespace of the JSON itself. Each event specifies a localization key to be shown when subtitles are enabled. Finally, the actual sound files to be played are specified. Note that the value is an array; if multiple sound files are specified, the game will randomly choose one to play whenever the sound event is triggered.</p> <p>The two examples represent two different ways to specify a sound file. The wiki has precise details, but generally, long sound files such as background music or music discs should use the second form, because the \u201cstream\u201d argument tells Minecraft to not load the entire sound file into memory but to stream it from disk. The second form can also specify the volume, pitch, and weight of a sound file.</p> <p>In all cases, the path to a sound file for namespace <code>namespace</code> and path <code>path</code> is <code>assets/&lt;namespace&gt;/sounds/&lt;path&gt;.ogg</code>. Therefore <code>mymod:open_chest_sound_file</code> points to <code>assets/mymod/sounds/open_chest_sound_file.ogg</code>, and <code>mymod:music/epic_music</code> points to <code>assets/mymod/sounds/music/epic_music.ogg</code>.</p> <p>A <code>sounds.json</code> can be data generated.</p>"},{"location":"en/gameeffects/sounds/#creating-sound-events","title":"Creating Sound Events","text":"<p>In order to reference sounds on the server, a <code>SoundEvent</code> holding a corresponding entry in <code>sounds.json</code> must be created. This <code>SoundEvent</code> must then be registered. Normally, the location used to create a sound event should be set as it\u2019s registry name.</p> <p>The <code>SoundEvent</code> acts as a reference to the sound and is passed around to play them. If a mod has an API, it should expose its <code>SoundEvent</code>s in the API.</p> <p>Note</p> <p>As long as a sound is registered within the <code>sounds.json</code>, it can still be referenced on the logical client regardless of whether there is a referencing <code>SoundEvent</code>.</p>"},{"location":"en/gameeffects/sounds/#playing-sounds","title":"Playing Sounds","text":"<p>Vanilla has lots of methods for playing sounds, and it is unclear which to use at times.</p> <p>Note that each takes a <code>SoundEvent</code>, the ones registered above. Additionally, the terms \u201cServer Behavior\u201d and \u201cClient Behavior\u201d refer to the respective logical side.</p>"},{"location":"en/gameeffects/sounds/#level","title":"<code>Level</code>","text":"<ol> <li> <p> <code>playSound(Player, BlockPos, SoundEvent, SoundSource, volume, pitch)</code></p> <ul> <li>Simply forwards to overload (2), adding 0.5 to each coordinate of the <code>BlockPos</code> given.</li> </ul> </li> <li> <p> <code>playSound(Player, double x, double y, double z, SoundEvent, SoundSource, volume, pitch)</code></p> <ul> <li>Client Behavior: If the passed in player is the client player, plays the sound event to the client player.</li> <li>Server Behavior: Plays the sound event to everyone nearby except the passed in player. Player can be <code>null</code>.</li> <li>Usage: The correspondence between the behaviors implies that these two methods are to be called from some player-initiated code that will be run on both logical sides at the same time: the logical client handles playing it to the user, and the logical server handles everyone else hearing it without re-playing it to the original user. They can also be used to play any sound in general at any position server-side by calling it on the logical server and passing in a <code>null</code> player, thus letting everyone hear it.</li> </ul> </li> <li> <p> <code>playLocalSound(double x, double y, double z, SoundEvent, SoundSource, volume, pitch, distanceDelay)</code></p> <ul> <li>Client Behavior: Just plays the sound event in the client level. If <code>distanceDelay</code> is <code>true</code>, then delays the sound based on how far it is from the player.</li> <li>Server Behavior: Does nothing.</li> <li>Usage: This method only works client-side, and thus is useful for sounds sent in custom packets, or other client-only effect-type sounds. Used for thunder.</li> </ul> </li> </ol>"},{"location":"en/gameeffects/sounds/#clientlevel","title":"<code>ClientLevel</code>","text":"<ol> <li> <code>playLocalSound(BlockPos, SoundEvent, SoundSource, volume, pitch, distanceDelay)</code><ul> <li>Simply forwards to <code>Level</code>\u2018s overload (3), adding 0.5 to each coordinate of the <code>BlockPos</code> given.</li> </ul> </li> </ol>"},{"location":"en/gameeffects/sounds/#entity","title":"<code>Entity</code>","text":"<ol> <li> <code>playSound(SoundEvent, volume, pitch)</code><ul> <li>Forwards to <code>Level</code>\u2018s overload (2), passing in <code>null</code> as the player.</li> <li>Client Behavior: Does nothing.</li> <li>Server Behavior: Plays the sound event to everyone at this entity\u2019s position.</li> <li>Usage: Emitting any sound from any non-player entity server-side.</li> </ul> </li> </ol>"},{"location":"en/gameeffects/sounds/#player","title":"<code>Player</code>","text":"<ol> <li> <code>playSound(SoundEvent, volume, pitch)</code> (overriding the one in <code>Entity</code>)<ul> <li>Forwards to <code>Level</code>\u2018s overload (2), passing in <code>this</code> as the player.</li> <li>Client Behavior: Does nothing, see override in <code>LocalPlayer</code>.</li> <li>Server Behavior: Plays the sound to everyone nearby except this player.</li> <li>Usage: See <code>LocalPlayer</code>.</li> </ul> </li> </ol>"},{"location":"en/gameeffects/sounds/#localplayer","title":"<code>LocalPlayer</code>","text":"<ol> <li> <code>playSound(SoundEvent, volume, pitch)</code> (overriding the one in <code>Player</code>)<ul> <li>Forwards to <code>Level</code>\u2018s overload (2), passing in <code>this</code> as the player.</li> <li>Client Behavior: Just plays the Sound Event.</li> <li>Server Behavior: Method is client-only.</li> <li>Usage: Just like the ones in <code>Level</code>, these two overrides in the player classes seem to be for code that runs together on both sides. The client handles playing the sound to the user, while the server handles everyone else hearing it without re-playing to the original user.</li> </ul> </li> </ol>"},{"location":"en/gettingstarted/","title":"Getting Started with Forge","text":"<p>If you have never made a Forge mod before, this section will provide the minimum amount of information needed to setup a Forge development environment. The rest of the documentation is about where to go from here.</p>"},{"location":"en/gettingstarted/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>An installation of the Java 17 Development Kit (JDK) and 64-bit Java Virtual Machine (JVM). Forge recommends and officially supports Eclipse Temurin.</p> <p>Warning</p> <p>Make sure you are using a 64-bit JVM. One way of checking is to run <code>java -version</code> in a terminal. Using a 32-bit JVM will cause some problems when using ForgeGradle.</p> </li> <li> <p>Familiarity with an Integrated Development Environment (IDE).</p> <ul> <li>It is recommended to use an IDE with Gradle integration.</li> </ul> </li> </ul>"},{"location":"en/gettingstarted/#from-zero-to-modding","title":"From Zero to Modding","text":"<ol> <li>Download the Mod Developer Kit (MDK) from the Forge file site by clicking \u2018Mdk\u2019 followed by the \u2018Skip\u2019 button in the top right after waiting for a period of time. It is recommended to download the latest version of Forge whenever possible.</li> <li> <p>Extract the downloaded MDK into an empty directory. This will be your mod\u2019s directory, which should now contain some gradle files and a <code>src</code> subdirectory containing the example mod.</p> <p>Note</p> <p>A number of files can be reused across different mods. These files are:</p> <ul> <li>the <code>gradle</code> subdirectory</li> <li><code>build.gradle</code></li> <li><code>gradlew</code></li> <li><code>gradlew.bat</code></li> <li><code>settings.gradle</code></li> </ul> <p>The <code>src</code> subdirectory does not need to be copied across workspaces; however, you may need to refresh the Gradle project if the java (<code>src/main/java</code>) and resource (<code>src/main/resources</code>) are created later.</p> </li> <li> <p>Open your selected IDE:</p> <ul> <li>Forge only explicitly supports development on Eclipse and IntelliJ IDEA, but there are additional run configurations for Visual Studio Code. Regardless, any environment, from Apache NetBeans to Vim / Emacs, can be used.</li> <li>Eclipse and IntelliJ IDEA\u2019s Gradle integration, both installed and enabled by default, will handle the rest of the initial workspace setup on import or open. This includes downloading the necessary packages from Mojang, MinecraftForge, etc. The \u2018Gradle for Java\u2019 plugin is needed for Visual Studio Code to do the same.</li> <li>Gradle will need to be invoked to re-evaluate the project for almost all changes to its associated files (e.g., <code>build.gradle</code>, <code>settings.gradle</code>, etc.). Some IDEs come with \u2018Refresh\u2019 buttons to do this; however, it can be done through the terminal via <code>gradlew</code>.</li> </ul> </li> <li>Generate run configurations for your selected IDE:<ul> <li>Eclipse: Run the <code>genEclipseRuns</code> task.</li> <li>IntelliJ IDEA: Run the <code>genIntellijRuns</code> task. If a \u201cmodule not specified\u201d error occurs, set the <code>ideaModule</code> property to your \u2018main\u2019 module (typically <code>${project.name}.main</code>).</li> <li>Visual Studio Code: Run the <code>getVSCodeRuns</code> task.</li> <li>Other IDEs: You can run the configurations directly using <code>gradle run*</code> (e.g., <code>runClient</code>, <code>runServer</code>, <code>runData</code>, <code>runGameTestServer</code>). These can also be used with the supported IDEs.</li> </ul> </li> </ol>"},{"location":"en/gettingstarted/#customizing-your-mod-information","title":"Customizing Your Mod Information","text":"<p>Edit the <code>build.gradle</code> file to customize how your mod is built (e.g., file name, artifact version, etc.).</p> <p>Important</p> <p>Do not edit the <code>settings.gradle</code> unless you know what you are doing. The file specifies the repository that ForgeGradle is uploaded to.</p>"},{"location":"en/gettingstarted/#recommended-buildgradle-customizations","title":"Recommended <code>build.gradle</code> Customizations","text":""},{"location":"en/gettingstarted/#mod-id-replacement","title":"Mod Id Replacement","text":"<p>Replace all occurrences of <code>examplemod</code>, including <code>mods.toml</code> and the main mod file with the mod id of your mod. This also includes changing the name of the file you build by setting <code>base.archivesName</code> (this is typically set to your mod id).</p> <pre><code>// In some build.gradle\nbase.archivesName = 'mymod'</code></pre> <p>Note</p> <p>The Forge MDK currently uses <code>archivesBaseName</code> to set the artifact name instead of <code>base.archivesName</code>. We recommend using <code>base.archivesName</code> instead as <code>archivesBaseName</code> is deprecated for removal in Gradle 9, which a future version of ForgeGradle will support.</p> <p>You can still use <code>archivesBaseName</code> by setting the following:</p> <pre><code>// In some build.gradle\nbase.archivesName = 'mymod'</code></pre>"},{"location":"en/gettingstarted/#group-id","title":"Group Id","text":"<p>The <code>group</code> property should be set to your top-level package, which should either be a domain you own or your email address:</p> Type Value Top-Level Package Domain example.com <code>com.example</code> Subdomain example.github.io <code>io.github.example</code> Email example@gmail.com <code>com.gmail.example</code> <pre><code>// In some build.gradle\ngroup = 'com.example'</code></pre> <p>The packages within your java source (<code>src/main/java</code>) should also now conform to this structure, with an inner package representing the mod id:</p> <pre><code>com\n- example (top-level package specified in group property)\n  - mymod (the mod id)\n    - MyMod.java (renamed ExampleMod.java)</code></pre>"},{"location":"en/gettingstarted/#version","title":"Version","text":"<p>Set the <code>version</code> property to the current version of your mod. We recommend using a variation of Maven versioning.</p> <pre><code>// In some build.gradle\nversion = '1.19.4-1.0.0.0'</code></pre>"},{"location":"en/gettingstarted/#additional-configurations","title":"Additional Configurations","text":"<p>Additional configurations can be found on the ForgeGradle docs.</p>"},{"location":"en/gettingstarted/#building-and-testing-your-mod","title":"Building and Testing Your Mod","text":"<ol> <li>To build your mod, run <code>gradlew build</code>. This will output a file in <code>build/libs</code> with the name <code>[archivesBaseName]-[version].jar</code>, by default. This file can be placed in the <code>mods</code> folder of a Forge-enabled Minecraft setup or distributed.</li> <li>To run your mod in a test environment, you can either use the generated run configurations or use the associated tasks (e.g. <code>gradlew runClient</code>). This will launch Minecraft from the run directory (default \u2018run\u2019) along with any source sets specified. The default MDK includes the <code>main</code> source set, so any code written in <code>src/main/java</code> will be applied.</li> <li>If you are running a dedicated server, whether through the run configuration or <code>gradlew runServer</code>, the server will initially shut down immediately. You will need to accept the Minecraft EULA by editing the <code>eula.txt</code> file in the run directory. Once accepted, the server will load, which can then be accessed via a direct connect to <code>localhost</code>.</li> </ol> <p>Note</p> <p>You should always test your mod in a dedicated server environment. This includes client-only mods as they should not do anything when loaded on the server.</p>"},{"location":"en/gettingstarted/modfiles/","title":"Mod Files","text":"<p>The mod files are responsible for determining what mods are packaged into your JAR, what information to display within the \u2018Mods\u2019 menu, and how your mod should be loaded in the game.</p>"},{"location":"en/gettingstarted/modfiles/#modstoml","title":"mods.toml","text":"<p>The <code>mods.toml</code> file defines the metadata of your mod(s). It also contains additional information that is displayed within the \u2018Mods\u2019 menu and how your mod(s) should be loaded into the game.</p> <p>The file uses the Tom\u2019s Obvious Minimal Language, or TOML, format. The file must be stored under the <code>META-INF</code> folder in the resource directory of the source set you are using (<code>src/main/resources/META-INF/mods.toml</code> for the <code>main</code> source set). A <code>mods.toml</code> file may look something like this:</p> <pre><code>modLoader=\"javafml\"\nloaderVersion=\"[45,)\"\n\nlicense=\"All Rights Reserved\"\nissueTrackerURL=\"https://github.com/MinecraftForge/MinecraftForge/issues\"\nshowAsResourcePack=false\n\n[[mods]]\n  modId=\"examplemod\"\n  version=\"1.0.0.0\"\n  displayName=\"Example Mod\"\n  updateJSONURL=\"https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json\"\n  displayURL=\"https://minecraftforge.net\"\n  logoFile=\"logo.png\"\n  credits=\"I'd like to thank my mother and father.\"\n  authors=\"Author\"\n  description='''\n  Lets you craft dirt into diamonds. This is a traditional mod that has existed for eons. It is ancient. The holy Notch created it. Jeb rainbowfied it. Dinnerbone made it upside down. Etc.\n  '''\n  displayTest=\"MATCH_VERSION\"\n\n[[dependencies.examplemod]]\n  modId=\"forge\"\n  mandatory=true\n  versionRange=\"[45,)\"\n  ordering=\"NONE\"\n  side=\"BOTH\"\n\n[[dependencies.examplemod]]\n  modId=\"minecraft\"\n  mandatory=true\n  versionRange=\"[1.19.4]\"\n  ordering=\"NONE\"\n  side=\"BOTH\"</code></pre> <p><code>mods.toml</code> is broken into three parts: the non-mod-specific properties, which are linked to the mod file; the mod properties, with a section for each mod; and the dependency configurations, with a section for each mod\u2019s or mods\u2019 dependencies. Each of the properties associated with the <code>mods.toml</code> file will be explained below, where <code>required</code> means that a value must be specified or an exception will be thrown.</p>"},{"location":"en/gettingstarted/modfiles/#non-mod-specific-properties","title":"Non-Mod-Specific Properties","text":"<p>Non-mod-specific properties are properties associated with the JAR itself, indicating how to load the mod(s) and any additional global metadata.</p> Property Type Default Description Example <code>modLoader</code> string mandatory The language loader used by the mod(s). Can be used to support alternative language structures, such as Kotlin objects for the main file, or different methods of determining the entrypoint, such as an interface or method. Forge provides the Java loader <code>\"javafml\"</code> and low/no code loader <code>\"lowcodefml\"</code>. <code>\"javafml\"</code> <code>loaderVersion</code> string mandatory The acceptable version range of the language loader, expressed as a Maven Version Range. For <code>javafml</code> and <code>lowcodefml</code>, the version is the major version of the Forge version. <code>\"[45,)\"</code> <code>license</code> string mandatory The license the mod(s) in this JAR are provided under. It is suggested that this is set to the SPDX identifier you are using and/or a link to the license. You can visit https://choosealicense.com/ to help pick the license you want to use. <code>\"MIT\"</code> <code>showAsResourcePack</code> boolean <code>false</code> When <code>true</code>, the mod(s)\u2019s resources will be displayed as a separate resource pack on the \u2018Resource Packs\u2019 menu, rather than being combined with the \u2018Mod resources\u2019 pack. <code>true</code> <code>services</code> array <code>[]</code> An array of services your mod uses. This is consumed as part of the created module for the mod from Forge\u2019s implementation of the Java Platform Module System. <code>[\"net.minecraftforge.forgespi.language.IModLanguageProvider\"]</code> <code>properties</code> table <code>{}</code> A table of substitution properties. This is used by <code>StringSubstitutor</code> to replace <code>${file.&lt;key&gt;}</code> with its corresponding value. This is currently only used to replace the <code>version</code> in the mod-specific properties. <code>{ \"example\" = \"1.2.3\" }</code> referenced by <code>${file.example}</code> <code>issueTrackerURL</code> string nothing A URL representing the place to report and track issues with the mod(s). <code>\"https://forums.minecraftforge.net/\"</code> <p>Important</p> <p>The <code>services</code> property is functionally equivalent to specifying the <code>uses</code> directive in a module, which allows loading a service of a given type.</p>"},{"location":"en/gettingstarted/modfiles/#mod-specific-properties","title":"Mod-Specific Properties","text":"<p>Mod-specific properties are tied to the specified mod using the <code>[[mods]]</code> header. This is an array of tables; all key/value properties will be attached to that mod until the next header.</p> <pre><code># Properties for examplemod1\n[[mods]]\nmodId = \"examplemod1\"\n\n# Properties for examplemod2\n[[mods]]\nmodId = \"examplemod2\"</code></pre> Property Type Default Description Example <code>modId</code> string mandatory The unique identifier representing this mod. The id must match <code>^[a-z][a-z0-9_]{1,63}$</code> (a string 2-64 characters; starts with a lowercase letter; made up of lowercase letters, numbers, or underscores). <code>\"examplemod\"</code> <code>namespace</code> string value of <code>modId</code> An override namespace for the mod. The namespace much match <code>^[a-z][a-z0-9_.-]{1,63}$</code> (a string 2-64 characters; starts with a lowercase letter; made up of lowercase letters, numbers, underscores, dots, or dashes). Currently unused. <code>\"example\"</code> <code>version</code> string <code>\"1\"</code> The version of the mod, preferably in a variation of Maven versioning. When set to <code>${file.jarVersion}</code>, it will be replaced with the value of the <code>Implementation-Version</code> property in the JAR\u2019s manifest (displays as <code>0.0NONE</code> in a development environment). <code>\"1.19.4-1.0.0.0\"</code> <code>displayName</code> string value of <code>modId</code> The pretty name of the mod. Used when representing the mod on a screen (e.g., mod list, mod mismatch). <code>\"Example Mod\"</code> <code>description</code> string <code>\"MISSING DESCRIPTION\"</code> The description of the mod shown in the mod list screen. It is recommended to use a multiline literal string. <code>\"This is an example.\"</code> <code>logoFile</code> string nothing The name and extension of an image file used on the mods list screen. The logo must be in the root of the JAR or directly in the root of the source set (e.g., <code>src/main/resources</code> for the main source set). <code>\"example_logo.png\"</code> <code>logoBlur</code> boolean <code>true</code> Whether to use <code>GL_LINEAR*</code> (true) or <code>GL_NEAREST*</code> (false) to render the <code>logoFile</code>. <code>false</code> <code>updateJSONURL</code> string nothing A URL to a JSON used by the update checker to make sure the mod you are playing is the latest version. <code>\"https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json\"</code> <code>features</code> table <code>{}</code> See \u2018features\u2019. <code>{ java_version = \"17\" }</code> <code>modproperties</code> table <code>{}</code> A table of key/values associated with this mod. Currently unused by Forge, but is mainly for use by mods. <code>{ example = \"value\" }</code> <code>modUrl</code> string nothing A URL to the download page of the mod. Currently unused. <code>\"https://files.minecraftforge.net/\"</code> <code>credits</code> string nothing Credits and acknowledges for the mod shown on the mod list screen. <code>\"The person over here and there.\"</code> <code>authors</code> string nothing The authors of the mod shown on the mod list screen. <code>\"Example Person\"</code> <code>displayURL</code> string nothing A URL to the display page of the mod shown on the mod list screen. <code>\"https://minecraftforge.net/\"</code> <code>displayTest</code> string <code>\"MATCH_VERSION\"</code> See \u2018sides\u2019. <code>\"NONE\"</code>"},{"location":"en/gettingstarted/modfiles/#features","title":"Features","text":"<p>The features system allows mods to demand that certain settings, software, or hardware are available when loading the system. When a feature is not satisfied, mod loading will fail, informing the user about the requirement. Currently, Forge provides the following features:</p> Feature Description Example <code>java_version</code> The acceptable version range of the Java version, expressed as a Maven Version Range. This should be the supported version used by Minecraft. <code>\"[17,)\"</code>"},{"location":"en/gettingstarted/modfiles/#dependency-configurations","title":"Dependency Configurations","text":"<p>Mods can specify their dependencies, which are checked by Forge before loading the mods. These configurations are created using the array of tables <code>[[dependencies.&lt;modid&gt;]]</code> where <code>modid</code> is the identifier of the mod the dependency is for.</p> Property Type Default Description Example <code>modId</code> string mandatory The identifier of the mod added as a dependency. <code>\"example_library\"</code> <code>mandatory</code> boolean mandatory Whether the game should crash when this dependency is not met. <code>true</code> <code>versionRange</code> string <code>\"\"</code> The acceptable version range of the language loader, expressed as a Maven Version Range. An empty string matches any version. <code>\"[1, 2)\"</code> <code>ordering</code> string <code>\"NONE\"</code> Defines if the mod must load before (<code>\"BEFORE\"</code>) or after (<code>\"AFTER\"</code>) this dependency. If the ordering does not matter, return <code>\"NONE\"</code> <code>\"AFTER\"</code> <code>side</code> string <code>\"BOTH\"</code> The physical side the dependency must be present on: <code>\"CLIENT\"</code>, <code>\"SERVER\"</code>, or <code>\"BOTH\"</code>. <code>\"CLIENT\"</code> <code>referralUrl</code> string nothing A URL to the download page of the dependency. Currently unused. <code>\"https://library.example.com/\"</code> <p>Warning</p> <p>The <code>ordering</code> of two mods may cause a crash due to a cyclic dependency: for example, mod A must load <code>\"BEFORE\"</code> mod B and mod B <code>\"BEFORE\"</code> mod A.</p>"},{"location":"en/gettingstarted/modfiles/#mod-entrypoints","title":"Mod Entrypoints","text":"<p>Now that the <code>mods.toml</code> is filled out, we need to provide an entrypoint to being programming the mod. Entrypoints are essentially the starting point for executing the mod. The entrypoint itself is determined by the language loader used in the <code>mods.toml</code>.</p>"},{"location":"en/gettingstarted/modfiles/#javafml-and-mod","title":"<code>javafml</code> and <code>@Mod</code>","text":"<p><code>javafml</code> is a language loader provided by Forge for the Java programming language. The entrypoint is defined using a public class with the <code>@Mod</code> annotation. The value of <code>@Mod</code> must contain one of the mod ids specified within the <code>mods.toml</code>. From there, all initialization logic (e.g., registering events, adding <code>DeferredRegister</code>s) can be specified within the constructor of the class. The mod bus can be obtained from <code>FMLJavaModLoadingContext</code>.</p> <pre><code>@Mod(\"examplemod\") // Must match mods.toml\npublic class Example {\n\n  public Example() {\n    // Initialize logic here\n    var modBus = FMLJavaModLoadingContext.get().getModEventBus();\n\n    // ...\n  }\n}</code></pre>"},{"location":"en/gettingstarted/modfiles/#lowcodefml","title":"<code>lowcodefml</code>","text":"<p><code>lowcodefml</code> is a language loader used as a way to distribute datapacks and resource packs as mods without the need of an in-code entrypoint. It is specified as <code>lowcodefml</code> rather than <code>nocodefml</code> for minor additions in the future that might require minimal coding.</p>"},{"location":"en/gettingstarted/structuring/","title":"Structuring Your Mod","text":"<p>Structured mods are beneficial for maintenance, making contributions, and providing a clearer understanding of the underlying codebase. Some of the recommendations from Java, Minecraft, and Forge are listed below.</p> <p>Note</p> <p>You do not have to follow the advice below; you can structure your mod any way you see fit. However, it is still highly recommended to do so.</p>"},{"location":"en/gettingstarted/structuring/#packaging","title":"Packaging","text":"<p>When structuring your mod, pick a unique, top-level package structure. Many programmers will use the same name for different classes, interfaces, etc. Java allows classes to have the same name as long as they are in different packages. As such, if two classes have the same package with the same name, only one would be loaded, most likely causing the game to crash.</p> <pre><code>a.jar\n  - com.example.ExampleClass\nb.jar\n  - com.example.ExampleClass // This class will not normally be loaded</code></pre> <p>This is even more relevant when it comes to loading modules. If there are class files in two packages under the same name in separate modules, this will cause the mod loader to crash on startup since mod modules are exported to the game and other mods.</p> <pre><code>module A\n  - package X\n    - class I\n    - class J\nmodule B\n  - package X // This package will cause the mod loader to crash, as there already is a module with package X being exported\n    - class R\n    - class S\n    - class T</code></pre> <p>As such, your top level package should be something that you own: a domain, email address, a subdomain of where your website, etc. It can even be your name or username as long as you can guarantee that it will be uniquely identifiable within the expected target.</p> Type Value Top-Level Package Domain example.com <code>com.example</code> Subdomain example.github.io <code>io.github.example</code> Email example@gmail.com <code>com.gmail.example</code> <p>The next level package should then be your mod\u2019s id (e.g. <code>com.example.examplemod</code> where <code>examplemod</code> is the mod id). This will guarantee that, unless you have two mods with the same id (which should never be the case), your packages should not have any issues loading.</p> <p>You can find some additional naming conventions on Oracle\u2019s tutorial page.</p>"},{"location":"en/gettingstarted/structuring/#sub-package-organization","title":"Sub-package Organization","text":"<p>In addition to the top-level package, it is highly recommend to break your mod\u2019s classes between subpackages. There are two major methods on how to do so:</p> <ul> <li>Group By Function: Make subpackages for classes with a common purpose. For example, blocks can be under <code>block</code> or <code>blocks</code>, entities under <code>entity</code> or <code>entities</code>, etc. Mojang uses this structure with the singular version of the word.</li> <li>Group By Logic: Make subpackages for classes with a common logic. For example, if you were creating a new type of crafting table, you would put its block, menu, item, and more under <code>feature.crafting_table</code>.</li> </ul>"},{"location":"en/gettingstarted/structuring/#client-server-and-data-packages","title":"Client, Server, and Data Packages","text":"<p>In general, code only for a given side or runtime should be isolated from the other classes in a separate subpackage. For example, code related to data generation should go in a <code>data</code> package while code only on the dedicated server should go in a <code>server</code> package.</p> <p>However, it is highly recommended that client-only code should be isolated in a <code>client</code> subpackage. This is because dedicated servers have no access to any of the client-only packages in Minecraft. As such, having a dedicated package would provide a decent sanity check to verify you are not reaching across sides within your mod.</p>"},{"location":"en/gettingstarted/structuring/#class-naming-schemes","title":"Class Naming Schemes","text":"<p>A common class naming scheme makes it easier to decipher the purpose of the class or to easily locate specific classes.</p> <p>Classes are commonly suffixed with its type, for example:</p> <ul> <li>An <code>Item</code> called <code>PowerRing</code> -&gt; <code>PowerRingItem</code>.</li> <li>A <code>Block</code> called <code>NotDirt</code> -&gt; <code>NotDirtBlock</code>.</li> <li>A menu for an <code>Oven</code> -&gt; <code>OvenMenu</code>.</li> </ul> <p>Note</p> <p>Mojang typically follows a similar structure for all classes except entities. Those are represented by just their names (e.g. <code>Pig</code>, <code>Zombie</code>, etc.).</p>"},{"location":"en/gettingstarted/structuring/#choose-one-method-from-many","title":"Choose One Method from Many","text":"<p>There are many methods for performing a certain task: registering an object, listening for events, etc. It\u2019s generally recommended to be consistent by using a single method to accomplish a given task. While this does improve code formatting, it also avoid any weird interactions or redundancies that may occur (e.g. your event listener executing twice).</p>"},{"location":"en/gettingstarted/versioning/","title":"Versioning","text":"<p>In general projects, semantic versioning is often used (which has the format <code>MAJOR.MINOR.PATCH</code>). However, in the case of modding it may be more beneficial to use the format <code>MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH</code> to be able to differentiate between world-breaking and API-breaking changes of a mod.</p> <p>Important</p> <p>Forge uses Maven version ranges to compare version strings, which is not fully compatible with the Semantic Versioning 2.0.0 spec, such as the \u2018prerelease\u2019 tag.</p>"},{"location":"en/gettingstarted/versioning/#examples","title":"Examples","text":"<p>Here is a list of examples that can increment the various variables.</p> <ul> <li><code>MCVERSION</code></li> <li>Always matches the Minecraft version the mod is for.</li> <li><code>MAJORMOD</code></li> <li>Removing items, blocks, block entities, etc.</li> <li>Changing or removing previously existing mechanics.</li> <li>Updating to a new Minecraft version.</li> <li><code>MAJORAPI</code></li> <li>Changing the order or variables of enums.</li> <li>Changing return types of methods.</li> <li>Removing public methods altogether.</li> <li><code>MINOR</code></li> <li>Adding items, blocks, block entities, etc.</li> <li>Adding new mechanics.</li> <li>Deprecating public methods. (This is not a <code>MAJORAPI</code> increment since it doesn\u2019t break an API.)</li> <li><code>PATCH</code></li> <li>Bugfixes.</li> </ul> <p>When incrementing any variable, all lesser variables should reset to <code>0</code>. For instance, if <code>MINOR</code> would increment, <code>PATCH</code> would become <code>0</code>. If <code>MAJORMOD</code> would increment, all other variables would become <code>0</code>.</p>"},{"location":"en/gettingstarted/versioning/#work-in-progress","title":"Work In Progress","text":"<p>If you are in the initial development stage of your mod (before any official releases), the <code>MAJORMOD</code> and <code>MAJORAPI</code> should always be <code>0</code>. Only <code>MINOR</code> and <code>PATCH</code> should be updated every time you build your mod. Once you build an official release (most of the time with a stable API), you should increment <code>MAJORMOD</code> to version <code>1.0.0.0</code>. For any further development stages, refer to the Prereleases and Release candidates section of this document.</p>"},{"location":"en/gettingstarted/versioning/#multiple-minecraft-versions","title":"Multiple Minecraft Versions","text":"<p>If the mod upgrades to a new version of Minecraft, and the old version will only receive bug fixes, the <code>PATCH</code> variable should be updated based on the version before the upgrade. If the mod is still in active development in both the old and the new version of Minecraft, it is advised to append the version to both build numbers. For example, if the mod is upgraded to version <code>3.0.0.0</code> due to a Minecraft version change, the old mod should also be updated to <code>3.0.0.0</code>. The old version will become, for example, version <code>1.7.10-3.0.0.0</code>, while the new version will become <code>1.8-3.0.0.0</code>. If there are no changes at all when building for a newer Minecraft version, all variables except for the Minecraft version should stay the same.</p>"},{"location":"en/gettingstarted/versioning/#final-release","title":"Final Release","text":"<p>When dropping support for a Minecraft version, the last build for that version should get the <code>-final</code> suffix. This denotes that the mod will no longer be supported for the denoted <code>MCVERSION</code> and that players should upgrade to a newer version of the mod to continue receiving updates and bug fixes.</p>"},{"location":"en/gettingstarted/versioning/#pre-releases","title":"Pre-releases","text":"<p>It is also possible to prerelease work-in-progress features, which means new features are released that are not quite done yet. These can be seen as a sort of \u201cbeta\u201d. These versions should be appended with <code>-betaX</code>, where <code>X</code> is the number of the prerelease. (This guide does not use <code>-pre</code> since, at the time of writing, it is not a valid alias for <code>-beta</code>.) Note that already released versions and versions before the initial release can not go into prerelease; variables (mostly <code>MINOR</code>, but <code>MAJORAPI</code> and <code>MAJORMOD</code> can also prerelease) should be updated accordingly before adding the <code>-beta</code> suffix. Versions before the initial release are simply work-in-progress builds.</p>"},{"location":"en/gettingstarted/versioning/#release-candidates","title":"Release Candidates","text":"<p>Release candidates act as prereleases before an actual version change. These versions should be appended with <code>-rcX</code>, where <code>X</code> is the number of the release candidate which should, in theory, only be increased for bugfixes. Already released versions can not receive release candidates; variables (mostly <code>MINOR</code>, but <code>MAJORAPI</code> and <code>MAJORMOD</code> can also prerelease)  should be updated accordingly before adding the <code>-rc</code> suffix. When releasing a release candidate as stable build, it can either be exactly the same as the last release candidate or have a few more bug fixes.</p>"},{"location":"en/gui/menus/","title":"Menus","text":"<p>Menus are one type of backend for Graphical User Interfaces, or GUIs; they handle the logic involved in interacting with some represented data holder. Menus themselves are not data holders. They are views which allow to user to indirectly modify the internal data holder state. As such, a data holder should not be directly coupled to any menu, instead passing in the data references to invoke and modify.</p>"},{"location":"en/gui/menus/#menutype","title":"<code>MenuType</code>","text":"<p>Menus are created and removed dynamically and as such are not registry objects. As such, another factory object is registered instead to easily create and refer to the type of the menu. For a menu, these are <code>MenuType</code>s.</p> <p><code>MenuType</code>s must be registered.</p>"},{"location":"en/gui/menus/#menusupplier","title":"<code>MenuSupplier</code>","text":"<p>A <code>MenuType</code> is created by passing in a <code>MenuSupplier</code> and a <code>FeatureFlagSet</code> to its constructor. A <code>MenuSupplier</code> represents a function which takes in the id of the container and the inventory of the player viewing the menu, and returns a newly created <code>AbstractContainerMenu</code>.</p> <pre><code>// For some DeferredRegister&lt;MenuType&lt;?&gt;&gt; REGISTER\npublic static final RegistryObject&lt;MenuType&lt;MyMenu&gt;&gt; MY_MENU = REGISTER.register(\"my_menu\", () -&gt; new MenuType(MyMenu::new, FeatureFlags.DEFAULT_FLAGS));\n\n// In MyMenu, an AbstractContainerMenu subclass\npublic MyMenu(int containerId, Inventory playerInv) {\n  super(MY_MENU.get(), containerId);\n  // ...\n}</code></pre> <p>Note</p> <p>The container identifier is unique for an individual player. This means that the same container id on two different players will represent two different menus, even if they are viewing the same data holder.</p> <p>The <code>MenuSupplier</code> is usually responsible for creating a menu on the client with dummy data references used to store and interact with the synced information from the server data holder.</p>"},{"location":"en/gui/menus/#icontainerfactory","title":"<code>IContainerFactory</code>","text":"<p>If additional information is needed on the client (e.g. the position of the data holder in the world), then the subclass <code>IContainerFactory</code> can be used instead. In addition to the container id and the player inventory, this also provides a <code>FriendlyByteBuf</code> which can store additional information that was sent from the server. A <code>MenuType</code> can be created using an <code>IContainerFactory</code> via <code>IForgeMenuType#create</code>.</p> <pre><code>// For some DeferredRegister&lt;MenuType&lt;?&gt;&gt; REGISTER\npublic static final RegistryObject&lt;MenuType&lt;MyMenuExtra&gt;&gt; MY_MENU_EXTRA = REGISTER.register(\"my_menu_extra\", () -&gt; IForgeMenuType.create(MyMenu::new));\n\n// In MyMenuExtra, an AbstractContainerMenu subclass\npublic MyMenuExtra(int containerId, Inventory playerInv, FriendlyByteBuf extraData) {\n  super(MY_MENU_EXTRA.get(), containerId);\n  // Store extra data from buffer\n  // ...\n}</code></pre>"},{"location":"en/gui/menus/#abstractcontainermenu","title":"<code>AbstractContainerMenu</code>","text":"<p>All menus are extended from <code>AbstractContainerMenu</code>. A menu takes in two parameters, the <code>MenuType</code>, which represents the type of the menu itself, and the container id, which represents the unique identifier of the menu for the current accessor.</p> <p>Important</p> <p>The player can only have 100 unique menus open at once.</p> <p>Each menu should contain two constructors: one used to initialize the menu on the server and one used to initialize the menu on the client. The constructor used to initialize the menu on the client is the one supplied to the <code>MenuType</code>. Any fields that the server menu constructor contains should have some default for the client menu constructor.</p> <pre><code>// Client menu constructor\npublic MyMenu(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory);\n}\n\n// Server menu constructor\npublic MyMenu(int containerId, Inventory playerInventory) {\n  // ...\n}</code></pre> <p>Each menu implementation must implement two methods: <code>#stillValid</code> and <code>#quickMoveStack</code>.</p>"},{"location":"en/gui/menus/#stillvalid-and-containerlevelaccess","title":"<code>#stillValid</code> and <code>ContainerLevelAccess</code>","text":"<p><code>#stillValid</code> determines whether the menu should remain open for a given player. This is typically directed to the static <code>#stillValid</code> which takes in a <code>ContainerLevelAccess</code>, the player, and the <code>Block</code> this menu is attached to. The client menu must always return <code>true</code> for this method, which the static <code>#stillValid</code> does default to. This implementation checks whether the player is within eight blocks of where the data storage object is located.</p> <p>A <code>ContainerLevelAccess</code> supplies the current level and location of the block within an enclosed scope. When constructing the menu on the server, a new access can be created by calling <code>ContainerLevelAccess#create</code>. The client menu constructor can pass in <code>ContainerLevelAccess#NULL</code>, which will do nothing.</p> <pre><code>// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, ContainerLevelAccess.NULL);\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, ContainerLevelAccess access) {\n  // ...\n}\n\n// Assume this menu is attached to RegistryObject&lt;Block&gt; MY_BLOCK\n@Override\npublic boolean stillValid(Player player) {\n  return AbstractContainerMenu.stillValid(this.access, player, MY_BLOCK.get());\n}</code></pre>"},{"location":"en/gui/menus/#data-synchronization","title":"Data Synchronization","text":"<p>Some data needs to be present on both the server and the client to display to the player. To do this, the menu implements a basic layer of data synchronization such that whenever the current data does not match the data last synced to the client. For players, this is checked every tick.</p> <p>Minecraft supports two forms of data synchronization by default: <code>ItemStack</code>s via <code>Slot</code>s and integers via <code>DataSlot</code>s. <code>Slot</code>s and <code>DataSlot</code>s are views which hold references to data storages that can be be modified by the player in a screen, assuming the action is valid. These can be added to a menu within the constructor through <code>#addSlot</code> and <code>#addDataSlot</code>.</p> <p>Note</p> <p>Since <code>Container</code>s used by <code>Slot</code>s are deprecated by Forge in favor of using the <code>IItemHandler</code> capability, the rest of the explanation will revolve around using the capability variant: <code>SlotItemHandler</code>.</p> <p>A <code>SlotItemHandler</code> contains four parameters: the <code>IItemHandler</code> representing the inventory the stacks are within, the index of the stack this slot is specifically representing, and the x and y position of where the top-left position of the slot will render on the screen relative to <code>AbstractContainerScreen#leftPos</code> and <code>#topPos</code>. The client menu constructor should always supply an empty instance of an inventory of the same size.</p> <p>In most cases, any slots the menu contains is first added, followed by the player\u2019s inventory, and finally concluded with the player\u2019s hotbar. To access any individual <code>Slot</code> from the menu, the index must be calculated based upon the order of which slots were added.</p> <p>A <code>DataSlot</code> is an abstract class which should implement a getter and setter to reference the data stored in the data storage object. The client menu constructor should always supply a new instance via <code>DataSlot#standalone</code>.</p> <p>These, along with slots, should be recreated every time a new menu is initialized.</p> <p>Warning</p> <p>Although a <code>DataSlot</code> stores an integer, it is effectively limited to a short (-32768 to 32767) because of how it sends the value across the network. The 16 high-order bits of the integer are ignored.</p> <pre><code>// Assume we have an inventory from a data object of size 5\n// Assume we have a DataSlot constructed on each initialization of the server menu\n\n// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, new ItemStackHandler(5), DataSlot.standalone());\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, IItemHandler dataInventory, DataSlot dataSingle) {\n  // Check if the data inventory size is some fixed value\n  // Then, add slots for data inventory\n  this.addSlot(new SlotItemHandler(dataInventory, /*...*/));\n\n  // Add slots for player inventory\n  this.addSlot(new Slot(playerInventory, /*...*/));\n\n  // Add data slots for handled integers\n  this.addDataSlot(dataSingle);\n\n  // ...\n}</code></pre>"},{"location":"en/gui/menus/#containerdata","title":"<code>ContainerData</code>","text":"<p>If multiple integers need to be synced to the client, a <code>ContainerData</code> can be used to reference the integers instead. This interface functions as an index lookup such that each index represents a different integer. <code>ContainerData</code>s can also be constructed in the data object itself if the <code>ContainerData</code> is added to the menu through <code>#addDataSlots</code>. The method creates a new <code>DataSlot</code> for the amount of data specified by the interface. The client menu constructor should always supply a new instance via <code>SimpleContainerData</code>.</p> <pre><code>// Assume we have a ContainerData of size 3\n\n// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, new SimpleContainerData(3));\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, ContainerData dataMultiple) {\n  // Check if the ContainerData size is some fixed value\n  checkContainerDataCount(dataMultiple, 3);\n\n  // Add data slots for handled integers\n  this.addDataSlots(dataMultiple);\n\n  // ...\n}</code></pre> <p>Warning</p> <p>As <code>ContainerData</code> delegates to <code>DataSlot</code>s, these are also limited to a short (-32768 to 32767).</p>"},{"location":"en/gui/menus/#quickmovestack","title":"<code>#quickMoveStack</code>","text":"<p><code>#quickMoveStack</code> is the second method that must be implemented by any menu. This method is called whenever a stack has been shift-clicked, or quick moved, out of its current slot until the stack has been fully moved out of its previous slot or there is no other place for the stack to go. The method returns a copy of the stack in the slot being quick moved.</p> <p>Stacks are typically moved between slots using <code>#moveItemStackTo</code>, which moves the stack into the first available slot. It takes in the stack to be moved, the first slot index (inclusive) to try and move the stack to, the last slot index (exclusive), and whether to check the slots from first to last (when <code>false</code>) or from last to first (when <code>true</code>).</p> <p>Across Minecraft implementations, this method is fairly consistent in its logic:</p> <pre><code>// Assume we have a data inventory of size 5\n// The inventory has 4 inputs (index 1 - 4) which outputs to a result slot (index 0)\n// We also have the 27 player inventory slots and the 9 hotbar slots\n// As such, the actual slots are indexed like so:\n//   - Data Inventory: Result (0), Inputs (1 - 4)\n//   - Player Inventory (5 - 31)\n//   - Player Hotbar (32 - 40)\n@Override\npublic ItemStack quickMoveStack(Player player, int quickMovedSlotIndex) {\n  // The quick moved slot stack\n  ItemStack quickMovedStack = ItemStack.EMPTY;\n  // The quick moved slot\n  Slot quickMovedSlot = this.slots.get(quickMovedSlotIndex) \n\n   // If the slot is in the valid range and the slot is not empty\n  if (quickMovedSlot != null &amp;&amp; quickMovedSlot.hasItem()) {\n    // Get the raw stack to move\n    ItemStack rawStack = quickMovedSlot.getItem(); \n    // Set the slot stack to a copy of the raw stack\n    quickMovedStack = rawStack.copy();\n\n    /*\n    The following quick move logic can be simplified to if in data inventory,\n    try to move to player inventory/hotbar and vice versa for containers\n    that cannot transform data (e.g. chests).\n    */\n\n    // If the quick move was performed on the data inventory result slot\n    if (quickMovedSlotIndex == 0) {\n      // Try to move the result slot into the player inventory/hotbar\n      if (!this.moveItemStackTo(rawStack, 5, 41, true)) {\n        // If cannot move, no longer quick move\n        return ItemStack.EMPTY;\n      }\n\n      // Perform logic on result slot quick move\n      slot.onQuickCraft(rawStack, quickMovedStack);\n    }\n    // Else if the quick move was performed on the player inventory or hotbar slot\n    else if (quickMovedSlotIndex &gt;= 5 &amp;&amp; quickMovedSlotIndex &lt; 41) {\n      // Try to move the inventory/hotbar slot into the data inventory input slots\n      if (!this.moveItemStackTo(rawStack, 1, 5, false)) {\n        // If cannot move and in player inventory slot, try to move to hotbar\n        if (quickMovedSlotIndex &lt; 32) {\n          if (!this.moveItemStackTo(rawStack, 32, 41, false)) {\n            // If cannot move, no longer quick move\n            return ItemStack.EMPTY;\n          }\n        }\n        // Else try to move hotbar into player inventory slot\n        else if (!this.moveItemStackTo(rawStack, 5, 32, false)) {\n          // If cannot move, no longer quick move\n          return ItemStack.EMPTY;\n        }\n      }\n    }\n    // Else if the quick move was performed on the data inventory input slots, try to move to player inventory/hotbar\n    else if (!this.moveItemStackTo(rawStack, 5, 41, false)) {\n      // If cannot move, no longer quick move\n      return ItemStack.EMPTY;\n    }\n\n    if (rawStack.isEmpty()) {\n      // If the raw stack has completely moved out of the slot, set the slot to the empty stack\n      quickMovedSlot.set(ItemStack.EMPTY);\n    } else {\n      // Otherwise, notify the slot that that the stack count has changed\n      quickMovedSlot.setChanged();\n    }\n\n    /*\n    The following if statement and Slot#onTake call can be removed if the\n    menu does not represent a container that can transform stacks (e.g.\n    chests).\n    */\n    if (rawStack.getCount() == quickMovedStack.getCount()) {\n      // If the raw stack was not able to be moved to another slot, no longer quick move\n      return ItemStack.EMPTY;\n    }\n    // Execute logic on what to do post move with the remaining stack\n    quickMovedSlot.onTake(player, rawStack);\n  }\n\n  return quickMovedStack; // Return the slot stack\n}</code></pre>"},{"location":"en/gui/menus/#opening-a-menu","title":"Opening a Menu","text":"<p>Once a menu type has been registered, the menu itself has been finished, and a screen has been attached, a menu can then be opened by the player. Menus can be opened by calling <code>NetworkHooks#openScreen</code> on the logical server. The method takes in the player opening the menu, the <code>MenuProvider</code> of the server side menu, and optionally a <code>FriendlyByteBuf</code> if extra data needs to be synced to the client.</p> <p>Note</p> <p><code>NetworkHooks#openScreen</code> with the <code>FriendlyByteBuf</code> parameter should only be used if a menu type was created using an <code>IContainerFactory</code>.</p>"},{"location":"en/gui/menus/#menuprovider","title":"<code>MenuProvider</code>","text":"<p>A <code>MenuProvider</code> is an interface that contains two methods: <code>#createMenu</code>, which creates the server instance of the menu, and <code>#getDisplayName</code>, which returns a component containing the title of the menu to pass to the screen. The <code>#createMenu</code> method contains three parameter: the container id of the menu, the inventory of the player who opened the menu, and the player who opened the menu.</p> <p>A <code>MenuProvider</code> can easily be created using <code>SimpleMenuProvider</code>, which takes in a method reference to create the server menu and the title of the menu.</p> <pre><code>// In some implementation\nNetworkHooks.openScreen(serverPlayer, new SimpleMenuProvider(\n  (containerId, playerInventory, player) -&gt; new MyMenu(containerId, playerInventory),\n  Component.translatable(\"menu.title.examplemod.mymenu\")\n));</code></pre>"},{"location":"en/gui/menus/#common-implementations","title":"Common Implementations","text":"<p>Menus are typically opened on a player interaction of some kind (e.g. when a block or entity is right-clicked).</p>"},{"location":"en/gui/menus/#block-implementation","title":"Block Implementation","text":"<p>Blocks typically implement a menu by overriding <code>BlockBehaviour#use</code>. If on the logical client, the interaction returns <code>InteractionResult#SUCCESS</code>. Otherwise, it opens the menu and returns <code>InteractionResult#CONSUME</code>.</p> <p>The <code>MenuProvider</code> should be implemented by overriding <code>BlockBehaviour#getMenuProvider</code>. Vanilla methods use this to view the menu in spectator mode.</p> <pre><code>// In some Block subclass\n@Override\npublic MenuProvider getMenuProvider(BlockState state, Level level, BlockPos pos) {\n  return new SimpleMenuProvider(/* ... */);\n}\n\n@Override\npublic InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult result) {\n  if (!level.isClientSide &amp;&amp; player instanceof ServerPlayer serverPlayer) {\n    NetworkHooks.openScreen(serverPlayer, state.getMenuProvider(level, pos));\n  }\n  return InteractionResult.sidedSuccess(level.isClientSide);\n}</code></pre> <p>Note</p> <p>This is the simplest way to implement the logic, not the only way. If you want the block to only open the menu under certain conditions, then some data will need to be synced to the client beforehand to return <code>InteractionResult#PASS</code> or <code>#FAIL</code> if the conditions are not met.</p>"},{"location":"en/gui/menus/#mob-implementation","title":"Mob Implementation","text":"<p>Mobs typically implement a menu by overriding <code>Mob#mobInteract</code>. This is done similarly to the block implementation with the only difference being that the <code>Mob</code> itself should implement <code>MenuProvider</code> to support spectator mode viewing.</p> <pre><code>public class MyMob extends Mob implements MenuProvider {\n  // ...\n\n  @Override\n  public InteractionResult mobInteract(Player player, InteractionHand hand) {\n    if (!this.level.isClientSide &amp;&amp; player instanceof ServerPlayer serverPlayer) {\n      NetworkHooks.openScreen(serverPlayer, this);\n    }\n    return InteractionResult.sidedSuccess(this.level.isClientSide);\n  }\n}</code></pre> <p>Note</p> <p>Once again, this is the simplest way to implement the logic, not the only way.</p>"},{"location":"en/gui/screens/","title":"Screens","text":"<p>Screens are typically the base of all Graphical User Interfaces (GUIs) in Minecraft: taking in user input, verifying it on the server, and syncing the resulting action back to the client. They can be combined with menus to create an communication network for inventory-like views, or they can be standalone which modders can handle through their own network implementations.</p> <p>Screens are made up of numerous parts, making it difficult to fully understand what a \u2018screen\u2019 actually is in Minecraft. As such, this document will go over each of the screen\u2019s components and how it is applied before discussing the screen itself.</p>"},{"location":"en/gui/screens/#relative-coordinates","title":"Relative Coordinates","text":"<p>Whenever anything is rendered, there needs to be some identifier which specifies where it will appear. With numerous abstractions, most of Minecraft\u2019s rendering calls takes in an x, y, and z value in a coordinate plane. X values increase from left to right, y from top to bottom, and z from far to near. However, the coordinates are not fixed to a specified range. They can change depending on the size of the screen and the scale at which is specified within the options. As such, extra care must be taken to make sure the values of the coordinates while rendering scale properly to the changeable screen size.</p> <p>Information on how to relativize your coordinates will be within the screen section.</p> <p>Important</p> <p>If you choose to use fixed coordinates or incorrectly scale the screen, the rendered objects may look strange or misplaced. An easy way to check if you relativized your coordinates correctly is to click the \u2018Gui Scale\u2019 button in your video settings. This value is used as the divisor to the width and height of your display when determining the scale at which a GUI should render.</p>"},{"location":"en/gui/screens/#gui-components","title":"Gui Components","text":"<p>Any GUI rendered by Minecraft is an instance of a <code>GuiComponent</code>. <code>GuiComponent</code>s contain the most basic methods used to render the most commonly used objects. These fall into three categories: colored rectangles, strings, and textures. There is also an additional method for rendering a snippet of a component (<code>#enableScissor</code> / <code>#disableScissor</code>). All methods take in a <code>PoseStack</code> which applies the transformations necessary to properly render where the component should be rendered. Additionally, colors are in the ARGB format.</p>"},{"location":"en/gui/screens/#colored-rectangles","title":"Colored Rectangles","text":"<p>Colored rectangles are drawn through a position color shader. There are three types of colored rectangles that can be drawn.</p> <p>First, there is a colored horizontal and vertical one-pixel wide line, <code>#hLine</code> and <code>#vLine</code> respectively. <code>#hLine</code> takes in two x coordinates defining the left and right (inclusively), the top y coordinate, and the color. <code>#vLine</code> takes in the left x coordinate, two y coordinates defining the top and bottom (inclusively), and the color.</p> <p>Second, there is the <code>#fill</code> method, which draws a rectangle to the screen. The line methods internally call this method. This takes in the left x coordinate, the top y coordinate, the right x coordinate, the bottom y coordinate, and the color.</p> <p>Finally, there is the <code>#fillGradient</code> method, which draws a rectangle with a vertical gradient. This takes in the right x coordinate, the bottom y coordinate, the left x coordinate, the top y coordinate, the z coordinate, and the bottom and top colors.</p>"},{"location":"en/gui/screens/#strings","title":"Strings","text":"<p>Strings are drawn through its <code>Font</code>, typically consisting of their own shaders for normal, see through, and offset mode. There are two alignment of strings that can be rendered, each with a back shadow: a left-aligned string (<code>#drawString</code>) and a center-aligned string (<code>#drawCenteredString</code>). These both take in the font the string will be rendered in, the string to draw, the x coordinate representing the left or center of the string respectively, the top y coordinate, and the color.</p> <p>Note</p> <p>Strings should typically be passed in as <code>Component</code>s as they handle a variety of usecases, including the two other overloads of the method.</p>"},{"location":"en/gui/screens/#textures","title":"Textures","text":"<p>Textures are drawn through blitting, hence the method name <code>#blit</code>, which, for this purpose, copies the bits of an image and draws them directly to the screen. These are drawn through a position texture shader. While there are many different <code>#blit</code> overloads, we will only discuss two static <code>#blit</code>s.</p> <p>The first static <code>#blit</code> takes in six integers and assumes the texture being rendered is on a 256 x 256 PNG file. It takes in the left x and top y screen coordinate, the left x and top y coordinate within the PNG, and the width and height of the image to render.</p> <p>Note</p> <p>The size of the PNG file must be specified so that the coordinates can be normalized to obtain the associated UV values.</p> <p>The static <code>#blit</code> which the first calls expands this to nine integers, only assuming the image is on a PNG file. It takes in the left x and top y screen coordinate, the z coordinate (referred to as the blit offset), the left x and top y coordinate within the PNG, the width and height of the image to render, and the width and height of the PNG file.</p>"},{"location":"en/gui/screens/#blit-offset","title":"Blit Offset","text":"<p>The z coordinate when rendering a texture is typically set to the blit offset. The offset is responsible for properly layering renders when viewing a screen. Renders with a smaller z coordinate are rendered in the background and vice versa where renders with a larger z coordinate are rendered in the foreground. The z offset can be set directly on the <code>PoseStack</code> itself via <code>#translate</code>.</p> <p>Important</p> <p>When setting the blit offset, you must reset it after rendering your object. Otherwise, other objects within the screen may be rendered in an incorrect layer causing graphical issues. It is recommended to push the current pose before translating and then popping after all rendering at the offset is completed.</p>"},{"location":"en/gui/screens/#renderable","title":"Renderable","text":"<p><code>Renderable</code>s are essentially objects that are rendered. These include screens, buttons, chat boxes, lists, etc. <code>Renderable</code>s only have one method: <code>#render</code>. This takes in the <code>PoseStack</code> holding any prior transformations to properly render the renderable, the x and y positions of the mouse scaled to the relative screen size, and the tick delta (how many ticks have passed since the last frame).</p> <p>Some common renderables are screens and \u2018widgets\u2019: interactable elements which typically render on the screen such as <code>Button</code>, its subtype <code>ImageButton</code>, and <code>EditBox</code> which is used to input text on the screen.</p>"},{"location":"en/gui/screens/#guieventlistener","title":"GuiEventListener","text":"<p>Any screen rendered in Minecraft implements <code>GuiEventListener</code>. <code>GuiEventListener</code>s are responsible for handling user interaction with the screen. These include inputs from the mouse (movement, clicked, released, dragged, scrolled, mouseover) and keyboard (pressed, released, typed). Each method returns whether the associated action affected the screen successfully. Widgets like buttons, chat boxes, lists, etc. also implement this interface.</p>"},{"location":"en/gui/screens/#containereventhandler","title":"ContainerEventHandler","text":"<p>Almost synonymous with <code>GuiEventListener</code>s are their subtype: <code>ContainerEventHandler</code>s. These are responsible for handling user interaction on screens which contain widgets, managing which is currently focused and how the associated interactions are applied. <code>ContainerEventHandler</code>s add three additional features: interactable children, dragging, and focusing.</p> <p>Event handlers hold children which are used to determine the interaction order of elements. During the mouse event handlers (excluding dragging), the first child in the list that the mouse hovers over has their logic executed.</p> <p>Dragging an element with the mouse, implemented via <code>#mouseClicked</code> and <code>#mouseReleased</code>, provides more precisely executed logic.</p> <p>Focusing allows for a specific child to be checked first and handled during an event\u2019s execution, such as during keyboard events or dragging the mouse. Focus is typically set through <code>#setFocused</code>. In addition, interactable children can be cycled using <code>#nextFocusPath</code>, selecting the child based upon the <code>FocusNavigationEvent</code> passed in.</p> <p>Note</p> <p>Screens implement <code>ContainerEventHandler</code> and <code>GuiComponent</code> through <code>AbstractContainerEventHandler</code>, which adds in the setter and getter logic for dragging and focusing children.</p>"},{"location":"en/gui/screens/#narratableentry","title":"NarratableEntry","text":"<p><code>NarratableEntry</code>s are elements which can be spoken about through Minecraft\u2019s accessibility narration feature. Each element can provide different narration depending on what is hovered or selected, prioritized typically by focus, hovering, and then all other cases.</p> <p><code>NarratableEntry</code>s have three methods: one which determines the priority of the element (<code>#narrationPriority</code>), one which determines whether to speak the narration (<code>#isActive</code>), and finally one which supplies the narration to its associated output, spoken or read (<code>#updateNarration</code>). </p> <p>Note</p> <p>All widgets from Minecraft are <code>NarratableEntry</code>s, so it typically does not need to be manually implemented if using an available subtype.</p>"},{"location":"en/gui/screens/#the-screen-subtype","title":"The Screen Subtype","text":"<p>With all of the above knowledge, a basic screen can be constructed. To make it easier to understand, the components of a screen will be mentioned in the order they are typically encountered.</p> <p>First, all screens take in a <code>Component</code> which represents the title of the screen. This component is typically drawn to the screen by one of its subtypes. It is only used in the base screen for the narration message.</p> <pre><code>// In some Screen subclass\npublic MyScreen(Component title) {\n    super(title);\n}</code></pre>"},{"location":"en/gui/screens/#initialization","title":"Initialization","text":"<p>Once a screen has been initialized, the <code>#init</code> method is called. The <code>#init</code> method sets the initial settings inside the screen from the <code>ItemRenderer</code> and <code>Minecraft</code> instance to the relative width and height as scaled by the game. Any setup such as adding widgets or precomputing relative coordinates should be done in this method. If the game window is resized, the screen will be reinitialized by calling the <code>#init</code> method.</p> <p>There are three ways to add a widget to a screen, each serving a separate purpose:</p> Method Description <code>#addWidget</code> Adds a widget that is interactable and narrated, but not rendered. <code>#addRenderableOnly</code> Adds a widget that will only be rendered; it is not interactable or narrated. <code>#addRenderableWidget</code> Adds a widget that is interactable, narrated, and rendered. <p>Typically, <code>#addRenderableWidget</code> will be used most often.</p> <pre><code>// In some Screen subclass\n@Override\nprotected void init() {\n    super.init();\n\n    // Add widgets and precomputed values\n    this.addRenderableWidget(new EditBox(/* ... */));\n}</code></pre>"},{"location":"en/gui/screens/#ticking-screens","title":"Ticking Screens","text":"<p>Screens also tick using the <code>#tick</code> method to perform some level of client side logic for rendering purposes. The most common example is the <code>EditBox</code> for the blinking cursor.</p> <pre><code>// In some Screen subclass\n@Override\npublic void tick() {\n    super.tick();\n\n    // Add ticking logic for EditBox in editBox\n    this.editBox.tick();\n}</code></pre>"},{"location":"en/gui/screens/#input-handling","title":"Input Handling","text":"<p>Since screens are subtypes of <code>GuiEventListener</code>s, the input handlers can also be overridden, such as for handling logic on a specific key press.</p>"},{"location":"en/gui/screens/#rendering-the-screen","title":"Rendering the Screen","text":"<p>Finally, screens are rendered through the <code>#render</code> method provided by being a <code>Renderable</code> subtype. As mentioned, the <code>#render</code> method draws the everything the screen has to render every frame, such as the background, widgets, tooltips, etc. By default, the <code>#render</code> method only renders the widgets to the screen.</p> <p>The two most common things rendered within a screen that is typically not handled by a subtype is the background and the tooltips.</p> <p>The background can be rendered using <code>#renderBackground</code>, with one method taking in a v Offset for the options background whenever a screen is rendered when the level behind it cannot be.</p> <p>Tooltips are rendered through <code>#renderTooltip</code> or <code>#renderComponentTooltip</code> which can take in the text components being rendered, an optional custom tooltip component, and the x / y relative coordinates on where the tooltip should be rendered on the screen.</p> <pre><code>// In some Screen subclass\n\n// mouseX and mouseY indicate the scaled coordinates of where the cursor is in on the screen\n@Override\npublic void render(PoseStack pose, int mouseX, int mouseY, float partialTick) {\n    // Background is typically rendered first\n    this.renderBackground(pose);\n\n    // Render things here before widgets (background textures)\n\n    // Then the widgets if this is a direct child of the Screen\n    super.render(pose, mouseX, mouseY, partialTick);\n\n    // Render things after widgets (tooltips)\n}</code></pre>"},{"location":"en/gui/screens/#closing-the-screen","title":"Closing the Screen","text":"<p>When a screen is closed, two methods handle the teardown: <code>#onClose</code> and <code>#removed</code>.</p> <p><code>#onClose</code> is called whenever the user makes an input to close the current screen. This method is typically used as a callback to destroy and save any internal processes in the screen itself. This includes sending packets to the server.</p> <p><code>#removed</code> is called just before the screen changes and is released to the garbage collector. This handles anything that hasn\u2019t been reset back to its initial state before the screen was opened.</p> <pre><code>// In some Screen subclass\n\n@Override\npublic void onClose() {\n    // Stop any handlers here\n\n    // Call last in case it interferes with the override\n    super.onClose();\n}\n\n@Override\npublic void removed() {\n    // Reset initial states here\n\n    // Call last in case it interferes with the override\n    super.removed()\n;}</code></pre>"},{"location":"en/gui/screens/#abstractcontainerscreen","title":"<code>AbstractContainerScreen</code>","text":"<p>If a screen is directly attached to a menu, then an <code>AbstractContainerScreen</code> should be subclassed instead. An <code>AbstractContainerScreen</code> acts as the renderer and input handler of a menu and contains logic for syncing and interacting with slots. As such, only two methods typically need to be overridden or implemented to have a working container screen. Once again, to make it easier to understand, the components of a container screen will be mentioned in the order they are typically encountered.</p> <p>An <code>AbstractContainerScreen</code> typically requires three parameters: the container menu being opened (represented by the generic <code>T</code>), the player inventory (only for the display name), and the title of the screen itself. Within here, a number of positioning fields can be set:</p> Field Description <code>imageWidth</code> The width of the texture used for the background. This is typically inside a PNG of 256 x 256 and defaults to 176. <code>imageHeight</code> The width of the texture used for the background. This is typically inside a PNG of 256 x 256 and defaults to 166. <code>titleLabelX</code> The relative x coordinate of where the screen title will be rendered. <code>titleLabelY</code> The relative y coordinate of where the screen title will be rendered. <code>inventoryLabelX</code> The relative x coordinate of where the player inventory name will be rendered. <code>inventoryLabelY</code> The relative y coordinate of where the player inventory name will be rendered. <p>Important</p> <p>In a previous section, it mentioned that precomputed relative coordinates should be set in the <code>#init</code> method. This still remains true, as the values mentioned here are not precomputed coordinates but static values and relativized coordinates.</p> <p>The image values are static and non changing as they represent the background texture size. To make things easier when rendering, two additional values (<code>leftPos</code> and <code>topPos</code>) are precomputed in the <code>#init</code> method which marks the top left corner of where the background will be rendered. The label coordinates are relative to these values.</p> <p>The <code>leftPos</code> and <code>topPos</code> is also used as a convenient way to render the background as they already represent the position to pass into the <code>#blit</code> method.</p> <pre><code>// In some AbstractContainerScreen subclass\npublic MyContainerScreen(MyMenu menu, Inventory playerInventory, Component title) {\n    super(menu, playerInventory, title);\n\n    this.titleLabelX = 10;\n    this.inventoryLabelX = 10;\n\n    /*\n     * If the 'imageHeight' is changed, 'inventoryLabelY' must also be\n     * changed as the value depends on the 'imageHeight' value.\n     */\n}</code></pre>"},{"location":"en/gui/screens/#menu-access","title":"Menu Access","text":"<p>As the menu is passed into the screen, any values that were within the menu and synced (either through slots, data slots, or a custom system) can now be accessed through the <code>menu</code> field.</p>"},{"location":"en/gui/screens/#container-tick","title":"Container Tick","text":"<p>Container screens tick within the <code>#tick</code> method when the player is alive and looking at the screen via <code>#containerTick</code>. This essentially takes the place of <code>#tick</code> within container screens, with its most common usage being to tick the recipe book.</p> <pre><code>// In some AbstractContainerScreen subclass\n@Override\nprotected void containerTick() {\n    super.containerTick();\n\n    // Tick things here\n}</code></pre>"},{"location":"en/gui/screens/#rendering-the-container-screen","title":"Rendering the Container Screen","text":"<p>The container screen is rendered across three methods: <code>#renderBg</code>, which renders the background textures, <code>#renderLabels</code>, which renders any text on top of the background, and <code>#render</code> which encompass the previous two methods in addition to providing a grayed out background and tooltips.</p> <p>Starting with <code>#render</code>, the most common override (and typically the only case) adds the background, calls the super to render the container screen, and finally renders the tooltips on top of it.</p> <pre><code>// In some AbstractContainerScreen subclass\n@Override\npublic void render(PoseStack pose, int mouseX, int mouseY, float partialTick) {\n    this.renderBackground(pose);\n    super.render(pose, mouseX, mouseY, partialTick);\n\n    /*\n     * This method is added by the container screen to render\n     * a tooltip for whatever slot is hovered over.\n     */\n    this.renderTooltip(pose, mouseX, mouseY);\n}</code></pre> <p>Within the super, <code>#renderBg</code> is called to render the background of the screen. The most standard representation uses three method calls: two for setup and one to draw the background texture.</p> <pre><code>// In some AbstractContainerScreen subclass\n\n// The location of the background texture (assets/&lt;namespace&gt;/&lt;path&gt;)\nprivate static final ResourceLocation BACKGROUND_LOCATION = new ResourceLocation(MOD_ID, \"textures/gui/container/my_container_screen.png\");\n\n@Override\nprotected void renderBg(PoseStack pose, float partialTick, int mouseX, int mouseY) {\n    /*\n     * Sets the texture location for the shader to use. While up to\n     * 12 textures can be set, the shader used within 'blit' only\n     * looks at the first texture index.\n     */\n    RenderSystem.setShaderTexture(0, BACKGROUND_LOCATION);\n\n    /*\n     * Renders the background texture to the screen. 'leftPos' and\n     * 'topPos' should already represent the top left corner of where\n     * the texture should be rendered as it was precomputed from the\n     * 'imageWidth' and 'imageHeight'. The two zeros represent the\n     * integer u/v coordinates inside the 256 x 256 PNG file.\n     */\n    GuiComponent.blit(pose, this.leftPos, this.topPos, 0, 0, this.imageWidth, this.imageHeight);\n}</code></pre> <p>Finally, <code>#renderLabels</code> is called to render any text above the background, but below the tooltips. This simply calls uses the font to draw the associated components.</p> <pre><code>// In some AbstractContainerScreen subclass\n@Override\nprotected void renderLabels(PoseStack pose, int mouseX, int mouseY) {\n    super.renderLabels(pose, mouseX, mouseY);\n\n    // Assume we have some Component 'label'\n    // 'label' is drawn at 'labelX' and 'labelY'\n    this.font.draw(pose, label, labelX, labelY, 0x404040);\n}</code></pre> <p>Note</p> <p>When rendering the label, you do not need to specify the <code>leftPos</code> and <code>topPos</code> offset. Those have already been translated within the <code>PoseStack</code> so everything within this method is drawn relative to those coordinates.</p>"},{"location":"en/gui/screens/#registering-an-abstractcontainerscreen","title":"Registering an AbstractContainerScreen","text":"<p>To use an <code>AbstractContainerScreen</code> with a menu, it needs to be registered. This can be done by calling <code>MenuScreens#register</code> within the <code>FMLClientSetupEvent</code> on the mod event bus.</p> <pre><code>// Event is listened to on the mod event bus\nprivate void clientSetup(FMLClientSetupEvent event) {\n    event.enqueueWork(\n        // Assume RegistryObject&lt;MenuType&lt;MyMenu&gt;&gt; MY_MENU\n        // Assume MyContainerScreen&lt;MyMenu&gt; which takes in three parameters\n        () -&gt; MenuScreens.register(MY_MENU.get(), MyContainerScreen::new)\n    );\n}</code></pre> <p>Warning</p> <p><code>MenuScreens#register</code> is not thread-safe, so it needs to be called inside <code>#enqueueWork</code> provided by the parallel dispatch event.</p>"},{"location":"en/items/","title":"Items","text":"<p>Along with blocks, items are a key component of most mods. While blocks make up the level around you, items exist within inventories.</p>"},{"location":"en/items/#creating-an-item","title":"Creating an Item","text":""},{"location":"en/items/#basic-items","title":"Basic Items","text":"<p>Basic items that need no special functionality (think sticks or sugar) do not need custom classes. You can create an item by instantiating the <code>Item</code> class with an <code>Item$Properties</code> object. This <code>Item$Properties</code> object can be made via the constructor and customized by calling its methods. For instance:</p> Method Description <code>requiredFeatures</code> Sets the required <code>FeatureFlag</code>s needed to see this item in the <code>CreativeModeTab</code> it is added to. <code>durability</code> Sets the maximum damage value for this item. If it is over <code>0</code>, two item properties \u201cdamaged\u201d and \u201cdamage\u201d are added. <code>stacksTo</code> Sets the maximum stack size. You cannot have an item that is both damageable and stackable. <code>setNoRepair</code> Makes this item impossible to repair, even if it is damageable. <code>craftRemainder</code> Sets this item\u2019s container item, the way that lava buckets give you back an empty bucket when they are used. <p>The above methods are chainable, meaning they <code>return this</code> to facilitate calling them in series.</p>"},{"location":"en/items/#advanced-items","title":"Advanced Items","text":"<p>Setting the properties of an item as above only works for simple items. If you want more complicated items, you should subclass <code>Item</code> and override its methods.</p>"},{"location":"en/items/#creativemodetabevent","title":"<code>CreativeModeTabEvent</code>","text":"<p>An item can be added to a <code>CreativeModeTab</code> via <code>CreativeModeTabEvent$BuildContents</code> on the mod event bus. An item(s) can be added without any additional configurations via <code>#accept</code>.</p> <pre><code>// Registered on the MOD event bus\n// Assume we have RegistryObject&lt;Item&gt; and RegistryObject&lt;Block&gt; called ITEM and BLOCK\n@SubscribeEvent\npublic void buildContents(CreativeModeTabEvent.BuildContents event) {\n  // Add to ingredients tab\n  if (event.getTab() == CreativeModeTabs.INGREDIENTS) {\n    event.accept(ITEM);\n    event.accept(BLOCK); // Takes in an ItemLike, assumes block has registered item\n  }\n}</code></pre> <p>You can also enable or disable items being added through a <code>FeatureFlag</code> in the <code>FeatureFlagSet</code> or a boolean determining whether the player has permissions to see operator creative tabs.</p>"},{"location":"en/items/#custom-creative-tabs","title":"Custom Creative Tabs","text":"<p>A custom <code>CreativeModeTab</code> can be created via <code>CreativeModeTabEvent$Register#registerCreativeModeTab</code> on the mod event bus. This takes in the name of the tab and a consumer of the builder. In addition, a list of <code>ResourceLocation</code>s or <code>CreativeModeTab</code>s can be provided to determine where this tab should be located.</p> <pre><code>// Registered on the MOD event bus\n// Assume we have RegistryObject&lt;Item&gt; and RegistryObject&lt;Block&gt; called ITEM and BLOCK\n@SubscribeEvent\npublic void buildContents(CreativeModeTabEvent.Register event) {\n  event.registerCreativeModeTab(new ResourceLocation(MOD_ID, \"example\"), builder -&gt;\n    // Set name of tab to display\n    builder.title(Component.translatable(\"item_group.\" + MOD_ID + \".example\"))\n    // Set icon of creative tab\n    .icon(() -&gt; new ItemStack(ITEM.get()))\n    // Add default items to tab\n    .displayItems((params, output) -&gt; {\n      output.accept(ITEM.get());\n      output.accept(BLOCK.get());\n    })\n  );\n}</code></pre>"},{"location":"en/items/#registering-an-item","title":"Registering an Item","text":"<p>Items must be registered to function.</p>"},{"location":"en/items/bewlr/","title":"BlockEntityWithoutLevelRenderer","text":"<p><code>BlockEntityWithoutLevelRenderer</code> is a method to handle dynamic rendering on items. This system is much simpler than the old <code>ItemStack</code> system, which required a <code>BlockEntity</code>, and did not allow access to the <code>ItemStack</code>.</p>"},{"location":"en/items/bewlr/#using-blockentitywithoutlevelrenderer","title":"Using BlockEntityWithoutLevelRenderer","text":"<p>BlockEntityWithoutLevelRenderer allows you to render your item using <code>public void renderByItem(ItemStack itemStack, ItemDisplayContext ctx, PoseStack poseStack, MultiBufferSource bufferSource, int combinedLight, int combinedOverlay)</code>.</p> <p>In order to use an BEWLR, the <code>Item</code> must first satisfy the condition that its model returns true for <code>BakedModel#isCustomRenderer</code>. If it does not have one, it will use the default <code>ItemRenderer#getBlockEntityRenderer</code>. Once that returns true, the Item\u2019s BEWLR will be accessed for rendering. </p> <p>Note</p> <p><code>Block</code>s also render using a BEWLR if <code>Block#getRenderShape</code> is set to <code>RenderShape#ENTITYBLOCK_ANIMATED</code>.</p> <p>To set the BEWLR for an Item, an anonymous instance of <code>IClientItemExtensions</code> must be consumed within <code>Item#initializeClient</code>. Within the anonymous instance, <code>IClientItemExtensions#getCustomRenderer</code> should be overridden to return the instance of your BEWLR:</p> <pre><code>// In your item class\n@Override\npublic void initializeClient(Consumer&lt;IClientItemExtensions&gt; consumer) {\n  consumer.accept(new IClientItemExtensions() {\n\n    @Override\n    public BlockEntityWithoutLevelRenderer getCustomRenderer() {\n      return myBEWLRInstance;\n    }\n  });\n}</code></pre> <p>Important</p> <p>Each mod should only have one instance of a custom BEWLR.</p> <p>That is it, no additional setup is necessary to use a BEWLR.</p>"},{"location":"en/legacy/","title":"Documentation for Legacy Versions","text":"<p>Forge has existed for years, and you can still easily access builds of Forge for Minecraft versions as old as Minecraft 1.1. There are significant differences between each and every version, and it would be an impossible task to support so many different versions. Therefore, Forge uses an LTS system where a previous major Minecraft version is deemed as \u201cLTS\u201d (Long Term Support). Only the latest version and any current LTS versions will have easily accessible documentation and be included in the version dropdown in the sidebar. However, some older versions were LTS once or the latest version at some point and had documentation written. Links to old sites with documentation for those versions can be found here.</p> <p>Important</p> <p>These old documentation sites are for reference purposes only. Do not ask for help with old versions on the Forge discord or the Forge forums. You will not receive support when you are using older versions.</p>"},{"location":"en/legacy/#list-of-previously-documented-versions","title":"List of Previously Documented versions","text":"<p>Unfortunately, not all versions were used for a significant amount of time, and the documentation for that version may be incomplete. Whenever a new version is released, the documentation from the previous version is copied and adjusted over time to include new and updated information. When a version wasn\u2019t supported for long, the information was never updated. The accuracy percentages represent how much of the information that should have been updated was actually updated.</p> Version Accuracy Link 1.12.x 100% https://docs.minecraftforge.net/en/1.12.x/ 1.13.x 10% https://docs.minecraftforge.net/en/1.13.x/ 1.14.x 10% https://docs.minecraftforge.net/en/1.14.x/ 1.15.x 85% https://docs.minecraftforge.net/en/1.15.x/ 1.16.x 85% https://docs.minecraftforge.net/en/1.16.x/ 1.17.x 85% https://docs.minecraftforge.net/en/1.17.x/ 1.18.x 90% https://docs.minecraftforge.net/en/1.18.x/ 1.19.2 90% https://docs.minecraftforge.net/en/1.19.2/"},{"location":"en/legacy/#retrogradle","title":"RetroGradle","text":"<p>RetroGradle is an archival initiative to update the older ForgeGradle 1.x to 2.3 toolchains and their Minecraft versions to use the modern ForgeGradle 4.x and above toolchain. The goal is to preserve all past released versions of Minecraft Forge by moving them to a verifiably working and modern toolchain which is data-driven and not hardcoded for version-specific workflows.</p> <p>If any developer wishes to contribute to this archival effort, please visit The Forge Project discord server and ask for directions to the designated channel. Please note that this initiative only aims to preserve these old versions for the benefit of the community, not to support developing mods for these old, unsupported versions. There will not be any support for using or developing for unsupported versions.</p>"},{"location":"en/legacy/porting/","title":"Porting to Minecraft 1.19","text":"<p>Here you can find a list of primers on how to port from old versions to the current version. Some versions are lumped together since that particular version never saw much usage.</p> From -&gt; To Primer 1.12 -&gt; 1.13/1.14 Primer by williewillus 1.14 -&gt; 1.15 Primer by williewillus 1.15 -&gt; 1.16 Primer by 50ap5ud5 1.16 -&gt; 1.17 Primer by 50ap5ud5 1.19.2 -&gt; 1.19.3 Primer by ChampionAsh5357 1.19.3 -&gt; 1.19.4 Primer by ChampionAsh5357"},{"location":"en/misc/config/","title":"Configuration","text":"<p>Configurations define settings and consumer preferences that can be applied to a mod instance. Forge uses a configuration system using TOML files and read with NightConfig.</p>"},{"location":"en/misc/config/#creating-a-configuration","title":"Creating a Configuration","text":"<p>A configuration can be created using a subtype of <code>IConfigSpec</code>. Forge implements the type via <code>ForgeConfigSpec</code> and enables its construction through <code>ForgeConfigSpec$Builder</code>. The builder can separate the config values into sections via <code>Builder#push</code> to create a section and <code>Builder#pop</code> to leave a section. Afterwards, the configuration can be built using one of two methods:</p> Method Description <code>build</code> Creates the <code>ForgeConfigSpec</code>. <code>configure</code> Creates a pair of the class holding the config values and the <code>ForgeConfigSpec</code>. <p>Note</p> <p><code>ForgeConfigSpec$Builder#configure</code> is typically used with a <code>static</code> block and a class that takes in <code>ForgeConfigSpec$Builder</code> as part of its constructor to attach and hold the values:</p> <pre><code>// In some config class\nExampleConfig(ForgeConfigSpec.Builder builder) {\n  // Define values here in final fields\n}\n\n// Somewhere the constructor is accessible\nstatic {\n  Pair&lt;ExampleConfig, ForgeConfigSpec&gt; pair = new ForgeConfigSpec.Builder()\n    .configure(ExampleConfig::new);\n  // Store pair values in some constant field\n}</code></pre> <p>Each config value can be supplied with additional context to provide additional behavior. Contexts must be defined before the config value is fully built:</p> Method Description <code>comment</code> Provides a description of what the config value does. Can provide multiple strings for a multiline comment. <code>translation</code> Provides a translation key for the name of the config value. <code>worldRestart</code> The world must be restarted before the config value can be changed."},{"location":"en/misc/config/#configvalue","title":"ConfigValue","text":"<p>Config values can be built with the provided contexts (if defined) using any of the <code>#define</code> methods.</p> <p>All config value methods take in at least two components:</p> <ul> <li>A path representing the name of the variable: a <code>.</code> separated string representing the sections the config value is in</li> <li>The default value when no valid configuration is present</li> </ul> <p>The <code>ConfigValue</code> specific methods take in two additional components:</p> <ul> <li>A validator to make sure the deserialized object is valid</li> <li>A class representing the data type of the config value</li> </ul> <pre><code>// For some ForgeConfigSpec$Builder builder\nConfigValue&lt;T&gt; value = builder.comment(\"Comment\")\n  .define(\"config_value_name\", defaultValue);</code></pre> <p>The values themselves can be obtained using <code>ConfigValue#get</code>. The values are additionally cached to prevent multiple readings from files.</p>"},{"location":"en/misc/config/#additional-config-value-types","title":"Additional Config Value Types","text":"<ul> <li>Range Values<ul> <li>Description: Value must be between the defined bounds</li> <li>Class Type: <code>Comparable&lt;T&gt;</code></li> <li>Method Name: <code>#defineInRange</code></li> <li>Additional Components:</li> <li>The minimum and maximum the config value may be</li> <li>A class representing the data type of the config value</li> </ul> </li> </ul> <p>Note</p> <p><code>DoubleValue</code>s, <code>IntValue</code>s, and <code>LongValue</code>s are range values which specify the class as <code>Double</code>, <code>Integer</code>, and <code>Long</code> respectively.</p> <ul> <li> <p>Whitelisted Values</p> <ul> <li>Description: Value must be in supplied collection</li> <li>Class Type: <code>T</code></li> <li>Method Name: <code>#defineInList</code></li> <li>Additional Components:</li> <li>A collection of the allowed values the configuration can be</li> </ul> </li> <li> <p>List Values</p> <ul> <li>Description: Value is a list of entries</li> <li>Class Type: <code>List&lt;T&gt;</code></li> <li>Method Name: <code>#defineList</code>, <code>#defineListAllowEmpty</code> if list can be empty</li> <li>Additional Components:</li> <li>A validator to make sure a deserialized element from the list is valid</li> </ul> </li> <li> <p>Enum Values</p> <ul> <li>Description: An enum value in the supplied collection</li> <li>Class Type: <code>Enum&lt;T&gt;</code></li> <li>Method Name: <code>#defineEnum</code></li> <li>Additional Components:</li> <li>A getter to convert a string or integer into an enum</li> <li>A collection of the allowed values the configuration can be</li> </ul> </li> <li> <p>Boolean Values</p> <ul> <li>Description: A <code>boolean</code> value</li> <li>Class Type: <code>Boolean</code></li> <li>Method Name: <code>#define</code></li> </ul> </li> </ul>"},{"location":"en/misc/config/#registering-a-configuration","title":"Registering a Configuration","text":"<p>Once a <code>ForgeConfigSpec</code> has been built, it must be registered to allow Forge to load, track, and sync the configuration settings as required. Configurations should be registered in the mod constructor via <code>ModLoadingContext#registerConfig</code>. A configuration can be registered with a given type representing the side the config belongs to, the <code>ForgeConfigSpec</code>, and optionally a specific file name for the configuration.</p> <pre><code>// In the mod constructor with a ForgeConfigSpec CONFIG\nModLoadingContext.get().registerConfig(Type.COMMON, CONFIG);</code></pre> <p>Here is a list of the available configuration types:</p> Type Loaded Synced to Client Client Location Server Location Default File Suffix CLIENT Client Side Only No <code>.minecraft/config</code> N/A <code>-client</code> COMMON On Both Sides No <code>.minecraft/config</code> <code>&lt;server_folder&gt;/config</code> <code>-common</code> SERVER Server Side Only Yes <code>.minecraft/saves/&lt;level_name&gt;/serverconfig</code> <code>&lt;server_folder&gt;/world/serverconfig</code> <code>-server</code> <p>Tip</p> <p>Forge documents the config types within their codebase.</p>"},{"location":"en/misc/config/#configuration-events","title":"Configuration Events","text":"<p>Operations that occur whenever a config is loaded or reloaded can be done using the <code>ModConfigEvent$Loading</code> and <code>ModConfigEvent$Reloading</code> events. The events must be registered to the mod event bus.</p> <p>Warning</p> <p>These events are called for all configurations for the mod; the <code>ModConfig</code> object provided should be used to denote which configuration is being loaded or reloaded.</p>"},{"location":"en/misc/debugprofiler/","title":"Debug Profiler","text":"<p>Minecraft provides a Debug Profiler that provides system data, current game settings, JVM data, level data, and sided tick information to find time consuming code. Considering things like <code>TickEvent</code>s and ticking <code>BlockEntities</code>, this can be very useful for modders and server owners that want to find a lag source.</p>"},{"location":"en/misc/debugprofiler/#using-the-debug-profiler","title":"Using the Debug Profiler","text":"<p>The Debug Profiler is very simple to use. It requires the debug keybind <code>F3 + L</code> to start the profiler. After 10 seconds, it will automatically stop; however, it can be stopped earlier by pressing the keybind again.</p> <p>Note</p> <p>Naturally, you can only profile code paths that are actually being reached. <code>Entities</code> and <code>BlockEntities</code> that you want to profile must exist in the level to show up in the results.</p> <p>After you have stopped the debugger, it will create a new zip within the <code>debug/profiling</code> subdirectory in your run directory. The file name will be formatted with the date and time as <code>yyyy-mm-dd_hh_mi_ss-WorldName-VersionNumber.zip</code></p>"},{"location":"en/misc/debugprofiler/#reading-a-profiling-result","title":"Reading a Profiling result","text":"<p>Within each sided folder (<code>client</code> and <code>server</code>), you will find a <code>profiling.txt</code> file containing the result data. At the top, it first tells you how long in milliseconds it was running and how many ticks ran in that time.</p> <p>Below that, you will find information similar to the snippet below: <pre><code>[00] levels - 96.70%/96.70%\n[01] |   Level Name - 99.76%/96.47%\n[02] |   |   tick - 99.31%/95.81%\n[03] |   |   |   entities - 47.72%/45.72%\n[04] |   |   |   |   regular - 98.32%/44.95%\n[04] |   |   |   |   blockEntities - 0.90%/0.41%\n[05] |   |   |   |   |   unspecified - 64.26%/0.26%\n[05] |   |   |   |   |   minecraft:furnace - 33.35%/0.14%\n[05] |   |   |   |   |   minecraft:chest - 2.39%/0.01%</code></pre> Here is a small explanation of what each part means</p> [02] tick 99.31% 95.81% The Depth of the section The Name of the Section The percentage of time it took in relation to it\u2019s parent. For Layer 0, it is the percentage of the time a tick takes. For Layer 1, it is the percentage of the time its parent takes. The second percentage tells you how much time it took from the entire tick."},{"location":"en/misc/debugprofiler/#profiling-your-own-code","title":"Profiling your own code","text":"<p>The Debug Profiler has basic support for <code>Entity</code> and <code>BlockEntity</code>. If you would like to profile something else, you may need to manually create your sections like so: <pre><code>ProfilerFiller#push(yourSectionName : String);\n//The code you want to profile\nProfilerFiller#pop();</code></pre> You can obtain the <code>ProfilerFiller</code> instance from a <code>Level</code>, <code>MinecraftServer</code>, or <code>Minecraft</code> instance. Now you just need to search the results file for your section name.</p>"},{"location":"en/misc/gametest/","title":"Game Tests","text":"<p>Game Tests are a way to run in-game unit tests. The system was designed to be scalable and in parallel to run large numbers of different tests efficiently. Testing object interactions and behaviors are simply a few of the many applications of this framework.</p>"},{"location":"en/misc/gametest/#creating-a-game-test","title":"Creating a Game Test","text":"<p>A standard Game Test follows three basic steps:</p> <ol> <li>A structure, or template, is loaded holding the scene on which the interaction or behavior is tested.</li> <li>A method conducts the logic to perform on the scene.</li> <li>The method logic executes. If a successful state is reached, then the test succeeds. Otherwise, the test fails and the result is stored within a lectern adjacent to the scene.</li> </ol> <p>As such, to create a Game Test, there must be an existing template holding the initial start state of the scene and a method which provides the logic of execution.</p>"},{"location":"en/misc/gametest/#the-test-method","title":"The Test Method","text":"<p>A Game Test method is a <code>Consumer&lt;GameTestHelper&gt;</code> reference, meaning it takes in a <code>GameTestHelper</code> and returns nothing. For a Game Test method to be recognized, it must have a <code>@GameTest</code> annotation:</p> <pre><code>public class ExampleGameTests {\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) {\n    // Do stuff\n  }\n}</code></pre> <p>The <code>@GameTest</code> annotation also contains members which configure how the game test should run.</p> <pre><code>// In some class\n@GameTest(\n  setupTicks = 20L, // The test spends 20 ticks to set up for execution\n  required = false // The failure is logged but does not affect the execution of the batch\n)\npublic static void exampleConfiguredTest(GameTestHelper helper) {\n  // Do stuff\n}</code></pre>"},{"location":"en/misc/gametest/#relative-positioning","title":"Relative Positioning","text":"<p>All <code>GameTestHelper</code> methods translate relative coordinates within the structure template scene to its absolute coordinates using the structure block\u2019s current location. To allow for easy conversion between relative and absolute positioning, <code>GameTestHelper#absolutePos</code> and <code>GameTestHelper#relativePos</code> can be used respectively.</p> <p>The relative position of a structure template can be obtained in-game by loading the structure via the test command, placing the player at the wanted location, and finally running the <code>/test pos</code> command. This will grab the coordinates of the player relative to the closest structure within 200 blocks of the player. The command will export the relative position as a copyable text component in the chat to be used as a final local variable.</p> <p>Tip</p> <p>The local variable generated by <code>/test pos</code> can specify its reference name by appending it to the end of the command:</p> <pre><code>/test pos &lt;var&gt; # Exports 'final BlockPos &lt;var&gt; = new BlockPos(...);'</code></pre>"},{"location":"en/misc/gametest/#successful-completion","title":"Successful Completion","text":"<p>A Game Test method is responsible for one thing: marking the test was successful on a valid completion. If no success state was achieved before the timeout is reached (as defined by <code>GameTest#timeoutTicks</code>), then the test automatically fails.</p> <p>There are many abstracted methods within <code>GameTestHelper</code> which can be used to define a successful state; however, four are extremely important to be aware of.</p> Method Description <code>#succeed</code> The test is marked as successful. <code>#succeedIf</code> The supplied <code>Runnable</code> is tested immediately and succeeds if no <code>GameTestAssertException</code> is thrown. If the test does not succeed on the immediate tick, then it is marked as a failure. <code>#succeedWhen</code> The supplied <code>Runnable</code> is tested every tick until timeout and succeeds if the check on one of the ticks does not throw a <code>GameTestAssertException</code>. <code>#succeedOnTickWhen</code> The supplied <code>Runnable</code> is tested on the specified tick and will succeed if no <code>GameTestAssertException</code> is thrown. If the <code>Runnable</code> succeeds on any other tick, then it is marked as a failure. <p>Important</p> <p>Game Tests are executed every tick until the test is marked as a success. As such, methods which schedule success on a given tick must be careful to always fail on any previous tick.</p>"},{"location":"en/misc/gametest/#scheduling-actions","title":"Scheduling Actions","text":"<p>Not all actions will occur when a test begins. Actions can be scheduled to occur at specific times or intervals:</p> Method Description <code>#runAtTickTime</code> The action is ran on the specified tick. <code>#runAfterDelay</code> The action is ran <code>x</code> ticks after the current tick. <code>#onEachTick</code> The action is ran every tick."},{"location":"en/misc/gametest/#assertions","title":"Assertions","text":"<p>At any time during a Game Test, an assertion can be made to check if a given condition is true. There are numerous assertion methods within <code>GameTestHelper</code>; however, it simplifies to throwing a <code>GameTestAssertException</code> whenever the appropriate state is not met.</p>"},{"location":"en/misc/gametest/#generated-test-methods","title":"Generated Test Methods","text":"<p>If Game Test methods need to be generated dynamically, a test method generator can be created. These methods take in no parameters and return a collection of <code>TestFunction</code>s. For a test method generator to be recognized, it must have a <code>@GameTestGenerator</code> annotation:</p> <pre><code>public class ExampleGameTests {\n  @GameTestGenerator\n  public static Collection&lt;TestFunction&gt; exampleTests() {\n    // Return a collection of TestFunctions\n  }\n}</code></pre>"},{"location":"en/misc/gametest/#testfunction","title":"TestFunction","text":"<p>A <code>TestFunction</code> is the boxed information held by the <code>@GameTest</code> annotation and the method running the test.</p> <p>Tip</p> <p>Any methods annotated using <code>@GameTest</code> are translated into a <code>TestFunction</code> using <code>GameTestRegistry#turnMethodIntoTestFunction</code>. That method can be used as a reference for creating <code>TestFunction</code>s without the use of the annotation.</p>"},{"location":"en/misc/gametest/#batching","title":"Batching","text":"<p>Game Tests can be executed in batches instead of registration order. A test can be added to a batch by having the same supplied <code>GameTest#batch</code> string.</p> <p>On its own, batching does not provide anything useful. However, batching can be used to perform setup and teardown states on the current level the tests are running in. This is done by annotating a method with either <code>@BeforeBatch</code> for setup or <code>@AfterBatch</code> for takedown. The <code>#batch</code> methods must match the string supplied to the game test.</p> <p>Batch methods are <code>Consumer&lt;ServerLevel&gt;</code> references, meaning they take in a <code>ServerLevel</code> and return nothing:</p> <pre><code>public class ExampleGameTests {\n  @BeforeBatch(batch = \"firstBatch\")\n  public static void beforeTest(ServerLevel level) {\n    // Perform setup\n  }\n\n  @GameTest(batch = \"firstBatch\")\n  public static void exampleTest2(GameTestHelper helper) {\n    // Do stuff\n  }\n}</code></pre>"},{"location":"en/misc/gametest/#registering-a-game-test","title":"Registering a Game Test","text":"<p>A Game Test must be registered to be ran in-game. There are two methods of doing so: via the <code>@GameTestHolder</code> annotation or <code>RegisterGameTestsEvent</code>. Both registration methods still require the test methods to be annotated with either <code>@GameTest</code>, <code>@GameTestGenerator</code>, <code>@BeforeBatch</code>, or <code>@AfterBatch</code>.</p>"},{"location":"en/misc/gametest/#gametestholder","title":"GameTestHolder","text":"<p>The <code>@GameTestHolder</code> annotation registers any test methods within the type (class, interface, enum, or record). <code>@GameTestHolder</code> contains a single method which has multiple uses. In this instance, the supplied <code>#value</code> must be the mod id of the mod; otherwise, the test will not run under default configurations.</p> <pre><code>@GameTestHolder(MODID)\npublic class ExampleGameTests {\n  // ...\n}</code></pre>"},{"location":"en/misc/gametest/#registergametestsevent","title":"RegisterGameTestsEvent","text":"<p><code>RegisterGameTestsEvent</code> can also register either classes or methods using <code>#register</code>. The event listener must be added to the mod event bus. Test methods registered this way must supply their mod id to <code>GameTest#templateNamespace</code> on every method annotated with <code>@GameTest</code>.</p> <pre><code>// In some class\npublic void registerTests(RegisterGameTestsEvent event) {\n  event.register(ExampleGameTests.class);\n}\n\n// In ExampleGameTests\n@GameTest(templateNamespace = MODID)\npublic static void exampleTest3(GameTestHelper helper) {\n  // Perform setup\n}</code></pre> <p>Note</p> <p>The value supplied to <code>GameTestHolder#value</code> and <code>GameTest#templateNamespace</code> can be different from the current mod id. The configuration within the buildscript would need to be changed.</p>"},{"location":"en/misc/gametest/#structure-templates","title":"Structure Templates","text":"<p>Game Tests are performed within scenes loaded by structures, or templates. All templates define the dimensions of the scene and the initial data (blocks and entities) that will be loaded. The template must be stored as an <code>.nbt</code> file within <code>data/&lt;namespace&gt;/structures</code>.</p> <p>Tip</p> <p>A structure template can be created and saved using a structure block.</p> <p>The location of the template is specified by a few factors:</p> <ul> <li>If the namespace of the template is specified.</li> <li>If the class should be prepended to the name of the template.</li> <li>If the name of the template is specified.</li> </ul> <p>The namespace of the template is determined by <code>GameTest#templateNamespace</code>, then <code>GameTestHolder#value</code> if not specified, then <code>minecraft</code> if neither is specified.</p> <p>The simple class name is not prepended to the name of the template if the <code>@PrefixGameTestTemplate</code> is applied to a class or method with the test annotations and set to <code>false</code>. Otherwise, the simple class name is made lowercase and prepended and followed by a dot before the template name.</p> <p>The name of the template is determined by <code>GameTest#template</code>. If not specified, then the lowercase name of the method is used instead.</p> <pre><code>// Modid for all structures will be MODID\n@GameTestHolder(MODID)\npublic class ExampleGameTests {\n\n  // Class name is prepended, template name is not specified\n  // Template Location at 'modid:examplegametests.exampletest'\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is not specified\n  // Template Location at 'modid:exampletest2'\n  @PrefixGameTestTemplate(false)\n  @GameTest\n  public static void exampleTest2(GameTestHelper helper) { /*...*/ }\n\n  // Class name is prepended, template name is specified\n  // Template Location at 'modid:examplegametests.test_template'\n  @GameTest(template = \"test_template\")\n  public static void exampleTest3(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is specified\n  // Template Location at 'modid:test_template2'\n  @PrefixGameTestTemplate(false)\n  @GameTest(template = \"test_template2\")\n  public static void exampleTest4(GameTestHelper helper) { /*...*/ }\n}</code></pre>"},{"location":"en/misc/gametest/#running-game-tests","title":"Running Game Tests","text":"<p>Game Tests can be run using the <code>/test</code> command. The <code>test</code> command is highly configurable; however, only a few are of importance to running tests:</p> Subcommand Description <code>run</code> Runs the specified test: <code>run &lt;test_name&gt;</code>. <code>runall</code> Runs all available tests. <code>runthis</code> Runs the nearest test to the player within 15 blocks. <code>runthese</code> Runs tests within 200 blocks of the player. <code>runfailed</code> Runs all tests that failed in the previous run. <p>Note</p> <p>Subcommands follow the test command: <code>/test &lt;subcommand&gt;</code>.</p>"},{"location":"en/misc/gametest/#buildscript-configurations","title":"Buildscript Configurations","text":"<p>Game Tests provide additional configuration settings within a buildscript (the <code>build.gradle</code> file) to run and integrate into different settings.</p>"},{"location":"en/misc/gametest/#enabling-other-namespaces","title":"Enabling Other Namespaces","text":"<p>If the buildscript was setup as recommended, then only Game Tests under the current mod id would be enabled. To enable other namespaces to load Game Tests from, a run configuration must set the property <code>forge.enabledGameTestNamespaces</code> to a string specifying each namespace separated by a comma. If the property is empty or not set, then all namespaces will be loaded.</p> <pre><code>// Inside a run configuration\nproperty 'forge.enabledGameTestNamespaces', 'modid1,modid2,modid3'</code></pre> <p>Warning</p> <p>There must be no spaces in-between namespaces; otherwise, the namespace will not be loaded correctly.</p>"},{"location":"en/misc/gametest/#game-test-server-run-configuration","title":"Game Test Server Run Configuration","text":"<p>The Game Test Server is a special configuration which runs a build server. The build server returns an exit code of the number of required, failed Game Tests. All failed tests, whether required or optional, are logged. This server can be run using <code>gradlew runGameTestServer</code>.</p> <p>Important</p> <p>Due to a quirk in how Gradle works, by default, if a task forces a system exit, the Gradle daemon will be killed, causing the Gradle runner to report a build failure. ForgeGradle sets by default a force exit on run tasks such that any subprojects are not executed in sequence. However, as such, the Game Test Server will always fail.</p> <p>This can be fixed by disabling the force exit on the run configuration using the <code>#setForceExit</code> method:</p> <pre><code>// Game Test Server run configuration\ngameTestServer {\n    // ...\n    setForceExit false\n}</code></pre>"},{"location":"en/misc/gametest/#enabling-game-tests-in-other-run-configurations","title":"Enabling Game Tests in Other Run Configurations","text":"<p>By default, only the <code>client</code>, <code>server</code>, and <code>gameTestServer</code> run configurations have Game Tests enabled. If another run configuration should run Game Tests, then the <code>forge.enableGameTest</code> property must be set to <code>true</code>.</p> <pre><code>// Inside a run configuration\nproperty 'forge.enableGameTest', 'true'</code></pre>"},{"location":"en/misc/keymappings/","title":"Key Mappings","text":"<p>A key mapping, or key binding, defines a particular action that should be tied to an input: mouse click, key press, etc. Each action defined by a key mapping can be checked whenever the client can take an input. Furthermore, each key mapping can be assigned to any input through the Controls option menu.</p>"},{"location":"en/misc/keymappings/#registering-a-keymapping","title":"Registering a <code>KeyMapping</code>","text":"<p>A <code>KeyMapping</code> can be registered by listening to the <code>RegisterKeyMappingsEvent</code> on the mod event bus only on the physical client and calling <code>#register</code>.</p> <pre><code>// In some physical client only class\n\n// Key mapping is lazily initialized so it doesn't exist until it is registered\npublic static final Lazy&lt;KeyMapping&gt; EXAMPLE_MAPPING = Lazy.of(() -&gt; /*...*/);\n\n// Event is on the mod event bus only on the physical client\n@SubscribeEvent\npublic void registerBindings(RegisterKeyMappingsEvent event) {\n  event.register(EXAMPLE_MAPPING.get());\n}</code></pre>"},{"location":"en/misc/keymappings/#creating-a-keymapping","title":"Creating a <code>KeyMapping</code>","text":"<p>A <code>KeyMapping</code> can be created using it\u2019s constructor. The <code>KeyMapping</code> takes in a translation key defining the name of the mapping, the default input of the mapping, and the translation key defining the category the mapping will be put within in the Controls option menu.</p> <p>Tip</p> <p>A <code>KeyMapping</code> can be added to a custom category by providing a category translation key not provided by vanilla. Custom category translation keys should contain the mod id (e.g. <code>key.categories.examplemod.examplecategory</code>).</p>"},{"location":"en/misc/keymappings/#default-inputs","title":"Default Inputs","text":"<p>Each key mapping has a default input associated with it. This is provided through <code>InputConstants$Key</code>. Each input consists of an <code>InputConstants$Type</code>, which defines what device is providing the input, and an integer, which defines the associated identifier of the input on the device.</p> <p>Vanilla provides three types of inputs: <code>KEYSYM</code>, which defines a keyboard through the provided <code>GLFW</code> key tokens, <code>SCANCODE</code>, which defines a keyboard through the platform-specific scancode, and <code>MOUSE</code>, which defines a mouse.</p> <p>Note</p> <p>It is highly recommended to use <code>KEYSYM</code> over <code>SCANCODE</code> for keyboards as <code>GLFW</code> key tokens are not tied to any particular system. You can read more on the GLFW docs.</p> <p>The integer is dependent on the type provided. All input codes are defined in <code>GLFW</code>: <code>KEYSYM</code> tokens are prefixed with <code>GLFW_KEY_*</code> while <code>MOUSE</code> codes are prefixed with <code>GLFW_MOUSE_*</code>.</p> <pre><code>new KeyMapping(\n  \"key.examplemod.example1\", // Will be localized using this translation key\n  InputConstants.Type.KEYSYM, // Default mapping is on the keyboard\n  GLFW.GLFW_KEY_P, // Default key is P\n  \"key.categories.misc\" // Mapping will be in the misc category\n)</code></pre> <p>Note</p> <p>If the key mapping should not be mapped to a default, the input should be set to <code>InputConstants#UNKNOWN</code>. The vanilla constructor will require you to extract the input code via <code>InputConstants$Key#getValue</code> while the Forge constructor can be supplied the raw input field.</p>"},{"location":"en/misc/keymappings/#ikeyconflictcontext","title":"<code>IKeyConflictContext</code>","text":"<p>Not all mappings are used in every context. Some mappings are only used in a GUI, while others are only used purely in game. To avoid mappings of the same key used in different contexts conflicting with each other, an <code>IKeyConflictContext</code> can be assigned.</p> <p>Each conflict context contains two methods: <code>#isActive</code>, which defines if the mapping can be used in the current game state, and <code>#conflicts</code>, which defines whether the mapping conflicts with a key in the same or different conflict context.</p> <p>Currently, Forge defines three basic contexts through <code>KeyConflictContext</code>: <code>UNIVERSAL</code>, which is the default meaning the key can be used in every context, <code>GUI</code>, which means the mapping can only be used when a <code>Screen</code> is open, and <code>IN_GAME</code>, which means the mapping can only be used if a <code>Screen</code> is not open. New conflict contexts can be created by implementing <code>IKeyConflictContext</code>.</p> <pre><code>new KeyMapping(\n  \"key.examplemod.example2\",\n  KeyConflictContext.GUI, // Mapping can only be used when a screen is open\n  InputConstants.Type.MOUSE, // Default mapping is on the mouse\n  GLFW.GLFW_MOUSE_BUTTON_LEFT, // Default mouse input is the left mouse button\n  \"key.categories.examplemod.examplecategory\" // Mapping will be in the new example category\n)</code></pre>"},{"location":"en/misc/keymappings/#keymodifier","title":"<code>KeyModifier</code>","text":"<p>Modders may not want mappings to have the same behavior if a modifier key is held at the same (e.g. <code>G</code> vs <code>CTRL + G</code>). To remedy this, Forge adds an additional parameter to the constructor to take in a <code>KeyModifier</code> which can apply control (<code>KeyModifier#CONTROL</code>), shift (<code>KeyModifier#SHIFT</code>), or alt (<code>KeyModifier#ALT</code>) to any input. <code>KeyModifier#NONE</code> is the default and will apply no modifier.</p> <p>A modifier can be added in the controls option menu by holding down the modifier key and the associated input.</p> <pre><code>new KeyMapping(\n  \"key.examplemod.example3\",\n  KeyConflictContext.UNIVERSAL,\n  KeyModifier.SHIFT, // Default mapping requires shift to be held down\n  InputConstants.Type.KEYSYM, // Default mapping is on the keyboard\n  GLFW.GLFW_KEY_G, // Default key is G\n  \"key.categories.misc\"\n)</code></pre>"},{"location":"en/misc/keymappings/#checking-a-keymapping","title":"Checking a <code>KeyMapping</code>","text":"<p>A <code>KeyMapping</code> can be checked to see whether it has been clicked. Depending on when, the mapping can be used in a conditional to apply the associated logic.</p>"},{"location":"en/misc/keymappings/#within-the-game","title":"Within the Game","text":"<p>Within the game, a mapping should be checked by listening to <code>ClientTickEvent</code> on the Forge event bus and checking <code>KeyMapping#consumeClick</code> within a while loop. <code>#consumeClick</code> will return <code>true</code> only the number of times the input was performed and not already previously handled, so it won\u2019t infinitely stall the game.</p> <pre><code>// Event is on the Forge event bus only on the physical client\npublic void onClientTick(ClientTickEvent event) {\n  if (event.phase == TickEvent.Phase.END) { // Only call code once as the tick event is called twice every tick\n    while (EXAMPLE_MAPPING.get().consumeClick()) {\n      // Execute logic to perform on click here\n    }\n  }\n}</code></pre> <p>Warning</p> <p>Do not use the <code>InputEvent</code>s as an alternative to <code>ClientTickEvent</code>. There are separate events for keyboard and mouse inputs only, so they wouldn\u2019t handle any additional inputs.</p>"},{"location":"en/misc/keymappings/#inside-a-gui","title":"Inside a GUI","text":"<p>Within a GUI, a mapping can be checked within one of the <code>GuiEventListener</code> methods using <code>IForgeKeyMapping#isActiveAndMatches</code>. The most common methods which can be checked are <code>#keyPressed</code> and <code>#mouseClicked</code>. </p> <p><code>#keyPressed</code> takes in the <code>GLFW</code> key token, the platform-specific scan code, and a bitfield of the held down modifiers. A key can be checked against a mapping by creating the input using <code>InputConstants#getKey</code>. The modifiers are already checked within the mapping methods itself.</p> <pre><code>// In some Screen subclass\n@Override\npublic boolean keyPressed(int key, int scancode, int mods) {\n  if (EXAMPLE_MAPPING.get().isActiveAndMatches(InputConstants.getKey(key, scancode))) {\n    // Execute logic to perform on key press here\n    return true;\n  }\n  return super.keyPressed(x, y, button);\n} </code></pre> <p>Note</p> <p>If you do not own the screen which you are trying to check a key for, you can listen to the <code>Pre</code> or <code>Post</code> events of <code>ScreenEvent$KeyPressed</code> on the Forge event bus instead.</p> <p><code>#mouseClicked</code> takes in the mouse\u2019s x position, y position, and the button clicked. A mouse button can be checked against a mapping by creating the input using <code>InputConstants$Type#getOrCreate</code> with the <code>MOUSE</code> input.</p> <pre><code>// In some Screen subclass\n@Override\npublic boolean mouseClicked(double x, double y, int button) {\n  if (EXAMPLE_MAPPING.get().isActiveAndMatches(InputConstants.TYPE.MOUSE.getOrCreate(button))) {\n    // Execute logic to perform on mouse click here\n    return true;\n  }\n  return super.mouseClicked(x, y, button);\n} </code></pre> <p>Note</p> <p>If you do not own the screen which you are trying to check a mouse for, you can listen to the <code>Pre</code> or <code>Post</code> events of <code>ScreenEvent$MouseButtonPressed</code> on the Forge event bus instead.</p>"},{"location":"en/misc/updatechecker/","title":"Forge Update Checker","text":"<p>Forge provides a very lightweight, opt-in, update-checking framework. If any mods have an available update, it will show a flashing icon on the \u2018Mods\u2019 button of the main menu and mod list along with the respective changelogs. It does not download updates automatically.</p>"},{"location":"en/misc/updatechecker/#getting-started","title":"Getting Started","text":"<p>The first thing you want to do is specify the <code>updateJSONURL</code> parameter in your <code>mods.toml</code> file. The value of this parameter should be a valid URL pointing to an update JSON file. This file can be hosted on your own web server, GitHub, or wherever you want as long as it can be reliably reached by all users of your mod.</p>"},{"location":"en/misc/updatechecker/#update-json-format","title":"Update JSON format","text":"<p>The JSON itself has a relatively simple format as follows:</p> <pre><code>{\n  \"homepage\": \"&lt;homepage/download page for your mod&gt;\",\n  \"&lt;mcversion&gt;\": {\n    \"&lt;modversion&gt;\": \"&lt;changelog for this version&gt;\", \n    // List all versions of your mod for the given Minecraft version, along with their changelogs\n    // ...\n  },\n  \"promos\": {\n    \"&lt;mcversion&gt;-latest\": \"&lt;modversion&gt;\",\n    // Declare the latest \"bleeding-edge\" version of your mod for the given Minecraft version\n    \"&lt;mcversion&gt;-recommended\": \"&lt;modversion&gt;\",\n    // Declare the latest \"stable\" version of your mod for the given Minecraft version\n    // ...\n  }\n}</code></pre> <p>This is fairly self-explanatory, but some notes:</p> <ul> <li>The link under <code>homepage</code> is the link the user will be shown when the mod is outdated.</li> <li>Forge uses an internal algorithm to determine whether one version string of your mod is \u201cnewer\u201d than another. Most versioning schemes should be compatible, but see the <code>ComparableVersion</code> class if you are concerned about whether your scheme is supported. Adherence to Maven versioning is highly recommended.</li> <li>The changelog string can be separated into lines using <code>\\n</code>. Some prefer to include a abbreviated changelog, then link to an external site that provides a full listing of changes.</li> <li> <p>Manually inputting data can be chore. You can configure your <code>build.gradle</code> to automatically update this file when building a release as Groovy has native JSON parsing support. Doing this is left as an exercise to the reader.</p> </li> <li> <p>Some examples can be found here for nocubes, Corail Tombstone and Chisels &amp; Bits 2.</p> </li> </ul>"},{"location":"en/misc/updatechecker/#retrieving-update-check-results","title":"Retrieving Update Check Results","text":"<p>You can retrieve the results of the Forge Update Checker using <code>VersionChecker#getResult(IModInfo)</code>. You can obtain your <code>IModInfo</code> via <code>ModContainer#getModInfo</code>. You can get your <code>ModContainer</code> using <code>ModLoadingContext.get().getActiveContainer()</code> inside your constructor, <code>ModList.get().getModContainerById(&lt;your modId&gt;)</code>, or <code>ModList.get().getModContainerByObject(&lt;your mod instance&gt;)</code>. You can obtain any other mod\u2019s <code>ModContainer</code> using <code>ModList.get().getModContainerById(&lt;modId&gt;)</code>. The returned object has a method <code>#status</code> which indicates the status of the version check.</p> Status Description <code>FAILED</code> The version checker could not connect to the URL provided. <code>UP_TO_DATE</code> The current version is equal to the recommended version. <code>AHEAD</code> The current version is newer than the recommended version if there is not latest version. <code>OUTDATED</code> There is a new recommended or latest version. <code>BETA_OUTDATED</code> There is a new latest version. <code>BETA</code> The current version is equal to or newer than the latest version. <code>PENDING</code> The result requested has not finished yet, so you should try again in a little bit. <p>The returned object will also have the target version and any changelog lines as specified in <code>update.json</code>.</p>"},{"location":"en/networking/","title":"Networking","text":"<p>Communication between servers and clients is the backbone of a successful mod implementation.</p> <p>There are two primary goals in network communication:</p> <ol> <li>Making sure the client view is \u201cin sync\u201d with the server view<ul> <li>The flower at coordinates (X, Y, Z) just grew</li> </ul> </li> <li>Giving the client a way to tell the server that something has changed about the player<ul> <li>the player pressed a key</li> </ul> </li> </ol> <p>The most common way to accomplish these goals is to pass messages between the client and the server. These messages will usually be structured, containing data in a particular arrangement, for easy sending and receiving.</p> <p>There are a variety of techniques provided by Forge to facilitate communication mostly built on top of netty.</p> <p>The simplest, for a new mod, would be SimpleImpl, where most of the complexity of the netty system is abstracted away. It uses a message and handler style system.</p>"},{"location":"en/networking/entities/","title":"Entities","text":"<p>In addition to regular network messages, there are various other systems provided to handle synchronizing entity data.</p>"},{"location":"en/networking/entities/#spawn-data","title":"Spawn Data","text":"<p>In general, the spawning of modded entities is handled separately, by Forge.</p> <p>Note</p> <p>This means that simply extending a vanilla entity class may not inherit all its behavior. You may need to implement certain vanilla behaviors yourself.</p> <p>You can add extra data to the spawn packet Forge sends by implementing the following interface.</p>"},{"location":"en/networking/entities/#ientityadditionalspawndata","title":"IEntityAdditionalSpawnData","text":"<p>If your entity has data that is needed on the client, but does not change over time, then it can be added to the entity spawn packet using this interface. <code>#writeSpawnData</code> and <code>#readSpawnData</code> control how the data should be encoded to/decoded from the network buffer.</p>"},{"location":"en/networking/entities/#dynamic-data","title":"Dynamic Data","text":""},{"location":"en/networking/entities/#data-parameters","title":"Data Parameters","text":"<p>This is the main vanilla system for synchronizing entity data from the server to the client. As such, a number of vanilla examples are available to refer to.</p> <p>Firstly, you need a <code>EntityDataAccessor&lt;T&gt;</code> for the data you wish to keep synchronized. This should be stored as a <code>static final</code> field in your entity class, obtained by calling <code>SynchedEntityData#defineId</code> and passing the entity class and a serializer for that type of data. The available serializer implementations can be found as static constants within the <code>EntityDataSerializers</code> class.</p> <p>Warning</p> <p>You should only create data parameters for your own entities, within that entity\u2019s class. Adding parameters to entities you do not control can cause the IDs used to send that data over the network to become desynchronized, causing difficult to debug crashes.</p> <p>Then, override <code>Entity#defineSynchedData</code> and call <code>this.entityData.define(...)</code> for each of your data parameters, passing the parameter and an initial value to use. Remember to always call the <code>super</code> method first!</p> <p>You can then get and set these values via your entity\u2019s <code>entityData</code> instance. Changes made will be synchronized to the client automatically.</p>"},{"location":"en/networking/simpleimpl/","title":"SimpleImpl","text":"<p>SimpleImpl is the name given to the packet system that revolves around the <code>SimpleChannel</code> class. Using this system is by far the easiest way to send custom data between clients and the server.</p>"},{"location":"en/networking/simpleimpl/#getting-started","title":"Getting Started","text":"<p>First you need to create your <code>SimpleChannel</code> object. We recommend that you do this in a separate class, possibly something like <code>ModidPacketHandler</code>. Create your <code>SimpleChannel</code> as a static field in this class, like so:</p> <pre><code>private static final String PROTOCOL_VERSION = \"1\";\npublic static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(\n  new ResourceLocation(\"mymodid\", \"main\"),\n  () -&gt; PROTOCOL_VERSION,\n  PROTOCOL_VERSION::equals,\n  PROTOCOL_VERSION::equals\n);</code></pre> <p>The first argument is a name for the channel. The second argument is a <code>Supplier&lt;String&gt;</code> returning the current network protocol version. The third and fourth arguments respectively are <code>Predicate&lt;String&gt;</code> checking whether an incoming connection protocol version is network-compatible with the client or server, respectively. Here, we simply compare with the <code>PROTOCOL_VERSION</code> field directly, meaning that the client and server <code>PROTOCOL_VERSION</code>s must always match or FML will deny login.</p>"},{"location":"en/networking/simpleimpl/#the-version-checker","title":"The Version Checker","text":"<p>If your mod does not require the other side to have a specific network channel, or to be a Forge instance at all, you should take care that you properly define your version compatibility checkers (the <code>Predicate&lt;String&gt;</code> parameters) to handle additional \u201cmeta-versions\u201d (defined in <code>NetworkRegistry</code>) that can be received by the version checker. These are:</p> <ul> <li><code>ABSENT</code> - if this channel is missing on the other endpoint. Note that in this case, the endpoint is still a Forge endpoint, and may have other mods.</li> <li><code>ACCEPTVANILLA</code> - if the endpoint is a vanilla (or non-Forge) endpoint.</li> </ul> <p>Returning <code>false</code> for both means that this channel must be present on the other endpoint. If you just copy the code above, this is what it does. Note that these values are also used during the list ping compatibility check, which is responsible for showing the green check / red cross in the multiplayer server select screen.</p>"},{"location":"en/networking/simpleimpl/#registering-packets","title":"Registering Packets","text":"<p>Next, we must declare the types of messages that we would like to send and receive. This is done using <code>INSTANCE#registerMessage</code>, which takes 5 parameters:</p> <ul> <li>The first parameter is the discriminator for the packet. This is a per-channel unique ID for the packet. We recommend you use a local variable to hold the ID, and then call registerMessage using <code>id++</code>. This will guarantee 100% unique IDs.</li> <li>The second parameter is the actual packet class <code>MSG</code>.</li> <li>The third parameter is a <code>BiConsumer&lt;MSG, FriendlyByteBuf&gt;</code> responsible for encoding the message into the provided <code>FriendlyByteBuf</code>.</li> <li>The fourth parameter is a <code>Function&lt;FriendlyByteBuf, MSG&gt;</code> responsible for decoding the message from the provided <code>FriendlyByteBuf</code>.</li> <li>The final parameter is a <code>BiConsumer&lt;MSG, Supplier&lt;NetworkEvent.Context&gt;&gt;</code> responsible for handling the message itself.</li> </ul> <p>The last three parameters can be method references to either static or instance methods in Java. Remember that an instance method <code>MSG#encode(FriendlyByteBuf)</code> still satisfies <code>BiConsumer&lt;MSG, FriendlyByteBuf&gt;</code>; the <code>MSG</code> simply becomes the implicit first argument.</p>"},{"location":"en/networking/simpleimpl/#handling-packets","title":"Handling Packets","text":"<p>There are a couple things to highlight in a packet handler. A packet handler has both the message object and the network context available to it. The context allows access to the player that sent the packet (if on the server), and a way to enqueue thread-safe work.</p> <pre><code>public static void handle(MyMessage msg, Supplier&lt;NetworkEvent.Context&gt; ctx) {\n  ctx.get().enqueueWork(() -&gt; {\n    // Work that needs to be thread-safe (most work)\n    ServerPlayer sender = ctx.get().getSender(); // the client that sent this packet\n    // Do stuff\n  });\n  ctx.get().setPacketHandled(true);\n}</code></pre> <p>Packets sent from the server to the client should be handled in another class and wrapped via <code>DistExecutor#unsafeRunWhenOn</code>.</p> <pre><code>// In Packet class\npublic static void handle(MyClientMessage msg, Supplier&lt;NetworkEvent.Context&gt; ctx) {\n  ctx.get().enqueueWork(() -&gt;\n    // Make sure it's only executed on the physical client\n    DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -&gt; () -&gt; ClientPacketHandlerClass.handlePacket(msg, ctx))\n  );\n  ctx.get().setPacketHandled(true);\n}\n\n// In ClientPacketHandlerClass\npublic static void handlePacket(MyClientMessage msg, Supplier&lt;NetworkEvent.Context&gt; ctx) {\n  // Do stuff\n}</code></pre> <p>Note the presence of <code>#setPacketHandled</code>, which is used to tell the network system that the packet has successfully completed handling.</p> <p>Warning</p> <p>As of Minecraft 1.8 packets are by default handled on the network thread.</p> <p>That means that your handler can not interact with most game objects directly. Forge provides a convenient way to make your code execute on the main thread instead through the supplied <code>NetworkEvent$Context</code>. Simply call <code>NetworkEvent$Context#enqueueWork(Runnable)</code>, which will call the given <code>Runnable</code> on the main thread at the next opportunity.</p> <p>Warning</p> <p>Be defensive when handling packets on the server. A client could attempt to exploit the packet handling by sending unexpected data.</p> <p>A common problem is vulnerability to arbitrary chunk generation. This typically happens when the server is trusting a block position sent by a client to access blocks and block entities. When accessing blocks and block entities in unloaded areas of the level, the server will either generate or load this area from disk, then promptly write it to disk. This can be exploited to cause catastrophic damage to a server\u2019s performance and storage space without leaving a trace.</p> <p>To avoid this problem, a general rule of thumb is to only access blocks and block entities if <code>Level#hasChunkAt</code> is true.</p>"},{"location":"en/networking/simpleimpl/#sending-packets","title":"Sending Packets","text":""},{"location":"en/networking/simpleimpl/#sending-to-the-server","title":"Sending to the Server","text":"<p>There is but one way to send a packet to the server. This is because there is only ever one server the client can be connected to at once. To do so, we must again use that <code>SimpleChannel</code> that was defined earlier. Simply call <code>INSTANCE.sendToServer(new MyMessage())</code>. The message will be sent to the handler for its type, if one exists.</p>"},{"location":"en/networking/simpleimpl/#sending-to-clients","title":"Sending to Clients","text":"<p>Packets can be sent directly to a client using the <code>SimpleChannel</code>: <code>HANDLER.sendTo(new MyClientMessage(), serverPlayer.connection.getConnection(), NetworkDirection.PLAY_TO_CLIENT)</code>. However, this can be quite inconvenient. Forge has some convenience functions that can be used:</p> <pre><code>// Send to one player\nINSTANCE.send(PacketDistributor.PLAYER.with(serverPlayer), new MyMessage());\n\n// Send to all players tracking this level chunk\nINSTANCE.send(PacketDistributor.TRACKING_CHUNK.with(levelChunk), new MyMessage());\n\n// Send to all connected players\nINSTANCE.send(PacketDistributor.ALL.noArg(), new MyMessage());</code></pre> <p>There are additional <code>PacketDistributor</code> types available; check the documentation on the <code>PacketDistributor</code> class for more details.</p>"},{"location":"en/rendering/modelextensions/facedata/","title":"Face Data","text":"<p>In a vanilla \u201celements\u201d model, additional data about an element\u2019s faces can be specified at either the element level or the face level. Faces which do not specify their own face data will fall back to the element\u2019s face data or a default if no face data is specified at the element level.</p> <p>To use this extension for a generated item model, the model must be loaded through the <code>forge:item_layers</code> model loader due to the vanilla item model generator not being extended to read this additional data.</p> <p>All values of the face data are optional.</p>"},{"location":"en/rendering/modelextensions/facedata/#elements-model","title":"Elements Model","text":"<p>In vanilla \u201celements\u201d models, the face data applies to the face it is specified in or all faces of the element it is specified in which don\u2019t have their own face data.</p> <p>Note</p> <p>If <code>forge_data</code> is specified on a face, it will not inherit any parameters from the element-level <code>forge_data</code> declaration.</p> <p>The additional data can be specified in the two ways shown in this example: <pre><code>{\n  \"elements\": [\n    {\n      \"forge_data\": {\n        \"color\": \"0xFFFF0000\",\n        \"block_light\": 15,\n        \"sky_light\": 15,\n        \"ambient_occlusion\": false\n      },\n      \"faces\": {\n        \"north\": {\n          \"forge_data\": {\n            \"color\": \"0xFFFF0000\",\n            \"block_light\": 15,\n            \"sky_light\": 15,\n            \"ambient_occlusion\": false\n          },\n          // ...\n        },\n        // ...\n      },\n      // ...\n    }\n  ]\n}</code></pre></p>"},{"location":"en/rendering/modelextensions/facedata/#generated-item-model","title":"Generated Item Model","text":"<p>In item models generated using the <code>forge:item_layers</code> loader, face data is specified for each texture layer and applies to all of the geometry (front/back facing quads and edge quads).</p> <p>The <code>forge_data</code> field must be located at the top level of the model JSON, with each key-value pair associating a face data object to a layer index.</p> <p>In the following example, layer 1 will be tinted red and glow at full brightness: <pre><code>{\n  \"textures\": {\n    \"layer0\": \"minecraft:item/stick\",\n    \"layer1\": \"minecraft:item/glowstone_dust\"\n  },\n  \"forge_data\": {\n    \"1\": {\n      \"color\": \"0xFFFF0000\",\n      \"block_light\": 15,\n      \"sky_light\": 15,\n      \"ambient_occlusion\": false\n    }\n  }\n}</code></pre></p>"},{"location":"en/rendering/modelextensions/facedata/#parameters","title":"Parameters","text":""},{"location":"en/rendering/modelextensions/facedata/#color","title":"Color","text":"<p>Specifying a color value with the <code>color</code> entry will apply that color as a tint to the quads. Defaults to <code>0xFFFFFFFF</code> (white, fully opaque). The color must be in the <code>ARGB</code> format packed into a 32-bit integer and can be specified as either a hexadecimal string (<code>\"0xAARRGGBB\"</code>) or as a decimal integer literal (JSON does not support hexadecimal integer literals).</p> <p>Warning</p> <p>The four color components are multiplied with the texture\u2019s pixels. Omitting the alpha component is equivalent to making it 0, which will make the geometry fully transparent.</p> <p>This can be used as a replacement for tinting with <code>BlockColor</code> and <code>ItemColor</code> if the color values are constant.</p>"},{"location":"en/rendering/modelextensions/facedata/#block-and-sky-light","title":"Block and Sky Light","text":"<p>Specifying a block and/or sky light value with the <code>block_light</code> and <code>sky_light</code> entry respectively will override the respective light value of the quads. Both values default to 0. The values must be in the range 0-15 (inclusive) and are treated as a minimum value for the respective light type when the face is rendered, meaning that a higher in-world value of the respective light type will override the specified value.</p> <p>The specified light values are purely client-side and affect neither the server\u2019s light level nor the brightness of surrounding blocks.</p>"},{"location":"en/rendering/modelextensions/facedata/#ambient-occlusion","title":"Ambient Occlusion","text":"<p>Specifying the <code>ambient_occlusion</code> flag will configure AO for the quads. Defaults to <code>true</code>. The behaviour of this flag is equivalent to the top-level <code>ambientocclusion</code> flag of the vanilla format.</p> <p> Ambient occlusion enabled on the left and disabled on the right, demonstrated with the Smooth Lighting graphics setting</p> <p>Note</p> <p>If the top-level AO flag is set to false, specifying this flag as true on an element or face won\u2019t be able to override the top-level flag. <pre><code>{\n  \"ambientocclusion\": false,\n  \"elements\": [\n    {\n      \"forge_data\": {\n        \"ambient_occlusion\": true // Has no effect\n      }\n    }\n  ]\n}</code></pre></p>"},{"location":"en/rendering/modelextensions/rendertypes/","title":"Render Types","text":"<p>Adding the <code>render_type</code> entry at the top level of the JSON suggests to the loader what render type the model should use. If not specified, the loader gets to pick the render type(s) used, often falling back to the render types returned by <code>ItemBlockRenderTypes#getRenderLayers()</code>.</p> <p>Custom model loaders may ignore this field entirely.</p> <p>Note</p> <p>Since 1.19 this is preferred over the deprecated method of setting the applicable render type(s) via <code>ItemBlockRenderTypes#setRenderLayer()</code> for blocks.</p> <p>Example of a model for a cutout block with the glass texture</p> <pre><code>{\n  \"render_type\": \"minecraft:cutout\",\n  \"parent\": \"block/cube_all\",\n  \"textures\": {\n    \"all\": \"block/glass\"\n  }\n}</code></pre>"},{"location":"en/rendering/modelextensions/rendertypes/#vanilla-values","title":"Vanilla Values","text":"<p>The following options with the respective chunk and entity render type are supplied by Forge (<code>NamedRenderTypeManager#preRegisterVanillaRenderTypes()</code>):</p> <ul> <li><code>minecraft:solid</code><ul> <li>Chunk render type: <code>RenderType#solid()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_SOLID</code></li> <li>Used for fully solid blocks (i.e. Stone)</li> </ul> </li> <li><code>minecraft:cutout</code><ul> <li>Chunk render type: <code>RenderType#cutout()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_CUTOUT</code></li> <li>Used for blocks where any given pixel is either fully transparent or fully opaque (i.e. Glass Block)</li> </ul> </li> <li><code>minecraft:cutout_mipped</code><ul> <li>Chunk render type: <code>RenderType#cutoutMipped()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_CUTOUT</code></li> <li>Chunk and entity render type differ due to mipmapping on the entity render type making items look weird</li> <li>Used for blocks where any given pixel is either fully transparent or fully opaque and the texture should be scaled down at larger distances (mipmapping) to avoid visual artifacts (i.e. Leaves)</li> </ul> </li> <li><code>minecraft:cutout_mipped_all</code><ul> <li>Chunk render type: <code>RenderType#cutoutMipped()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_CUTOUT_MIPPED</code></li> <li>Used in similar cases as <code>minecraft:cutout_mipped</code> when the item representation should also have mipmapping applied</li> </ul> </li> <li><code>minecraft:translucent</code><ul> <li>Chunk render type: <code>RenderType#translucent()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_TRANSLUCENT</code></li> <li>Used for blocks where any given pixel may be partially transparent (i.e. Stained Glass)</li> </ul> </li> <li><code>minecraft:tripwire</code><ul> <li>Chunk render type: <code>RenderType#tripwire()</code></li> <li>Entity render type: <code>ForgeRenderTypes#ITEM_LAYERED_TRANSLUCENT</code></li> <li>Chunk and entity render type differ due to the tripwire render type not being feasible as an entity render type</li> <li>Used for blocks with the special requirement of being rendered to the weather render target (i.e. Tripwire)</li> </ul> </li> </ul>"},{"location":"en/rendering/modelextensions/rendertypes/#custom-values","title":"Custom Values","text":"<p>Custom named render types to be specified in a model can be registered in the <code>RegisterNamedRenderTypesEvent</code>. This event is fired on the mod event bus.</p> <p>A custom named render type consists of two or three components:</p> <ul> <li>A chunk render type - any of the types in the list returned by <code>RenderType.chunkBufferLayers()</code> can be used</li> <li>A render type with the <code>DefaultVertexFormat.NEW_ENTITY</code> vertex format (\u201centity render type\u201d)</li> <li>A render type with the <code>DefaultVertexFormat.NEW_ENTITY</code> vertex format for use when the Fabulous! graphics mode is selected (optional)</li> </ul> <p>The chunk render type is used when a block using this named render type is rendered as part of the chunk geometry. The required entity render type is used when an item using this named render type is rendered in the Fast and Fancy graphics modes (inventory, ground, item frame, etc.). The optional entity render type is used the same way as the required entity render type when the Fabulous! graphics mode is selected. This render type is needed in cases where the required entity render type does not work in the Fabulous! graphics mode (typically only applies to translucent render types).</p> <pre><code>public static void onRegisterNamedRenderTypes(RegisterNamedRenderTypesEvent event)\n{\n  event.register(\"special_cutout\", RenderType.cutout(), Sheets.cutoutBlockSheet());\n  event.register(\"special_translucent\", RenderType.translucent(), Sheets.translucentCullBlockSheet(), Sheets.translucentItemSheet());\n}</code></pre> <p>These can then be addressed in JSON as <code>&lt;your_mod_id&gt;:special_cutout</code> and <code>&lt;your_mod_id&gt;:special_translucent</code>.</p>"},{"location":"en/rendering/modelextensions/transforms/","title":"Root Transforms","text":"<p>Adding the <code>transform</code> entry at the top level of a model JSON suggests to the loader that a transformation should be applied to all geometry right before the rotations in the blockstate file in the case of a block model, and before the display transforms in the case of an item model. The transformation is available through <code>IGeometryBakingContext#getRootTransform()</code> in <code>IUnbakedGeometry#bake()</code>.</p> <p>Custom model loaders may ignore this field entirely.</p> <p>The root transforms can be specified in two formats:</p> <ol> <li>A JSON object containing a singular <code>matrix</code> entry containing a raw transformation matrix in the form of a nested JSON array with the last row omitted (3*4 matrix, row major order). The matrix is the composition of the translation, left rotation, scale, right rotation and the transformation origin in that order. Example demonstrating the structure:     <pre><code>\"transform\": {\n    \"matrix\": [\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ]\n    ]\n}</code></pre></li> <li>A JSON object containing any combination of the following optional entries:<ul> <li><code>origin</code>: origin point used for the rotations and scaling</li> <li><code>translation</code>: relative translation</li> <li><code>rotation</code> or <code>left_rotation</code>: rotation around the translated origin to be applied before scaling</li> <li><code>scale</code>: scale relative to the translated origin</li> <li><code>right_rotation</code> or <code>post_rotation</code>: rotation around the translated origin to be applied after scaling</li> </ul> </li> </ol>"},{"location":"en/rendering/modelextensions/transforms/#element-wise-specification","title":"Element-wise specification","text":"<p>If the transformation is specified as a combination of the entries mentioned in option 4, these entries will be applied in the order of <code>translation</code>, <code>left_rotation</code>, <code>scale</code>, <code>right_rotation</code>. The transformation is moved to the specified origin as a last step.</p> <pre><code>{\n    \"transform\": {\n        \"origin\": \"center\",\n        \"translation\": [ 0, 0.5, 0 ],\n        \"rotation\": { \"y\": 45 }\n    },\n    // ...\n}</code></pre> <p>The elements are expected to be defined as follows:</p>"},{"location":"en/rendering/modelextensions/transforms/#origin","title":"Origin","text":"<p>The origin can be specified either as an array of 3 floating point values representing a three-dimensional vector: <code>[ x, y, z ]</code> or as one of the three default values:</p> <ul> <li><code>\"corner\"</code> (0, 0, 0)</li> <li><code>\"center\"</code> (.5, .5, .5)</li> <li><code>\"opposing-corner\"</code> (1, 1, 1)</li> </ul> <p>If the origin is not specified, it defaults to <code>\"opposing-corner\"</code>.</p>"},{"location":"en/rendering/modelextensions/transforms/#translation","title":"Translation","text":"<p>The translation must be specified as an array of 3 floating point values representing a three-dimensional vector: <code>[ x, y, z ]</code> and defaults to (0, 0, 0) if not present.</p>"},{"location":"en/rendering/modelextensions/transforms/#left-and-right-rotation","title":"Left and Right Rotation","text":"<p>The rotations can be specified in any one of the following four ways:</p> <ul> <li>Single JSON object with a single axis =&gt; rotation degree mapping: <code>{ \"x\": 90 }</code></li> <li>Array of an arbitrary amount of JSON objects with the above format (applied in the order they are specified in): <code>[ { \"x\": 90 }, { \"y\": 45 }, { \"x\": -22.5 } ]</code></li> <li>Array of 3 floating point values specifying the rotation in degrees around each axis: <code>[ 90, 180, 45 ]</code></li> <li>Array of 4 floating point values specifying a quaternion directly: <code>[ 0.38268346, 0, 0, 0.9238795 ]</code> (example equals 45 degrees around the X axis)</li> </ul> <p>If the respective rotation is not specified, it will default to no rotation.</p>"},{"location":"en/rendering/modelextensions/transforms/#scale","title":"Scale","text":"<p>The scale must be specified as an array of 3 floating point values representing a three-dimensional vector: <code>[ x, y, z ]</code> and defaults to (1, 1, 1) if not present.</p>"},{"location":"en/rendering/modelextensions/visibility/","title":"Part Visibility","text":"<p>Adding the <code>visibility</code> entry at the top level of a model JSON allows control over the visibility of different parts of the model to decide whether they should be baked into the final <code>BakedModel</code>. The definition of a \u201cpart\u201d is dependent on the model loader loading this model and custom model loaders are free to ignore this entry completely. Out of the model loaders provided by Forge only the composite model loader and the OBJ model loader make use of this functionality. The visibility entries are specified as <code>\"part name\": boolean</code> entries.</p> <p>Example of a composite model with two parts, the second of which will not be baked into the final model, and two child models overriding this visibility to have only the first part and both parts visible respectively: <pre><code>// mycompositemodel.json\n{\n  \"loader\": \"forge:composite\",\n  \"children\": {\n    \"part_one\": {\n      \"parent\": \"mymod:mypartmodel_one\"\n    },\n    \"part_two\": {\n      \"parent\": \"mymod:mypartmodel_two\"\n    }\n  },\n  \"visibility\": {\n    \"part_two\": false\n  }\n}\n\n// mycompositechild_one.json\n{\n  \"parent\": \"mymod:mycompositemodel\",\n  \"visibility\": {\n    \"part_one\": false,\n    \"part_two\": true\n  }\n}\n\n// mycompositechild_two.json\n{\n  \"parent\": \"mymod:mycompositemodel\",\n  \"visibility\": {\n    \"part_two\": true\n  }\n}</code></pre></p> <p>The visibility of a given part is determined by checking whether the model specifies a visibility for this part and, if not present, recursively checking the model\u2019s parent until either an entry is found or there is no further parent to check, in which case it defaults to true.</p> <p>This allows setups like the following where multiple models use different parts of a single composite model:</p> <ol> <li>A composite model specifies multiple components</li> <li>Multiple models specify this composite model as their parent</li> <li>These child models individually specify different visibilities for the parts</li> </ol>"},{"location":"en/rendering/modelloaders/","title":"Custom Model Loaders","text":"<p>A \u201cmodel\u201d is simply a shape. It can be a simple cube, it can be several cubes, it can be a truncated icosidodecahedron, or anything in between. Most models you\u2019ll see will be in the vanilla JSON format. Models in other formats are loaded into <code>IUnbakedGeometry</code>s by an <code>IGeometryLoader</code> at runtime. Forge provides default implementations for WaveFront OBJ files, buckets, composite models, models in different render layers, and a reimplementation of Vanilla\u2019s <code>builtin/generated</code> item model. Most things do not care about what loaded the model or what format it\u2019s in as they are all eventually represented by an <code>BakedModel</code> in code.</p> <p>Warning</p> <p>Specifying a custom model loader through the top-level <code>loader</code> entry in a model JSON will cause the <code>elements</code> entry to be ignored unless it is consumed by the custom loader. All other vanilla entries will still be loaded and available in the unbaked <code>BlockModel</code> representation and may be consumed outside of the custom loader.</p>"},{"location":"en/rendering/modelloaders/#wavefront-obj-models","title":"WaveFront OBJ Models","text":"<p>Forge adds a loader for the <code>.obj</code> file format. To use these models, the JSON must reference the <code>forge:obj</code> loader. This loader accepts any model location that is in a registered namespace and whose path ends in <code>.obj</code>. The <code>.mtl</code> file should be placed in the same location with the same name as the <code>.obj</code> to be used automatically. The <code>.mtl</code> file will probably have to be manually edited to change the paths pointing to textures defined within the JSON. Additionally, the V axis for textures may be flipped depending on the external program that created the model (i.e. V = 0 may be the bottom edge, not the top). This may be rectified in the modelling program itself or done in the model JSON like so:</p> <pre><code>{\n  // Add the following line on the same level as a 'model' declaration\n  \"loader\": \"forge:obj\",\n  \"flip_v\": true,\n  \"model\": \"examplemod:models/block/model.obj\",\n  \"textures\": {\n    // Can refer to in .mtl using #texture0\n    \"texture0\": \"minecraft:block/dirt\",\n    \"particle\": \"minecraft:block/dirt\"\n  }\n}</code></pre>"},{"location":"en/rendering/modelloaders/bakedmodel/","title":"<code>BakedModel</code>","text":"<p><code>BakedModel</code> is the result of calling <code>UnbakedModel#bake</code> for the vanilla model loader or <code>IUnbakedGeometry#bake</code> for custom model loaders. Unlike <code>UnbakedModel</code> or <code>IUnbakedGeometry</code>, which purely represents a shape without any concept of items or blocks, <code>BakedModel</code> is not as abstract. It represents geometry that has been optimized and reduced to a form where it is (almost) ready to go to the GPU. It can also process the state of an item or block to change the model.</p> <p>In a majority of cases, it is not really necessary to implement this interface manually. One can instead use one of the existing implementations.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#getoverrides","title":"<code>getOverrides</code>","text":"<p>Returns the <code>ItemOverrides</code> to use for this model. This is only used if this model is being rendered as an item.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#useambientocclusion","title":"<code>useAmbientOcclusion</code>","text":"<p>If the model is rendered as a block in the level, the block in question does not emit any light, and ambient occlusion is enabled. This causes the model to be rendered with ambient occlusion.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#isgui3d","title":"<code>isGui3d</code>","text":"<p>If the model is rendered as an item in an inventory, on the ground as an entity, on an item frame, etc., this makes the model look \u201cflat.\u201d In GUIs, this also disables the lighting.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#iscustomrenderer","title":"<code>isCustomRenderer</code>","text":"<p>Important</p> <p>Unless you know what you\u2019re doing, just <code>return false</code> from this and continue on.</p> <p>When rendering this as an item, returning <code>true</code> causes the model to not be rendered, instead falling back to <code>BlockEntityWithoutLevelRenderer#renderByItem</code>. For certain vanilla items such as chests and banners, this method is hardcoded to copy data from the item into a <code>BlockEntity</code>, before using a <code>BlockEntityRenderer</code> to render that BE in place of the item. For all other items, it will use the <code>BlockEntityWithoutLevelRenderer</code> instance provided by <code>IClientItemExtensions#getCustomRenderer</code>. Refer to BlockEntityWithoutLevelRenderer page for more information.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#getparticleicon","title":"<code>getParticleIcon</code>","text":"<p>Whatever texture should be used for the particles. For blocks, this shows when an entity falls on it, when it breaks, etc. For items, this shows when it breaks or when it\u2019s eaten.</p> <p>Important</p> <p>The vanilla method with no parameters has been deprecated in favor of <code>#getParticleIcon(ModelData)</code> since model data can have an effect on how a particular model might be rendered.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#gettransforms","title":"<code>getTransforms</code>","text":"<p>Deprecated in favor of implementing <code>#applyTransform</code>. The default implementation is fine if <code>#applyTransform</code> is implemented. See Transform.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#applytransform","title":"<code>applyTransform</code>","text":"<p>See Transform.</p>"},{"location":"en/rendering/modelloaders/bakedmodel/#getquads","title":"<code>getQuads</code>","text":"<p>This is the main method of <code>BakedModel</code>. It returns a list of <code>BakedQuad</code>s: objects which contain the low-level vertex data that will be used to render the model. If the model is being rendered as a block, then the <code>BlockState</code> passed in is non-null. If the model is being rendered as an item, the <code>ItemOverrides</code> returned from <code>#getOverrides</code> is responsible for handling the state of the item, and the <code>BlockState</code> parameter will be <code>null</code>.</p> <p>The <code>Direction</code> passed in is used for face culling. If the block against the given side of another block being rendered is opaque, then the faces associated with that side are not rendered. If that parameter is <code>null</code>, all faces not associated with a side are returned (that will never be culled).</p> <p>The <code>rand</code> parameter is an instance of Random.</p> <p>It also takes in a non null <code>ModelData</code> instance. This can be used to define extra data when rendering the specific model via <code>ModelProperty</code>s. For example, one such property is <code>CompositeModel$Data</code>, which is used to store any additional submodel data for a model using the <code>forge:composite</code> model loader.</p> <p>Note that this method is called very often: once for every combination of non-culled face and supported block render layer (anywhere between 0 to 28 times) per block in a level. This method should be as fast as possible, and should probably cache heavily.</p>"},{"location":"en/rendering/modelloaders/itemoverrides/","title":"<code>ItemOverrides</code>","text":"<p><code>ItemOverrides</code> provides a way for an <code>BakedModel</code> to process the state of an <code>ItemStack</code> and return a new <code>BakedModel</code>; thereafter, the returned model replaces the old one. <code>ItemOverrides</code> represents an arbitrary function <code>(BakedModel, ItemStack, ClientLevel, LivingEntity, int)</code> \u2192 <code>BakedModel</code>, making it useful for dynamic models. In vanilla, it is used to implement item property overrides.</p>"},{"location":"en/rendering/modelloaders/itemoverrides/#itemoverrides_1","title":"<code>ItemOverrides()</code>","text":"<p>Given a list of <code>ItemOverride</code>s, the constructor copies and bakes the list. The baked overrides may be accessed with <code>#getOverrides</code>.</p>"},{"location":"en/rendering/modelloaders/itemoverrides/#resolve","title":"<code>resolve</code>","text":"<p>This takes an <code>BakedModel</code>, an <code>ItemStack</code>, a <code>ClientLevel</code>, a <code>LivingEntity</code>, and an <code>int</code> to produce another <code>BakedModel</code> to use for rendering. This is where models can handle the state of their items.</p> <p>This should not mutate the level.</p>"},{"location":"en/rendering/modelloaders/itemoverrides/#getoverrides","title":"<code>getOverrides</code>","text":"<p>Returns an immutable list containing all the <code>BakedOverride</code>s used by this <code>ItemOverrides</code>. If none are applicable, this returns the empty list.</p>"},{"location":"en/rendering/modelloaders/itemoverrides/#bakedoverride","title":"<code>BakedOverride</code>","text":"<p>This class represents a vanilla item override, which holds several <code>ItemOverrides$PropertyMatcher</code> for the properties on an item and a model to use in case those matchers are satisfied. They are the objects in the <code>overrides</code> array of a vanilla item JSON model:</p> <pre><code>{\n  // Inside a vanilla JSON item model\n  \"overrides\": [\n    {\n      // This is an ItemOverride\n      \"predicate\": {\n        // This is the Map&lt;ResourceLocation, Float&gt;, containing the names of properties and their minimum values\n        \"example1:prop\": 0.5\n      },\n      // This is the 'location', or target model, of the override, which is used if the predicate above matches\n      \"model\": \"example1:item/model\"\n    },\n    {\n      // This is another ItemOverride\n      \"predicate\": {\n        \"example2:prop\": 1\n      },\n      \"model\": \"example2:item/model\"\n    }\n  ]\n}</code></pre>"},{"location":"en/rendering/modelloaders/transform/","title":"Transform","text":"<p>When an <code>BakedModel</code> is being rendered as an item, it can apply special handling depending on which transform it is being rendered in. \u201cTransform\u201d means in what context the model is being rendered. The possible transforms are represented in code by the <code>ItemDisplayContext</code> enum. There are two systems for handling transform: the deprecated vanilla system, constituted by <code>BakedModel#getTransforms</code>, <code>ItemTransforms</code>, and <code>ItemTransform</code>, and the Forge system, embodied by the method <code>IForgeBakedModel#applyTransform</code>. The vanilla code is patched to favor using <code>applyTransform</code> over the vanilla system whenever possible.</p>"},{"location":"en/rendering/modelloaders/transform/#itemdisplaycontext","title":"<code>ItemDisplayContext</code>","text":"<p><code>NONE</code> - Used for the display entity by default when no context is set and by Forge when a <code>Block</code>\u2018s <code>RenderShape</code> is set to <code>#ENTITYBLOCK_ANIMATED</code>.</p> <p><code>THIRD_PERSON_LEFT_HAND</code>/<code>THIRD_PERSON_RIGHT_HAND</code>/<code>FIRST_PERSON_LEFT_HAND</code>/<code>FIRST_PERSON_RIGHT_HAND</code> - The first person values represent when the player is holding the item in their own hand. The third person values represent when another player is holding the item and the client is looking at them in the 3rd person. Hands are self-explanatory.</p> <p><code>HEAD</code> - Represents when any player is wearing the item in the helmet slot (e.g. pumpkins).</p> <p><code>GUI</code> - Represents when the item is being rendered in a <code>Screen</code>.</p> <p><code>GROUND</code> - Represents when the item is being rendered in the level as an <code>ItemEntity</code>.</p> <p><code>FIXED</code> - Used for item frames.</p>"},{"location":"en/rendering/modelloaders/transform/#the-vanilla-way","title":"The Vanilla Way","text":"<p>The vanilla way of handling transform is through <code>BakedModel#getTransforms</code>. This method returns an <code>ItemTransforms</code>, which is a simple object that contains various <code>ItemTransform</code>s as <code>public final</code> fields. An <code>ItemTransform</code> represents a rotation, a translation, and a scale to be applied to the model. The <code>ItemTransforms</code> is a container for these, holding one for each of the <code>ItemDisplayContext</code>s except <code>NONE</code>. In the vanilla implementation, calling <code>#getTransform</code> for <code>NONE</code> results in the default transform, <code>ItemTransform#NO_TRANSFORM</code>.</p> <p>The entire vanilla system for handling transforms is deprecated by Forge, and most implementations of <code>BakedModel</code> should simply <code>return ItemTransforms#NO_TRANSFORMS</code> (which is the default implementation) from <code>BakedModel#getTransforms</code>. Instead, they should implement <code>#applyTransform</code>.</p>"},{"location":"en/rendering/modelloaders/transform/#the-forge-way","title":"The Forge Way","text":"<p>The Forge way of handling transforms is <code>#applyTransform</code>, a method patched into <code>BakedModel</code>. It supersedes the <code>#getTransforms</code> method.</p>"},{"location":"en/rendering/modelloaders/transform/#bakedmodelapplytransform","title":"<code>BakedModel#applyTransform</code>","text":"<p>Given a <code>ItemDisplayContext</code>, <code>PoseStack</code>, and a boolean to determine whether to apply the transform for the left hand, this method produces an <code>BakedModel</code> to be rendered. Because the returned <code>BakedModel</code> can be a totally new model, this method is more flexible than the vanilla method (e.g. a piece of paper that looks flat in hand but crumpled on the ground).</p>"},{"location":"en/resources/client/","title":"Resource Packs","text":"<p>Resource Packs allow for the customization of client resources through the <code>assets</code> directory. This includes textures, models, sounds, localizations, and others. Your mod (as well as Forge itself) can also have resource packs. Any user can therefore modify all the textures, models, and other assets defined within this directory.</p>"},{"location":"en/resources/client/#creating-a-resource-pack","title":"Creating a Resource Pack","text":"<p>Resource Packs are stored within your project\u2019s resources. The <code>assets</code> directory contains the contents of the pack, while the pack itself is defined by the <code>pack.mcmeta</code> alongside the <code>assets</code> folder. Your mod can have multiple asset domains, since you can add or modify already existing resource packs, like vanilla\u2019s, Forge\u2019s, or another mod\u2019s. You can then follow the steps found at the Minecraft Wiki to create any resource pack.</p> <p>Additional reading: Resource Locations</p>"},{"location":"en/resources/client/models/","title":"Models","text":"<p>The model system is Minecraft\u2019s way of giving blocks and items their shapes. Through the model system, blocks and items are mapped to their models, which define how they look. One of the main goals of the model system is to allow not only textures but the entire shape of a block/item to be changed by resource packs. Indeed, any mod that adds items or blocks also contains a mini-resource pack for their blocks and items.</p>"},{"location":"en/resources/client/models/#model-files","title":"Model Files","text":"<p>Models and textures are linked through <code>ResourceLocation</code>s but are stored in the <code>ModelManager</code> using <code>ModelResourceLocation</code>s. Models are referenced in different locations through the block or item\u2019s registry name depending on whether they are referencing block states or item models. Blocks will have their <code>ModelResourceLocation</code> represent their registry name along with a stringified version of its current <code>BlockState</code> while items will use their registry name followed by <code>inventory</code>.</p> <p>Note</p> <p>JSON models only support cuboid elements; there is no way to express a triangular wedge or anything like it. To have more complicated models, another format must be used.</p>"},{"location":"en/resources/client/models/#textures","title":"Textures","text":"<p>Textures, like models, are contained within resource packs and are referred to with <code>ResourceLocation</code>s. In Minecraft, the UV coordinates (0,0) are taken to mean the top-left corner. UVs are always from 0 to 16. If a texture is larger or smaller, the coordinates are scaled to fit. A texture should also be square, and the side length of a texture should be a power of two, as doing otherwise breaks mipmapping (e.g. 1x1, 2x2, 8x8, 16x16, and 128x128 are good. 5x5 and 30x30 are not recommended because they are not powers of 2. 5x10 and 4x8 are completely broken as they are not square.). Textures should only ever be not a square if it is animated.</p>"},{"location":"en/resources/client/models/itemproperties/","title":"Item Properties","text":"<p>Item properties are a way for the \u201cproperties\u201d of items to be exposed to the model system. An example is the bow, where the most important property is how far the bow has been pulled. This information is then used to choose a model for the bow, creating an animation for pulling it.</p> <p>An item property assigns a certain <code>float</code> value to every <code>ItemStack</code> it is registered for, and vanilla item model definitions can use these values to define \u201coverrides\u201d, where an item defaults to a certain model, but if an override matches, it overrides the model and uses another. They are useful mainly because they are continuous. For example, bows use item properties to define their pull animation. The item models are decided by the \u2018float\u2019 number predicates, it is not limited but generally between <code>0.0F</code> and <code>1.0F</code>. This allows resource packs to add as many models as they want for the bow pulling animation along that spectrum, instead of being stuck with four \u201cslots\u201d for their models in the animation. The same is true of the compass and clock.</p>"},{"location":"en/resources/client/models/itemproperties/#adding-properties-to-items","title":"Adding Properties to Items","text":"<p><code>ItemProperties#register</code> is used to add a property to a certain item. The <code>Item</code> parameter is the item the property is being attached to (e.g. <code>ExampleItems#APPLE</code>). The <code>ResourceLocation</code> parameter is the name given to the property (e.g. <code>new ResourceLocation(\"pull\")</code>). The <code>ItemPropertyFunction</code> is a functional interface that takes the <code>ItemStack</code>, the <code>ClientLevel</code> it is in (may be null), the <code>LivingEntity</code> that holds it (may be null), and the <code>int</code> containing the id of the holding entity (may be <code>0</code>), returning the <code>float</code> value for the property. For modded item properties, it is recommended that the mod id of the mod is used as the namespace (e.g. <code>examplemod:property</code> and not just <code>property</code>, as that really means <code>minecraft:property</code>). These should be done in <code>FMLClientSetupEvent</code>. There\u2019s also another method <code>ItemProperties#registerGeneric</code> that is used to add properties to all items, and it does not take <code>Item</code> as its parameter since all items will apply this property.</p> <p>Important</p> <p>Use <code>FMLClientSetupEvent#enqueueWork</code> to proceed with the tasks, since the data structures in <code>ItemProperties</code> are not thread-safe.</p> <p>Note</p> <p><code>ItemPropertyFunction</code> is deprecated by Mojang in favor of using the subinterface <code>ClampedItemPropertyFunction</code> which clamps the result between <code>0</code> and <code>1</code>.</p>"},{"location":"en/resources/client/models/itemproperties/#using-overrides","title":"Using Overrides","text":"<p>The format of an override can be seen on the wiki, and a good example can be found in <code>model/item/bow.json</code>. For reference, here is a hypothetical example of an item with an <code>examplemod:power</code> property. If the values have no match, the default is the current model, but if there are multiple matches, the last match in the list will be selected.</p> <p>Important</p> <p>A predicate applies to all values greater than or equal to the given value.</p> <pre><code>{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    // Default\n    \"layer0\": \"examplemod:items/example_partial\"\n  },\n  \"overrides\": [\n    {\n      // power &gt;= .75\n      \"predicate\": {\n        \"examplemod:power\": 0.75\n      },\n      \"model\": \"examplemod:item/example_powered\"\n    }\n  ]\n}</code></pre> <p>And here is a hypothetical snippet from the supporting code. Unlike the older versions (lower than 1.16.x), this needs to be done on client side only because <code>ItemProperties</code> does not exist on server.</p> <pre><code>private void setup(final FMLClientSetupEvent event)\n{\n  event.enqueueWork(() -&gt;\n  {\n    ItemProperties.register(ExampleItems.APPLE, \n      new ResourceLocation(ExampleMod.MODID, \"pulling\"), (stack, level, living, id) -&gt; {\n        return living != null &amp;&amp; living.isUsingItem() &amp;&amp; living.getUseItem() == stack ? 1.0F : 0.0F;\n      });\n  });\n}</code></pre>"},{"location":"en/resources/client/models/tinting/","title":"Coloring Textures","text":"<p>Many blocks and items in vanilla change their texture color depending on where they are or what properties they have, such as grass. Models support specifying \u201ctint indices\u201d on faces, which are integers that can then be handled by <code>BlockColor</code>s and <code>ItemColor</code>s. See the wiki for information on how tint indices are defined in vanilla models.</p>"},{"location":"en/resources/client/models/tinting/#blockcoloritemcolor","title":"<code>BlockColor</code>/<code>ItemColor</code>","text":"<p>Both of these are single-method interfaces. <code>BlockColor</code> takes a <code>BlockState</code>, a (nullable) <code>BlockAndTintGetter</code>, and a (nullable) <code>BlockPos</code>. <code>ItemColor</code> takes an <code>ItemStack</code>. Both of them take an <code>int</code> parameter <code>tintIndex</code>, which is the tint index of the face being colored. Both of them return an <code>int</code>, a color multiplier. This <code>int</code> is treated as 4 unsigned bytes, alpha, red, green, and blue, in that order, from most significant byte to least. For each pixel in the tinted face, the value of each color channel is <code>(int)((float) base * multiplier / 255.0)</code>, where <code>base</code> is the original value for the channel, and <code>multiplier</code> is the associated byte from the color multiplier. Note that blocks do not use the alpha channel. For example, the grass texture, untinted, looks white and gray. The <code>BlockColor</code> and <code>ItemColor</code> for grass return color multipliers with low red and blue components, but high alpha and green components, (at least in warm biomes) so when the multiplication is performed, the green is brought out and the red/blue diminished.</p> <p>If an item inherits from the <code>builtin/generated</code> model, each layer (\u201clayer0\u201d, \u201clayer1\u201d, etc.) has a tint index corresponding to its layer index.</p>"},{"location":"en/resources/client/models/tinting/#creating-color-handlers","title":"Creating Color Handlers","text":"<p><code>BlockColor</code>s need to be registered to the <code>BlockColors</code> instance of the game. <code>BlockColors</code> can be acquired through <code>RegisterColorHandlersEvent$Block</code>, and an <code>BlockColor</code> can be registered by <code>#register</code>. Note that this does not cause the <code>BlockItem</code> for the given block to be colored. <code>BlockItem</code>s are items and need to be colored with an <code>ItemColor</code>.</p> <pre><code>@SubscribeEvent\npublic void registerBlockColors(RegisterColorHandlersEvent.Block event){\n  event.register(myBlockColor, coloredBlock1, coloredBlock2, ...);\n}</code></pre> <p><code>ItemColor</code>s need to be registered to the <code>ItemColors</code> instance of the game. <code>ItemColors</code> can be acquired through <code>RegisterColorHandlersEvent$Item</code>, and an <code>ItemColor</code> can be registered by <code>#register</code>. This method is overloaded to also take <code>Block</code>s, which simply registers the color handler for the item <code>Block#asItem</code> (i.e. the block\u2019s <code>BlockItem</code>).</p> <pre><code>@SubscribeEvent\npublic void registerItemColors(RegisterColorHandlersEvent.Item event){\n  event.register(myItemColor, coloredItem1, coloredItem2, ...);\n}</code></pre>"},{"location":"en/resources/server/","title":"Datapacks","text":"<p>In 1.13, Mojang added datapacks to the base game. They allow for the modification of the files for logical servers through the <code>data</code> directory. This includes advancements, loot_tables, structures, recipes, tags, etc. Forge, and your mod, can also have datapacks. Any user can therefore modify all the recipes, loot tables, and other data defined within this directory.</p>"},{"location":"en/resources/server/#creating-a-datapack","title":"Creating a Datapack","text":"<p>Datapacks are stored within the <code>data</code> directory within your project\u2019s resources. Your mod can have multiple data domains, since you can add or modify already existing datapacks, like vanilla\u2019s, forge\u2019s, or another mod\u2019s. You can then follow the steps found here to create any datapack.</p> <p>Additional reading: Resource Locations</p>"},{"location":"en/resources/server/advancements/","title":"Advancements","text":"<p>Advancements are tasks that can be achieved by the player which may advance the progress of the game. Advancements can trigger based on any action the player may be directly involved in.</p> <p>All advancement implementations within vanilla are data driven via JSON. This means that a mod is not necessary to create a new advancement, only a data pack. A full list on how to create and put these advancements within the mod\u2019s <code>resources</code> can be found on the Minecraft Wiki. Additionally, advancements can be loaded conditionally and defaulted depending on what information is present (mod loaded, item exists, etc.).</p>"},{"location":"en/resources/server/advancements/#advancement-criteria","title":"Advancement Criteria","text":"<p>To unlock an advancement, the specified criteria must be met. Criteria are tracked through triggers which execute when a certain action is performed: killing an entity, changing an inventory, breading animals, etc. Any time an advancement is loaded into the game, the criteria defined are read and added as listeners to the trigger. Afterwards a trigger function is called (usually named <code>#trigger</code>) which checks all listeners as to whether the current state meets the conditions of the advancement criteria. The criteria listeners for the advancement are only removed once the advancement has been obtained by completing all requirements.</p> <p>Requirements are defined as an array of string arrays representing the name of the criteria specified on the advancement. An advancement is completed once one string array of criteria has been met:</p> <pre><code>// In some advancement JSON\n\n// List of defined criteria to meet\n\"criteria\": {\n  \"example_criterion1\": { /*...*/ },\n  \"example_criterion2\": { /*...*/ },\n  \"example_criterion3\": { /*...*/ },\n  \"example_criterion4\": { /*...*/ }\n},\n\n// This advancement is only unlocked once\n// - Criteria 1 AND 2 have been met\n// OR\n// - Criteria 3 and 4 have been met\n\"requirements\": [\n  [\n    \"example_criterion1\",\n    \"example_criterion2\"\n  ],\n  [\n    \"example_criterion3\",\n    \"example_criterion4\"\n  ]\n]</code></pre> <p>A list of criteria triggers defined by vanilla can be found in <code>CriteriaTriggers</code>. Additionally, the JSON formats are defined on the Minecraft Wiki.</p>"},{"location":"en/resources/server/advancements/#custom-criteria-triggers","title":"Custom Criteria Triggers","text":"<p>Custom criteria triggers can be created by implementing <code>SimpleCriterionTrigger</code> for the created <code>AbstractCriterionTriggerInstance</code> subclass.</p>"},{"location":"en/resources/server/advancements/#abstractcriteriontriggerinstance-subclass","title":"AbstractCriterionTriggerInstance Subclass","text":"<p>The <code>AbstractCriterionTriggerInstance</code> represents a single criteria defined in the <code>criteria</code> object. Trigger instances are responsible for holding the defined conditions, returning whether the inputs match the condition, and writing the instance to JSON for data generation.</p> <p>Conditions are usually passed in through the constructor. The <code>AbstractCriterionTriggerInstance</code> super constructor requires the instance to define the registry name of the trigger and the conditions the player must meet as an <code>EntityPredicate$Composite</code>. The registry name of the trigger should be supplied to the super directly while the conditions of the player should be a constructor parameter.</p> <pre><code>// Where ID is the registry name of the trigger\npublic ExampleTriggerInstance(EntityPredicate.Composite player, ItemPredicate item) {\n  super(ID, player);\n  // Store the item condition that must be met\n}</code></pre> <p>Note</p> <p>Typically, trigger instances have a static constructor which allow these instances to be easily created for data generation. These static factory methods can also be statically imported instead of the class itself.</p> <pre><code>public static ExampleTriggerInstance instance(EntityPredicate.Builder playerBuilder, ItemPredicate.Builder itemBuilder) {\n  return new ExampleTriggerInstance(EntityPredicate.Composite.wrap(playerBuilder.build()), itemBuilder.build());\n}</code></pre> <p>Additionally, the <code>#serializeToJson</code> method should be overridden. The method should add the conditions of the instance to the other JSON data.</p> <pre><code>@Override\npublic JsonObject serializeToJson(SerializationContext context) {\n  JsonObject obj = super.serializeToJson(context);\n  // Write conditions to json\n  return obj;\n}</code></pre> <p>Finally, a method should be added which takes in the current data state and returns whether the user has met the necessary conditions. The conditions of the player are already checked through <code>SimpleCriterionTrigger#trigger(ServerPlayer, Predicate)</code>. Most trigger instances call this method <code>#matches</code>.</p> <pre><code>// This method is unique for each instance and is as such not overridden\npublic boolean matches(ItemStack stack) {\n  // Since ItemPredicate matches a stack, a stack is the input\n  return this.item.matches(stack);\n}</code></pre>"},{"location":"en/resources/server/advancements/#simplecriteriontrigger","title":"SimpleCriterionTrigger","text":"<p>The <code>SimpleCriterionTrigger&lt;T&gt;</code> subclass, where <code>T</code> is the type of the trigger instance, is responsible for specifying the registry name of the trigger, creating a trigger instance, and a method to check trigger instances and run attached listeners on success.</p> <p>The registry name of the trigger is supplied to <code>#getId</code>. This should match the registry name supplied to the trigger instance.</p> <p>A trigger instance is created via <code>#createInstance</code>. This method reads a criteria from JSON.</p> <pre><code>@Override\npublic ExampleTriggerInstance createInstance(JsonObject json, EntityPredicate.Composite player, DeserializationContext context) {\n  // Read conditions from JSON: item\n  return new ExampleTriggerInstance(player, item);\n}</code></pre> <p>Finally, a method is defined to check all trigger instances and run the listeners if their condition is met. This method takes in the <code>ServerPlayer</code> and whatever other data defined by the matching method in the <code>AbstractCriterionTriggerInstance</code> subclass. This method should internally call <code>SimpleCriterionTrigger#trigger</code> to properly handle checking all listeners. Most trigger instances call this method <code>#trigger</code>.</p> <pre><code>// This method is unique for each trigger and is as such not overridden\npublic void trigger(ServerPlayer player, ItemStack stack) {\n  this.trigger(player,\n    // The condition checker method within the AbstractCriterionTriggerInstance subclass\n    triggerInstance -&gt; triggerInstance.matches(stack)\n  );\n}</code></pre> <p>Afterwards, an instance should be registered using <code>CriteriaTriggers#register</code> during <code>FMLCommonSetupEvent</code>.</p> <p>Important</p> <p><code>CriteriaTriggers#register</code> must be enqueued to the synchronous work queue via <code>FMLCommonSetupEvent#enqueueWork</code> as the method is not thread-safe.</p>"},{"location":"en/resources/server/advancements/#calling-the-trigger","title":"Calling the Trigger","text":"<p>Whenever the action being checked is performed, the <code>#trigger</code> method defined by the <code>SimpleCriterionTrigger</code> subclass should be called.</p> <pre><code>// In some piece of code where the action is being performed\n// Where EXAMPLE_CRITERIA_TRIGGER is the custom criteria trigger\npublic void performExampleAction(ServerPlayer player, ItemStack stack) {\n  // Run code to perform action\n  EXAMPLE_CRITERIA_TRIGGER.trigger(player, stack);\n}</code></pre>"},{"location":"en/resources/server/advancements/#advancement-rewards","title":"Advancement Rewards","text":"<p>When an advancement is completed, rewards may be given out. These can be a combination of experience points, loot tables, recipes for the recipe book, or a function executed as a creative player.</p> <pre><code>// In some advancement JSON\n\"rewards\": {\n  \"experience\": 10,\n  \"loot\": [\n    \"minecraft:example_loot_table\",\n    \"minecraft:example_loot_table2\"\n    // ...\n  ],\n  \"recipes\": [\n    \"minecraft:example_recipe\",\n    \"minecraft:example_recipe2\"\n    // ...\n  ],\n  \"function\": \"minecraft:example_function\"\n}</code></pre>"},{"location":"en/resources/server/conditional/","title":"Conditionally-Loaded Data","text":"<p>There are times when modders may want to include data-driven objects using information from another mod without having to explicitly make that mod a dependency. Other cases may be to swap out certain objects with other modded entries when they are present. This can be done through the conditional subsystem.</p>"},{"location":"en/resources/server/conditional/#implementations","title":"Implementations","text":"<p>Currently, conditional loading is implemented for recipes and advancements. For any conditional recipe or advancement, a list of conditions to datum pair is loaded. If the conditions specified for a datum in the list is true, then that datum is returned. Otherwise, the datum is discarded.</p> <pre><code>{\n  // The type needs to be specified for recipes as they can have custom serializers\n  // Advancements do not need this type\n  \"type\": \"forge:conditional\",\n\n  \"recipes\": [ // Or 'advancements' for Advancements\n    {\n      // The conditions to check\n      \"conditions\": [\n        // Conditions in the list are ANDed together\n        {\n          // Condition 1\n        },\n        {\n          // Condition 2\n        }\n      ],\n      \"recipe\": { // Or 'advancement' for Advancements\n        // The recipe to use if all conditions succeed\n      }\n    },\n    {\n      // Next condition to check if the previous fails\n    },\n  ]\n}</code></pre> <p>Conditionally-loaded data additionally have wrappers for data generation through <code>ConditionalRecipe$Builder</code> and <code>ConditionalAdvancement$Builder</code>.</p>"},{"location":"en/resources/server/conditional/#conditions","title":"Conditions","text":"<p>Conditions are specified by setting <code>type</code> to the name of the condition as specified by <code>IConditionSerializer#getID</code>.</p>"},{"location":"en/resources/server/conditional/#true-and-false","title":"True and False","text":"<p>Boolean conditions consist of no data and return the expected value of the condition. They are represented by <code>forge:true</code> and <code>forge:false</code>.</p> <pre><code>// For some condition\n{\n  // Will always return true (or false for 'forge:false')\n  \"type\": \"forge:true\"\n}</code></pre>"},{"location":"en/resources/server/conditional/#not-and-and-or","title":"Not, And, and Or","text":"<p>Boolean operator conditions consist of the condition(s) being operated upon and apply the following logic. They are represented by <code>forge:not</code>, <code>forge:and</code>, and <code>forge:or</code>.</p> <pre><code>// For some condition\n{\n  // Inverts the result of the stored condition\n  \"type\": \"forge:not\",\n  \"value\": {\n    // A condition\n  }\n}</code></pre> <pre><code>// For some condition\n{\n  // ANDs the stored conditions together (or ORs for 'forge:or')\n  \"type\": \"forge:and\",\n  \"values\": [\n    {\n      // First condition\n    },\n    {\n      // Second condition to be ANDed (or ORed for 'forge:or')\n    }\n  ]\n}</code></pre>"},{"location":"en/resources/server/conditional/#mod-loaded","title":"Mod Loaded","text":"<p><code>ModLoadedCondition</code> returns true whenever the specified mod with the given id is loaded in the current application. This is represented by <code>forge:mod_loaded</code>.</p> <pre><code>// For some condition\n{\n  \"type\": \"forge:mod_loaded\",\n   // Returns true if 'examplemod' is loaded\n  \"modid\": \"examplemod\"\n}</code></pre>"},{"location":"en/resources/server/conditional/#item-exists","title":"Item Exists","text":"<p><code>ItemExistsCondition</code> returns true whenever the given item has been registered in the current application. This is represented by <code>forge:item_exists</code>.</p> <pre><code>// For some condition\n{\n  \"type\": \"forge:item_exists\",\n   // Returns true if 'examplemod:example_item' has been registered\n  \"item\": \"examplemod:example_item\"\n}</code></pre>"},{"location":"en/resources/server/conditional/#tag-empty","title":"Tag Empty","text":"<p><code>TagEmptyCondition</code> returns true whenever the given item tag has no items within it. This is represented by <code>forge:tag_empty</code>.</p> <pre><code>// For some condition\n{\n  \"type\": \"forge:tag_empty\",\n   // Returns true if 'examplemod:example_tag' is an item tag with no entries\n  \"tag\": \"examplemod:example_tag\"\n}</code></pre>"},{"location":"en/resources/server/conditional/#creating-custom-conditions","title":"Creating Custom Conditions","text":"<p>Custom conditions can be created by implementing <code>ICondition</code> and its associated <code>IConditionSerializer</code>.</p>"},{"location":"en/resources/server/conditional/#icondition","title":"ICondition","text":"<p>Any condition only need to implement two methods:</p> Method Description getID The registry name of the condition. Must be equivalent to <code>IConditionSerializer#getID</code>. Used only for data generation. test Returns true if the condition has been satisfied. <p>Note</p> <p>Every <code>#test</code> has access to some <code>IContext</code> representing the state of the game. Currently, only tags can be obtained from a registry.</p>"},{"location":"en/resources/server/conditional/#iconditionserializer","title":"IConditionSerializer","text":"<p>Serializers need to implement three methods:</p> Method Description getID The registry name of the condition. Must be equivalent to <code>ICondition#getID</code>. read Reads the condition data from JSON. write Writes the given condition data to JSON. <p>Note</p> <p>Condition serializers are not responsible for writing or reading the type of the serializer, similar to other serializer implementations in Minecraft.</p> <p>Afterwards, a static instance should be declared to hold the initialized serializer and then registered using <code>CraftingHelper#register</code> either during the <code>RegisterEvent</code> for <code>RecipeSerializer</code>s or during <code>FMLCommonSetupEvent</code>.</p> <pre><code>// In some serializer class\npublic static final ExampleConditionSerializer INSTANCE = new ExampleConditionSerializer();\n\n// In some handler class\npublic void registerSerializers(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS,\n    helper -&gt; CraftingHelper.register(INSTANCE)\n  );\n}</code></pre> <p>Important</p> <p>If using <code>FMLCommonSetupEvent</code> to register a condition serializer, it must be enqueued to the synchronous work queue via <code>FMLCommonSetupEvent#enqueueWork</code> as <code>CraftingHelper#register</code> is not thread-safe.</p>"},{"location":"en/resources/server/glm/","title":"Global Loot Modifiers","text":"<p>Global Loot Modifiers are a data-driven method of handling modification of harvested drops without the need to overwrite dozens to hundreds of vanilla loot tables or to handle effects that would require interactions with another mod\u2019s loot tables without knowing what mods may be loaded. Global Loot Modifiers are also stacking, rather than last-load-wins, similar to tags.</p>"},{"location":"en/resources/server/glm/#registering-a-global-loot-modifier","title":"Registering a Global Loot Modifier","text":"<p>You will need 4 things:</p> <ol> <li>Create a <code>global_loot_modifiers.json</code>.<ul> <li>This will tell Forge about your modifiers and works similar to tags.</li> </ul> </li> <li>A serialized json representing your modifier.<ul> <li>This will contain all of the data about your modification and allows data packs to tweak your effect.</li> </ul> </li> <li>A class that extends <code>IGlobalLootModifier</code>.<ul> <li>The operational code that makes your modifier work. Most modders can extend <code>LootModifier</code> as it supplies base functionality.</li> </ul> </li> <li>Finally, a codec to encode and decode your operational class.<ul> <li>This is registered as any other <code>IForgeRegistryEntry</code>.</li> </ul> </li> </ol>"},{"location":"en/resources/server/glm/#the-global_loot_modifiersjson","title":"The <code>global_loot_modifiers.json</code>","text":"<p>The <code>global_loot_modifiers.json</code> represents all loot modifiers to be loaded into the game. This file MUST be placed within <code>data/forge/loot_modifiers/global_loot_modifiers.json</code>.</p> <p>Important</p> <p><code>global_loot_modifiers.json</code> will only be read in the <code>forge</code> namespace. The file will be neglected if it is under the mod\u2019s namespace.</p> <p><code>entries</code> is an ordered list of the modifiers that will be loaded. The ResourceLocations specified points to their associated entry within <code>data/&lt;namespace&gt;/loot_modifiers/&lt;path&gt;.json</code>. This is primarily relevant to data pack makers for resolving conflicts between modifiers from separate mods.</p> <p><code>replace</code>, when <code>true</code>, changes the behavior from appending loot modifiers to the global list to replacing the global list entries entirely. Modders will want to use <code>false</code> for compatibility with other mod implementations. Datapack makers may want to specify their overrides with <code>true</code>.</p> <pre><code>{\n  \"replace\": false, // Must be present\n  \"entries\": [\n    // Represents a loot modifier in 'data/examplemod/loot_modifiers/example_glm.json'\n    \"examplemod:example_glm\",\n    \"examplemod:example_glm2\"\n    // ...\n  ]\n}</code></pre>"},{"location":"en/resources/server/glm/#the-serialized-json","title":"The Serialized JSON","text":"<p>This file contains all of the potential variables related to your modifier, including the conditions that must be met prior to modifying any loot. Avoid hard-coded values wherever possible so that data pack makers can adjust balance if they wish to.</p> <p><code>type</code> represents the registry name of the codec used to read the associated JSON file. This must always be present.</p> <p><code>conditions</code> should represent the loot table conditions for this modifier to activate. Conditions should avoid being hardcoded to allow datapack creators as much flexibility to adjust the criteria. This must also be always present.</p> <p>Important</p> <p>Although <code>conditions</code> should represent what is needed for the modifier to activate, this is only the case if using the bundled Forge classes. If using <code>LootModifier</code> as a subclass, all conditions will be ANDed together and checked to see if the modifier should be applied.</p> <p>Any additional properties read by the serializer and defined by the modifier can also be specified.</p> <pre><code>// Within data/examplemod/loot_modifiers/example_glm.json\n{\n  \"type\": \"examplemod:example_loot_modifier\",\n  \"conditions\": [\n    // Normal loot table conditions\n    // ...\n  ],\n  \"prop1\": \"val1\",\n  \"prop2\": 10,\n  \"prop3\": \"minecraft:dirt\"\n}</code></pre>"},{"location":"en/resources/server/glm/#igloballootmodifier","title":"<code>IGlobalLootModifier</code>","text":"<p>To supply the functionality a global loot modifier specifies, a <code>IGlobalLootModifier</code> implementation must be specified. These are instances generated each time a serializer decodes the information from JSON and supplies it into this object.</p> <p>There are two methods that needs to be defined in order to create a new modifier: <code>#apply</code> and <code>#codec</code>. <code>#apply</code> takes in the current loot that will be generated along with the context information such as the currently level or additional defined parameters. It returns the list of drops to generate.</p> <p>Note</p> <p>The returned list of drops from any one modifier is fed into other modifiers in the order they are registered. As such, modified loot can be modified by another loot modifier.</p> <p><code>#codec</code> returns the registered codec used to encode and decode the modifier to/from JSON.</p>"},{"location":"en/resources/server/glm/#the-lootmodifier-subclass","title":"The <code>LootModifier</code> Subclass","text":"<p><code>LootModifier</code> is an abstract implementation of <code>IGlobalLootModifier</code> to provide the base functionality which most modders can easily extend and implement. This expands upon the existing interface by defining the <code>#apply</code> method to check the conditions to determine whether or not to modify the generated loot.</p> <p>There are two things of note within the subclass implementation: the constructor which must take in an array of <code>LootItemCondition</code>s and the <code>#doApply</code> method.</p> <p>The array of <code>LootItemCondition</code>s define the list of conditions that must be true before the loot can be modified. The supplied conditions are ANDed together, meaning that all conditions must be true.</p> <p>The <code>#doApply</code> method works the same as the <code>#apply</code> method except that it only executes once all conditions return true.</p> <pre><code>public class ExampleModifier extends LootModifier {\n\n  public ExampleModifier(LootItemCondition[] conditionsIn, String prop1, int prop2, Item prop3) {\n    super(conditionsIn);\n    // Store the rest of the parameters\n  }\n\n  @NotNull\n  @Override\n  protected ObjectArrayList&lt;ItemStack&gt; doApply(ObjectArrayList&lt;ItemStack&gt; generatedLoot, LootContext context) {\n    // Modify the loot and return the new drops\n  }\n\n  @Override\n  public Codec&lt;? extends IGlobalLootModifier&gt; codec() {\n    // Return the codec used to encode and decode this modifier\n  }\n}</code></pre>"},{"location":"en/resources/server/glm/#the-loot-modifier-codec","title":"The Loot Modifier Codec","text":"<p>The connector between the JSON and the <code>IGlobalLootModifier</code> instance is a <code>Codec&lt;T&gt;</code>, where <code>T</code> represents the type of the <code>IGlobalLootModifier</code> to use.</p> <p>For ease of convenience, a loot conditions codec has been provided for an easy addition to a record-like codec via <code>LootModifier#codecStart</code>. This is utilized for data generation of the associated loot modifier.</p> <pre><code>// For some DeferredRegister&lt;Codec&lt;? extends IGlobalLootModifier&gt;&gt; REGISTRAR\npublic static final RegistryObject&lt;Codec&lt;ExampleModifier&gt;&gt; = REGISTRAR.register(\"example_codec\", () -&gt;\n  RecordCodecBuilder.create(\n    inst -&gt; LootModifier.codecStart(inst).and(\n      inst.group(\n        Codec.STRING.fieldOf(\"prop1\").forGetter(m -&gt; m.prop1),\n        Codec.INT.fieldOf(\"prop2\").forGetter(m -&gt; m.prop2),\n        ForgeRegistries.ITEMS.getCodec().fieldOf(\"prop3\").forGetter(m -&gt; m.prop3)\n      )\n    ).apply(inst, ExampleModifier::new)\n  )\n);</code></pre> <p>Examples can be found on the Forge Git repository, including silk touch and smelting effects.</p>"},{"location":"en/resources/server/loottables/","title":"Loot Tables","text":"<p>Loot tables are logic files which dictate what should happen when various actions or scenarios occur. Although the vanilla system deals purely with item generation, the system can be expanded to perform any number of defined actions.</p>"},{"location":"en/resources/server/loottables/#data-driven-tables","title":"Data-Driven Tables","text":"<p>Most loot tables within vanilla are data driven via JSON. This means that a mod is not necessary to create a new loot table, only a Data pack. A full list on how to create and put these loot tables within the mod\u2019s <code>resources</code> folder can be found on the Minecraft Wiki.</p>"},{"location":"en/resources/server/loottables/#using-a-loot-table","title":"Using a Loot Table","text":"<p>A loot table is referenced by its <code>ResourceLocation</code> which points to <code>data/&lt;namespace&gt;/loot_tables/&lt;path&gt;.json</code>. The <code>LootTable</code> associated with the reference can be obtained using <code>LootTables#get</code>, where <code>LootTables</code> can be obtained via <code>MinecraftServer#getLootTables</code>.</p> <p>A loot table is always generated within a given context. The <code>LootContext</code> defines the level the table is generated in, a specific randomizer and seed if desired, luck for better generation, the <code>LootContextParam</code>s which define scenario context, and any dynamic information that should occur on activation. A loot context can be created using the constructor for <code>LootContext$Builder</code> and built using <code>LootContext$Builder#create</code>.</p> <p>The created <code>LootContext</code> adheres to some <code>LootContextParamSet</code>. The param set defines which <code>LootContextParam</code>s are required or optional in context for generation. A loot table generated within a given param set must only use contexts that are defined.</p> <p>A <code>LootTable</code> can be used to generate <code>ItemStack</code>s using one of the available methods:</p> Method Description <code>getRandomItemsRaw</code> Consumes the items generated by the loot table. <code>getRandomItems</code> Returns the items generated by the loot table. <code>fill</code> Fills a container with the generated loot table. <p>Note</p> <p>Loot tables were built for generating items, so the methods expect some handling for the <code>ItemStack</code>s.</p>"},{"location":"en/resources/server/loottables/#additional-features","title":"Additional Features","text":"<p>Forge provides some additional behavior to loot tables for greater control of the system.</p>"},{"location":"en/resources/server/loottables/#loottableloadevent","title":"<code>LootTableLoadEvent</code>","text":"<p><code>LootTableLoadEvent</code> is an event fired on the Forge event bus which is fired whenever a loot table is loaded. If the event is canceled, then an empty loot table will be loaded instead.</p> <p>Important</p> <p>Do not modify a loot table\u2019s drops through this event. Those modifications should be done using global loot modifiers.</p>"},{"location":"en/resources/server/loottables/#loot-pool-names","title":"Loot Pool Names","text":"<p>Loot pools can be named using the <code>name</code> key. Any non-named loot pool will be the hash code of the pool prefixed by <code>custom#</code>.</p> <pre><code>// For some loot pool\n{\n  \"name\": \"example_pool\", // Pool will be named 'example_pool'\n  \"rolls\": {\n    // ...\n  },\n  \"entries\": {\n    // ...\n  }\n}</code></pre>"},{"location":"en/resources/server/loottables/#looting-modifiers","title":"Looting Modifiers","text":"<p>Loot tables are now affected by the <code>LootingLevelEvent</code>, on the Forge event bus, in addition to the looting enchantment.</p>"},{"location":"en/resources/server/loottables/#additional-context-parameters","title":"Additional Context Parameters","text":"<p>Forge extends certain parameter sets to account for missing contexts which may be applicable. <code>LootContextParamSets#CHEST</code> now allows for a <code>LootContextParams#KILLER_ENTITY</code> as chest minecarts are entities which can be broken (or \u2018killed\u2019). <code>LootContextParamSets#FISHING</code> also allows for a <code>LootContextParams#KILLER_ENTITY</code> since the fishing hook is also an entity which is retracted (or \u2018killed\u2019) when the player retrieves it.</p>"},{"location":"en/resources/server/loottables/#multiple-items-on-smelting","title":"Multiple Items on Smelting","text":"<p>When using the <code>SmeltItemFunction</code>, a smelted recipe will now return the actual number of items from the result instead of a single smelted item (e.g. if a smelting recipe returns 3 items and there are 3 drops, then the result would be 9 smelted items instead of 3).</p>"},{"location":"en/resources/server/loottables/#loot-table-id-condition","title":"Loot Table Id Condition","text":"<p>Forge adds an additional <code>LootItemCondition</code> which allows certain items to generate for a specific table. This is typically used within global loot modifiers.</p> <pre><code>// In some loot pool or pool entry\n{\n  \"conditions\": [\n    {\n      \"condition\": \"forge:loot_table_id\",\n      // Will apply when the loot table is for dirt\n      \"loot_table_id\": \"minecraft:blocks/dirt\"\n    }\n  ]\n}</code></pre>"},{"location":"en/resources/server/loottables/#can-tool-perform-action-condition","title":"Can Tool Perform Action Condition","text":"<p>Forge adds an additional <code>LootItemCondition</code> which checks whether the given <code>LootContextParams#TOOL</code> can perform the specified <code>ToolAction</code>.</p> <pre><code>// In some loot pool or pool entry\n{\n  \"conditions\": [\n    {\n      \"condition\": \"forge:can_tool_perform_action\",\n      // Will apply when the tool can strip a log like an axe\n      \"action\": \"axe_strip\"\n    }\n  ]\n}</code></pre>"},{"location":"en/resources/server/tags/","title":"Tags","text":"<p>Tags are generalized sets of objects in the game used for grouping related things together and providing fast membership checks.</p>"},{"location":"en/resources/server/tags/#declaring-your-own-groupings","title":"Declaring Your Own Groupings","text":"<p>Tags are declared in your mod\u2019s datapack. For example, a <code>TagKey&lt;Block&gt;</code> with a given identifier of  <code>modid:foo/tagname</code> will reference a tag at <code>/data/&lt;modid&gt;/tags/blocks/foo/tagname.json</code>. Tags for <code>Block</code>s, <code>Item</code>s, <code>EntityType</code>s, <code>Fluid</code>s, and <code>GameEvent</code>s use the plural forms for their folder location while all other registries use the singular version (<code>EntityType</code> uses the folder <code>entity_types</code> while <code>Potion</code> would use the folder <code>potion</code>). Similarly, you may append to or override tags declared in other domains, such as Vanilla, by declaring your own JSONs. For example, to add your own mod\u2019s saplings to the Vanilla sapling tag, you would specify it in <code>/data/minecraft/tags/blocks/saplings.json</code>, and Vanilla will merge everything into one tag at reload, if the <code>replace</code> option is false. If <code>replace</code> is true, then all entries before the json specifying <code>replace</code> will be removed. Values listed that are not present will cause the tag to error unless the value is listed using an <code>id</code> string and <code>required</code> boolean set to false, as in the following example:</p> <pre><code>{\n  \"replace\": false,\n  \"values\": [\n    \"minecraft:gold_ingot\",\n    \"mymod:my_ingot\",\n    {\n      \"id\": \"othermod:ingot_other\",\n      \"required\": false\n    }\n  ]\n}</code></pre> <p>See the Vanilla wiki for a description of the base syntax.</p> <p>There is also a Forge extension on the Vanilla syntax. You may declare a <code>remove</code> array of the same format as the <code>values</code> array. Any values listed here will be removed from the tag. This acts as a finer grained version of the Vanilla <code>replace</code> option.</p>"},{"location":"en/resources/server/tags/#using-tags-in-code","title":"Using Tags In Code","text":"<p>Tags for all registries are automatically sent from the server to any remote clients on login and reload. <code>Block</code>s, <code>Item</code>s, <code>EntityType</code>s, <code>Fluid</code>s, and <code>GameEvent</code>s are special cased as they have <code>Holder</code>s allowing for available tags to be accessible through the object itself.</p> <p>Note</p> <p>Intrusive <code>Holder</code>s may be removed in a future version of Minecraft. If they are, the below methods can be used instead to query the associated <code>Holder</code>s.</p>"},{"location":"en/resources/server/tags/#itagmanager","title":"ITagManager","text":"<p>Forge wrapped registries provide an additional helper for creating and managing tags through <code>ITagManager</code> which can be obtained via <code>IForgeRegistry#tags</code>. Tags can be created using using <code>#createTagKey</code> or <code>#createOptionalTagKey</code>. Tags or registry objects can also be checked for either or using <code>#getTag</code> or <code>#getReverseTag</code> respectively.</p>"},{"location":"en/resources/server/tags/#custom-registries","title":"Custom Registries","text":"<p>Custom registries can create tags when constructing their <code>DeferredRegister</code> via <code>#createTagKey</code> or <code>#createOptionalTagKey</code> respectively. Their tags or registry objects can then checked for either using the <code>IForgeRegistry</code> obtained by calling <code>DeferredRegister#makeRegistry</code>.</p>"},{"location":"en/resources/server/tags/#referencing-tags","title":"Referencing Tags","text":"<p>There are four methods of creating a tag wrapper:</p> Method For <code>*Tags#create</code> <code>BannerPattern</code>, <code>Biome</code>, <code>Block</code>, <code>CatVariant</code>, <code>DamageType</code>, <code>EntityType</code>, <code>FlatLevelGeneratorPreset</code>, <code>Fluid</code>, <code>GameEvent</code>, <code>Instrument</code>, <code>Item</code>, <code>PaintingVariant</code>, <code>PoiType</code>, <code>Structure</code>, and <code>WorldPreset</code> where <code>*</code> represents one of these types. <code>ITagManager#createTagKey</code> Forge wrapped vanilla registries, registries can be obtained from <code>ForgeRegistries</code>. <code>DeferredRegister#createTagKey</code> Custom forge registries. <code>TagKey#create</code> Vanilla registries without forge wrappers, registries can be obtained from <code>Registry</code>. <p>Registry objects can check their tags or registry objects either through their <code>Holder</code> or through <code>ITag</code>/<code>IReverseTag</code> for vanilla or forge registry objects respectively.</p> <p>Vanilla registry objects can grab their associated holder using either <code>Registry#getHolder</code> or <code>Registry#getHolderOrThrow</code> and then compare if the registry object has a tag using <code>Holder#is</code>.</p> <p>Forge registry objects can grab their tag definition using either <code>ITagManager#getTag</code> or <code>ITagManager#getReverseTag</code> and then compare if a registry object has a tag using <code>ITag#contains</code> or <code>IReverseTag#containsTag</code> respectively.</p> <p>Tag-holding registry objects contain a method called <code>#is</code> in either their registry object or state-aware class to check whether the object belongs to a certain tag.</p> <p>As an example: <pre><code>public static final TagKey&lt;Item&gt; myItemTag = ItemTags.create(new ResourceLocation(\"mymod\", \"myitemgroup\"));\n\npublic static final TagKey&lt;Potion&gt; myPotionTag = ForgeRegistries.POTIONS.tags().createTagKey(new ResourceLocation(\"mymod\", \"mypotiongroup\"));\n\npublic static final TagKey&lt;VillagerType&gt; myVillagerTypeTag = TagKey.create(Registries.VILLAGER_TYPE, new ResourceLocation(\"mymod\", \"myvillagertypegroup\"));\n\n// In some method:\n\nItemStack stack = /*...*/;\nboolean isInItemGroup = stack.is(myItemTag);\n\nPotion potion = /*...*/;\nboolean isInPotionGroup  = ForgeRegistries.POTIONS.tags().getTag(myPotionTag).contains(potion);\n\nResourceKey&lt;VillagerType&gt; villagerTypeKey = /*...*/;\nboolean isInVillagerTypeGroup = BuiltInRegistries.VILLAGER_TYPE.getHolder(villagerTypeKey).map(holder -&gt; holder.is(myVillagerTypeTag)).orElse(false);</code></pre></p>"},{"location":"en/resources/server/tags/#conventions","title":"Conventions","text":"<p>There are several conventions that will help facilitate compatibility in the ecosystem:</p> <ul> <li>If there is a Vanilla tag that fits your block or item, add it to that tag. See the list of Vanilla tags.</li> <li>If there is a Forge tag that fits your block or item, add it to that tag. The list of tags declared by Forge can be seen on GitHub.</li> <li>If there is a group of something you feel should be shared by the community, use the <code>forge</code> namespace instead of your mod id.</li> <li>Tag naming conventions should follow Vanilla conventions. In particular, item and block groupings are plural instead of singular (e.g. <code>minecraft:logs</code>, <code>minecraft:saplings</code>).</li> <li>Item tags should be sorted into subdirectories according to their type (e.g. <code>forge:ingots/iron</code>, <code>forge:nuggets/brass</code>, etc.).</li> </ul>"},{"location":"en/resources/server/tags/#migration-from-oredictionary","title":"Migration from OreDictionary","text":"<ul> <li>For recipes, tags can be used directly in the vanilla recipe format (see below).</li> <li>For matching items in code, see the section above.</li> <li>If you are declaring a new type of item grouping, follow a couple naming conventions:</li> <li>Use <code>domain:type/material</code>. When the name is a common one that all modders should adopt, use the <code>forge</code> domain.</li> <li>For example, brass ingots should be registered under the <code>forge:ingots/brass</code> tag and cobalt nuggets under the <code>forge:nuggets/cobalt</code> tag.</li> </ul>"},{"location":"en/resources/server/tags/#using-tags-in-recipes-and-advancements","title":"Using Tags in Recipes and Advancements","text":"<p>Tags are directly supported by Vanilla. See the respective Vanilla wiki pages for recipes and advancements for usage details.</p>"},{"location":"en/resources/server/recipes/","title":"Recipes","text":"<p>Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates.</p>"},{"location":"en/resources/server/recipes/#data-driven-recipes","title":"Data-Driven Recipes","text":"<p>Most recipe implementations within vanilla are data driven via JSON. This means that a mod is not necessary to create a new recipe, only a Data pack. A full list on how to create and put these recipes within the mod\u2019s <code>resources</code> folder can be found on the Minecraft Wiki.</p> <p>A recipe can be obtained within the Recipe Book as a reward for completing an advancement. Recipe advancements always have <code>minecraft:recipes/root</code> as their parent, to not to appear on the advancement screen. The default criteria to gain the recipe advancement is a check if the user has unlocked the recipe from using it once or receiving it through a command like <code>/recipe</code>:</p> <pre><code>// Within some recipe advancement json\n\"has_the_recipe\": { // Criteria label\n  // Succeeds if examplemod:example_recipe is used\n  \"trigger\": \"minecraft:recipe_unlocked\",\n  \"conditions\": {\n    \"recipe\": \"examplemod:example_recipe\"\n  }\n}\n//...\n\"requirements\": [\n  [\n    \"has_the_recipe\"\n    // ... Other criteria labels to be ORed against to unlock recipe\n  ]\n]</code></pre> <p>Data-driven recipes and their unlocking advancement can be generated via <code>RecipeProvider</code>.</p>"},{"location":"en/resources/server/recipes/#recipe-manager","title":"Recipe Manager","text":"<p>Recipes are loaded and stored via the <code>RecipeManager</code>. Any operations relating to getting available recipe(s) are handled by this manager. There are two important methods to know of:</p> Method Description <code>getRecipeFor</code> Gets the first recipe that matches the current input. <code>getRecipesFor</code> Gets all recipes that match the current input. <p>Each method takes in a <code>RecipeType</code>, which denotes what method is being applied to use the recipe (crafting, smelting, etc.), a <code>Container</code> which holds the configuration of the inputs, and the current level which is passed to <code>Recipe#matches</code> along with the container.</p> <p>Important</p> <p>Forge provides the <code>RecipeWrapper</code> utility class which extends <code>Container</code> for wrapping around <code>IItemHandler</code>s and passing them to methods which requires a <code>Container</code> parameter.</p> <pre><code>// Within some method with IItemHandlerModifiable handler\nrecipeManger.getRecipeFor(RecipeType.CRAFTING, new RecipeWrapper(handler), level);</code></pre>"},{"location":"en/resources/server/recipes/#additional-features","title":"Additional Features","text":"<p>Forge provides some additional behavior to the recipe schema and its implementations for greater control of the system.</p>"},{"location":"en/resources/server/recipes/#recipe-itemstack-result","title":"Recipe ItemStack Result","text":"<p>Except for <code>minecraft:stonecutting</code> recipes, all vanilla recipe serializers expand the <code>result</code> tag to take in a full <code>ItemStack</code> as a <code>JsonObject</code> instead of just the item name and amount in some cases.</p> <pre><code>// In some recipe JSON\n\"result\": {\n  // The name of the registry item to give as a result\n  \"item\": \"examplemod:example_item\",\n  // The number of items to return\n  \"count\": 4,\n  // The tag data of the stack, can also be a string\n  \"nbt\": {\n      // Add tag data here\n  }\n}</code></pre> <p>Note</p> <p>The <code>nbt</code> tag can alternatively be a string containing a stringified NBT (or SNBT) for data which cannot be properly represented as a JSON object (such as <code>IntArrayTag</code>s).</p>"},{"location":"en/resources/server/recipes/#conditional-recipes","title":"Conditional Recipes","text":"<p>Recipes and their unlocking advancement can be loaded conditionally and defaulted depending on what information is present (mod loaded, item exists, etc.).</p>"},{"location":"en/resources/server/recipes/#larger-crafting-grids","title":"Larger Crafting Grids","text":"<p>By default, vanilla declares a maximum width and height for a crafting grid to be a 3x3 square. This can be expanded by calling <code>ShapedRecipe#setCraftingSize</code> with the new width and height in <code>FMLCommonSetupEvent</code>.</p> <p>Warning</p> <p><code>ShapedRecipe#setCraftingSize</code> is NOT thread-safe. As such, it should be enqueued to the synchronous work queue via <code>FMLCommonSetupEvent#enqueueWork</code>.</p> <p>Larger crafting grids in recipes can be data generated.</p>"},{"location":"en/resources/server/recipes/#ingredient-types","title":"Ingredient Types","text":"<p>A few additional ingredient types are added to allow recipes to have inputs which check tag data or combine multiple ingredients into a single input checker.</p>"},{"location":"en/resources/server/recipes/custom/","title":"Custom Recipes","text":"<p>Every recipe definition is made up of three components: the <code>Recipe</code> implementation which holds the data and handles the execution logic with the provided inputs, the <code>RecipeType</code> which represents the category or context the recipe will be used in, and the <code>RecipeSerializer</code> which handles decoding and network communication of the recipe data. How one chooses to use the recipe is up to the implementor.</p>"},{"location":"en/resources/server/recipes/custom/#recipe","title":"Recipe","text":"<p>The <code>Recipe</code> interface describes the recipe data and the execution logic. This includes matching the inputs and providing the associated result. As the recipe subsystem performs item transformations by default, the inputs are supplied through a <code>Container</code> subtype.</p> <p>Important</p> <p>The <code>Container</code>s passed into the recipe should be treated as if its contents were immutable. Any mutable operations should be performed on a copy of the input through <code>ItemStack#copy</code>.</p> <p>To be able to obtain a recipe instance from the manager, <code>#matches</code> must return true. This method checks against the provided container to see whether the associated inputs are valid. <code>Ingredient</code>s can be used for validation by calling <code>Ingredient#test</code>.</p> <p>If the recipe has been chosen, it is then built using <code>#assemble</code> which may use data from the inputs to create the result.</p> <p>Tip</p> <p><code>#assemble</code> should always produce a unique <code>ItemStack</code>. If unsure whether <code>#assemble</code> does so, call <code>ItemStack#copy</code> on the result before returning.</p> <p>Most of the other methods are purely for integration with the recipe book.</p> <pre><code>public record ExampleRecipe(Ingredient input, int data, ItemStack output) implements Recipe&lt;Container&gt; {\n  // Implement methods here\n}</code></pre> <p>Note</p> <p>While a record is used in the above example, it is not required to do so in your own implementation.</p>"},{"location":"en/resources/server/recipes/custom/#recipetype","title":"RecipeType","text":"<p><code>RecipeType</code> is responsible for defining the category or context the recipe will be used within. For example, if a recipe was going to be smelted in a furnace, it would have a type of <code>RecipeType#SMELTING</code>. Being blasted in a blast furnace would have a type of <code>RecipeType#BLASTING</code>.</p> <p>If none of the existing types match what context the recipe will be used within, then a new <code>RecipeType</code> must be registered.</p> <p>The <code>RecipeType</code> instance must then be returned by <code>Recipe#getType</code> in the new recipe subtype.</p> <pre><code>// For some RegistryObject&lt;RecipeType&gt; EXAMPLE_TYPE\n// In ExampleRecipe\n@Override\npublic RecipeType&lt;?&gt; getType() {\n  return EXAMPLE_TYPE.get();\n}</code></pre>"},{"location":"en/resources/server/recipes/custom/#recipeserializer","title":"RecipeSerializer","text":"<p>A <code>RecipeSerializer</code> is responsible for decoding JSONs and communicating across the network for an associated <code>Recipe</code> subtype. Each recipe decoded by the serializer is saved as a unique instance within the <code>RecipeManager</code>. A <code>RecipeSerializer</code> must be registered.</p> <p>Only three methods need to be implemented for a <code>RecipeSerializer</code>:</p> Method Description fromJson Decodes a JSON into the <code>Recipe</code> subtype. toNetwork Encodes a <code>Recipe</code> to the buffer to send to the client. The recipe identifier does not need to be encoded. fromNetwork Decodes a <code>Recipe</code> from the buffer sent from the server. The recipe identifier does not need to be decoded. <p>The <code>RecipeSerializer</code> instance must then be returned by <code>Recipe#getSerializer</code> in the new recipe subtype.</p> <pre><code>// For some RegistryObject&lt;RecipeSerializer&gt; EXAMPLE_SERIALIZER\n// In ExampleRecipe\n@Override\npublic RecipeSerializer&lt;?&gt; getSerializer() {\n  return EXAMPLE_SERIALIZER.get();\n}</code></pre> <p>Tip</p> <p>There are some useful methods to make reading and writing data for recipes easier. <code>Ingredient</code>s can use <code>#fromJson</code>, <code>#toNetwork</code>, and <code>#fromNetwork</code> while <code>ItemStack</code>s can use <code>CraftingHelper#getItemStack</code>, <code>FriendlyByteBuf#writeItem</code>, and <code>FriendlyByteBuf#readItem</code>.</p>"},{"location":"en/resources/server/recipes/custom/#building-the-json","title":"Building the JSON","text":"<p>Custom Recipe JSONs are stored in the same place as other recipes. The specified <code>type</code> should represent the registry name of the recipe serializer. Any additional data is specified by the serializer during decoding.</p> <pre><code>{\n  // The custom serializer registry name\n  \"type\": \"examplemod:example_serializer\",\n  \"input\": {\n    // Some ingredient input\n  },\n  \"data\": 0, // Some data wanted for the recipe\n  \"output\": {\n    // Some stack output\n  }\n}</code></pre>"},{"location":"en/resources/server/recipes/custom/#non-item-logic","title":"Non-Item Logic","text":"<p>If items are not used as part of the input or result of a recipe, then the normal methods provided in <code>RecipeManager</code> will not be useful. Instead, an additional method for testing a recipe\u2019s validity and/or supplying the result should be added to the custom <code>Recipe</code> instance. From there, all the recipes for that specific <code>RecipeType</code> can be obtained via <code>RecipeManager#getAllRecipesFor</code> and then checked and/or supplied the result using the newly implemented methods.</p> <pre><code>// In some Recipe subimplementation ExampleRecipe\n\n// Checks the block at the position to see if it matches the stored data\nboolean matches(Level level, BlockPos pos);\n\n// Creates the block state to set the block at the specified position to\nBlockState assemble(RegistryAccess access);\n\n// In some manager class\npublic Optional&lt;ExampleRecipe&gt; getRecipeFor(Level level, BlockPos pos) {\n  return level.getRecipeManager()\n    .getAllRecipesFor(exampleRecipeType) // Gets all recipes\n    .stream() // Looks through all recipes for types\n    .filter(recipe -&gt; recipe.matches(level, pos)) // Checks if the recipe inputs are valid\n    .findFirst(); // Finds the first recipe whose inputs match\n}</code></pre>"},{"location":"en/resources/server/recipes/custom/#data-generation","title":"Data Generation","text":"<p>All custom recipes, regardless of input or output data, can be created into a <code>FinishedRecipe</code> for data generation using the <code>RecipeProvider</code>.</p>"},{"location":"en/resources/server/recipes/incode/","title":"Non-Datapack Recipes","text":"<p>Not all recipes are simplistic enough or migrated to using data-driven recipes. Some subsystems still need to be patched within the codebase to provide support for adding new recipes.</p>"},{"location":"en/resources/server/recipes/incode/#brewing-recipes","title":"Brewing Recipes","text":"<p>Brewing is one of the few recipes that still exist in code. Brewing recipes are added as part of a bootstrap within <code>PotionBrewing</code> for their containers, container recipes, and potion mixes. To expand upon the existing system, Forge allows brewing recipes to be added by calling <code>BrewingRecipeRegistry#addRecipe</code> in <code>FMLCommonSetupEvent</code>.</p> <p>Warning</p> <p><code>BrewingRecipeRegistry#addRecipe</code> must be called within the synchronous work queue via <code>#enqueueWork</code> as the method is not thread-safe.</p> <p>The default implementation takes in an input ingredient, a catalyst ingredient, and a stack output for a standard implementation. Additionally, an <code>IBrewingRecipe</code> instance can be supplied instead to do the transformations.</p>"},{"location":"en/resources/server/recipes/incode/#ibrewingrecipe","title":"IBrewingRecipe","text":"<p><code>IBrewingRecipe</code> is a pseudo-<code>Recipe</code> interface that checks whether the input and catalyst is valid and provides the associated output if so. This is provided through <code>#isInput</code>, <code>#isIngredient</code>, and <code>#getOutput</code> respectively. The output method has access to the input and catalyst stacks to construct the result.</p> <p>Important</p> <p>When copying data between <code>ItemStack</code>s or <code>CompoundTag</code>s, make sure to use their respective <code>#copy</code> methods to create unique instances.</p> <p>There is no wrapper for adding additional potion containers or potion mixes similar to vanilla. A new <code>IBrewingRecipe</code> implementation will need to be added to replicate this behavior.</p>"},{"location":"en/resources/server/recipes/incode/#anvil-recipes","title":"Anvil Recipes","text":"<p>Anvils are responsible for taking a damaged input and given some material or a similar input, remove some of the damage on the input result. As such, its system is not easily data-driven. However, as anvil recipes are an input with some number of materials equals some output when the user has the required experience levels, it can be modified to create a pseudo-recipe system via <code>AnvilUpdateEvent</code>. This takes in the input and materials and allows the modder to specify the output, experience level cost, and number of materials to use for the output. The event can also prevent any output by canceling it.</p> <pre><code>// Checks whether the left and right items are correct\n// When true, sets the output, level experience cost, and material amount\npublic void updateAnvil(AnvilUpdateEvent event) {\n  if (event.getLeft().is(...) &amp;&amp; event.getRight().is(...)) {\n    event.setOutput(...);\n    event.setCost(...);\n    event.setMaterialCost(...);\n  }\n}</code></pre> <p>The update event must be attached to the Forge event bus.</p>"},{"location":"en/resources/server/recipes/incode/#loom-recipes","title":"Loom Recipes","text":"<p>Looms are responsible for applying a dye and pattern (either from the loom or from an item) to a banner. While the banner and the dye must be a <code>BannerItem</code> or <code>DyeItem</code> respectively, custom patterns can be created and applied in the loom. Banner Patterns can be created by registering a <code>BannerPattern</code>.</p> <p>Important</p> <p><code>BannerPattern</code>s which are in the <code>minecraft:no_item_required</code> tag appear as an option in the loom. Patterns not in this tag must have an accompanying <code>BannerPatternItem</code> to be used along with an associated tag.</p> <pre><code>private static final DeferredRegister&lt;BannerPattern&gt; REGISTER = DeferredRegister.create(Registries.BANNER_PATTERN, \"examplemod\");\n\n// Takes in the pattern name to send over the network\npublic static final BannerPattern EXAMPLE_PATTERN = REGISTER.register(\"example_pattern\", () -&gt; new BannerPattern(\"examplemod:ep\"));</code></pre>"},{"location":"en/resources/server/recipes/ingredients/","title":"Ingredients","text":"<p><code>Ingredient</code>s are predicate handlers for item-based inputs which check whether a certain <code>ItemStack</code> meets the condition to be a valid input in a recipe. All vanilla recipes that take inputs use an <code>Ingredient</code> or a list of <code>Ingredient</code>s, which is then merged into a single <code>Ingredient</code>.</p>"},{"location":"en/resources/server/recipes/ingredients/#custom-ingredients","title":"Custom Ingredients","text":"<p>Custom ingredients can be specified by setting <code>type</code> to the name of the ingredient\u2019s serializer, with the exception of compound ingredients. When no type is specified, <code>type</code> defaults to the vanilla ingredient <code>minecraft:item</code>. Custom ingredients can also easily be used in data generation.</p>"},{"location":"en/resources/server/recipes/ingredients/#forge-types","title":"Forge Types","text":"<p>Forge provides a few additional <code>Ingredient</code> types for programmers to implement. </p>"},{"location":"en/resources/server/recipes/ingredients/#compoundingredient","title":"CompoundIngredient","text":"<p>Though they are functionally identical, Compound ingredients replaces the way one would implement a list of ingredients would in a recipe. They work as a set OR where the passed in stack must be within at least one of the supplied ingredients. This change was made to allow custom ingredients to work correctly within lists. As such, no type needs to be specified.</p> <pre><code>// For some input\n[\n  // At least one of these ingredients must match to succeed\n  {\n    // Ingredient\n  },\n  {\n    // Custom ingredient\n    \"type\": \"examplemod:example_ingredient\"\n  }\n]</code></pre>"},{"location":"en/resources/server/recipes/ingredients/#strictnbtingredient","title":"StrictNBTIngredient","text":"<p><code>StrictNBTIngredient</code>s compare the item, damage, and the share tags (as defined by <code>IForgeItem#getShareTag</code>) on an <code>ItemStack</code> for exact equivalency. This can be used by specifying the <code>type</code> as <code>forge:nbt</code>.</p> <pre><code>// For some input\n{\n  \"type\": \"forge:nbt\",\n  \"item\": \"examplemod:example_item\",\n  \"nbt\": {\n    // Add nbt data (must match exactly what is on the stack)\n  }\n}</code></pre>"},{"location":"en/resources/server/recipes/ingredients/#partialnbtingredient","title":"PartialNBTIngredient","text":"<p><code>PartialNBTIngredient</code>s are a looser version of <code>StrictNBTIngredient</code> as they compare against a single or set of items and only keys specified within the share tag (as defined by <code>IForgeItem#getShareTag</code>). This can be used by specifying the <code>type</code> as <code>forge:partial_nbt</code>.</p> <pre><code>// For some input\n{\n  \"type\": \"forge:partial_nbt\",\n\n  // Either 'item' or 'items' must be specified\n  // If both are specified, only 'item' will be read\n  \"item\": \"examplemod:example_item\",\n  \"items\": [\n    \"examplemod:example_item\",\n    \"examplemod:example_item2\"\n    // ...\n  ],\n\n  \"nbt\": {\n    // Checks only for equivalency on 'key1' and 'key2'\n    // All other keys in the stack will not be checked\n    \"key1\": \"data1\",\n    \"key2\": {\n      // Data 2\n    }\n  }\n}</code></pre>"},{"location":"en/resources/server/recipes/ingredients/#intersectioningredient","title":"IntersectionIngredient","text":"<p><code>IntersectionIngredient</code>s work as a set AND where the passed in stack must match all supplied ingredients. There must be at least two ingredients supplied to this. This can be used by specifying the <code>type</code> as <code>forge:intersection</code>.</p> <pre><code>// For some input\n{\n  \"type\": \"forge:intersection\",\n\n  // All of these ingredients must return true to succeed\n  \"children\": [\n    {\n      // Ingredient 1\n    },\n    {\n      // Ingredient 2\n    }\n    // ...\n  ]\n}</code></pre>"},{"location":"en/resources/server/recipes/ingredients/#differenceingredient","title":"DifferenceIngredient","text":"<p><code>DifferenceIngredient</code>s work as a set subtraction (SUB) where the passed in stack must match the first ingredient but must not match the second ingredient. This can be used by specifying the <code>type</code> as <code>forge:difference</code>.</p> <pre><code>// For some input\n{\n  \"type\": \"forge:difference\",\n  \"base\": {\n    // Ingredient the stack is in\n  },\n  \"subtracted\": {\n    // Ingredient the stack is NOT in\n  }\n}</code></pre>"},{"location":"en/resources/server/recipes/ingredients/#creating-custom-ingredients","title":"Creating Custom Ingredients","text":"<p>Custom ingredients can be created by implementing <code>IIngredientSerializer</code> for the created <code>Ingredient</code> subclass.</p> <p>Tip</p> <p>Custom ingredients should subclass <code>AbstractIngredient</code> as it provides some useful abstractions for ease of implementation.</p>"},{"location":"en/resources/server/recipes/ingredients/#ingredient-subclass","title":"Ingredient Subclass","text":"<p>There are three important methods to implement for each ingredient subclass:</p> Method Description getSerializer Returns the serializer used to read and write the ingredient. test Returns true if the input is valid for this ingredient. isSimple Returns false if the ingredient matches on the stack\u2019s tag. <code>AbstractIngredient</code> subclasses will need to define this behavior, while <code>Ingredient</code> subclasses return <code>true</code> by default. <p>All other defined methods are left as an exercise to the reader to use as required for the ingredient subclass.</p>"},{"location":"en/resources/server/recipes/ingredients/#iingredientserializer","title":"IIngredientSerializer","text":"<p><code>IIngredientSerializer</code> subtypes must implement three methods:</p> Method Description parse (JSON) Converts a <code>JsonObject</code> to an <code>Ingredient</code>. parse (Network) Reads the network buffer to decode an <code>Ingredient</code>. write Writes an <code>Ingredient</code> to the network buffer. <p>Additionally, <code>Ingredient</code> subclasses should implement <code>Ingredient#toJson</code> for use with data generation. <code>AbstractIngredient</code> subclasses make <code>#toJson</code> an abstract method requiring the method to be implemented.</p> <p>Afterwards, a static instance should be declared to hold the initialized serializer and then registered using <code>CraftingHelper#register</code> either during the <code>RegisterEvent</code> for <code>RecipeSerializer</code>s or during <code>FMLCommonSetupEvent</code>. The <code>Ingredient</code> subclass return the static instance of the serializer in <code>Ingredient#getSerializer</code>.</p> <pre><code>// In some serializer class\npublic static final ExampleIngredientSerializer INSTANCE = new ExampleIngredientSerializer();\n\n// In some handler class\npublic void registerSerializers(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS,\n    helper -&gt; CraftingHelper.register(registryName, INSTANCE)\n  );\n}\n\n// In some ingredient subclass\n@Override\npublic IIngredientSerializer&lt;? extends Ingredient&gt; getSerializer() {\n  return INSTANCE;\n}</code></pre> <p>Tip</p> <p>If using <code>FMLCommonSetupEvent</code> to register an ingredient serializer, it must be enqueued to the synchronous work queue via <code>FMLCommonSetupEvent#enqueueWork</code> as <code>CraftingHelper#register</code> is not thread-safe.</p>"},{"location":"ko/","title":"MinecraftForge \ubb38\uc11c","text":"<p>\uc774 \ubb38\uc11c\ub294 \ube44\uacf5\uc2dd\uc801\uc778 \ub9c8\uc778\ud06c\ub798\ud504\ud2b8 modding API\uc778 MinecraftForge\uc758 \ud55c\uae00 \ubb38\uc11c\uc785\ub2c8\ub2e4.</p> <p>\uc774 \ubb38\uc11c\ub294 \uc624\uc9c1 Forge\uc5d0 \uad00\ud55c \uac83\uc774\uba70, Java \ud29c\ud1a0\ub9ac\uc5bc\uc774 \uc544\ub2d9\ub2c8\ub2e4.</p> <p>GitHub\uc5d0\uc11c \ubb38\uc11c\uc5d0 \uae30\uc5ec\ud558\uc138\uc694.</p>"},{"location":"ko/contributing/","title":"[Contributing] \uc774 \ubb38\uc11c\uc5d0 \uae30\uc5ec\ud558\uae30","text":"<p>\uc774 \ubb38\uc11c\ub294 \uc124\uba85\uc11c\uc785\ub2c8\ub2e4. \uc5b4\ub5bb\uac8c \ud558\ub294\uc9c0 \uc124\uba85\ud558\uace0 \uc801\ub2f9\ud55c \ubc94\uc8fc\ub85c \ub098\ub220\uc8fc\uc138\uc694. \ub2e4\ub978\uacf3\uc5d0 \ub354 \ub9ce\uc740 \ucf54\ub4dc \uc608\uc81c\ub97c \ubcf4\uc5ec\uc904\uc218 \uc788\ub294 \uc704\ud0a4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.  </p> <p>\uc774 \ubb38\uc11c\ub97c \uc77d\uc744 \uc0ac\ub78c\uc740 Forge\ub97c \ud1b5\ud574 \uc5b4\ub5bb\uac8c \ubaa8\ub4dc\ub97c \ub9cc\ub4dc\ub294\uc9c0 \uc54c\uace0 \uc2f6\uc740 \uc0ac\ub78c\ub4e4\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\ub97c \uc790\ubc14 \uac1c\ubc1c \ud29c\ud1a0\ub9ac\uc5bc \ubb38\uc11c\ub85c \ubc14\uafb8\uc9c0 \ub9c8\uc138\uc694. - \uc790\ubc14 \ud29c\ud1a0\ub9ac\uc5bc \ubb38\uc11c\ub294 JAVA \ud074\ub798\uc2a4\uc640 \uae30\ub2a5\uc801\uc778 \uad6c\uc870\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294\uc9c0 \uc774\ud574\ud558\uace0 \uc2f6\uc5b4\ud55c\ub294 \uc0ac\ub78c\ub4e4\uc744 \uc704\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4.</p>"},{"location":"ko/contributing/#style-guide","title":"[Style Guide] \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc","text":"<p>\uc911\uc694</p> <p>\uc904\ubc14\uafc8\uc744 \uc704\ud574 \u2018\ud0ed\u2019\uc774 \uc544\ub2c8\ub77c \ub450\uac1c\uc758 \uacf5\ubc31(space \ub450 \ubc88)\uc744 \uc0ac\uc6a9\ud558\uc138\uc694.</p> <p>\uc81c\ubaa9\ub4e4\uc740 \ub300\ubb38\uc790\ub85c \uc2dc\uc791\ud558\ub294 \ud45c\uc900 \uc81c\ubaa9 \ud615\uc2dd\uc744 \ub530\ub77c\uc57c \ud569\ub2c8\ub2e4.(\uacf5\uc2dd \uc601\ubb38\ud310 \uae30\uc900) \uc608) * Guide For Contributing to This Documentation * Building and Testing Your Mod</p> <p>\ud2b9\ud788, \ubaa8\ub4e0 \ub2e8\uc5b4\ub97c \ub300\ubb38\uc790\ub85c \uc2dc\uc791\ud558\ub418 \uc911\uc694\ud558\uc9c0 \uc54a\uc740 \ub2e8\uc5b4(\uad00\uc0ac \ub4f1)\ub294 \uc81c\uc678\ud569\ub2c8\ub2e4. \ucca0\uc790, \ubb38\ubc95, \ubb38\ub9e5\uc740 \ubbf8\uad6d \uc601\uc5b4 \uae30\uc900\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e8\uc5b4\ub97c \uc904\uc784\ub9d0 \ub300\uc2e0 \ud480\uc5b4\uc11c \uc368\uc8fc\uc138\uc694. \uc608) \u201care not\u201d O, \u201caren\u2019t\u201d X  </p> <p>\u2019#\u2019(=h1)\ub300\uc2e0 \u2018=\u2019\ub97c, \u2018##\u2019(=h2)\ub300\uc2e0 \u2018-\u2018\ub97c \uc0ac\uc6a9\ud558\uc138\uc694. h3 \uc774\ud558\uc5d0\uc11c \u2018###\u2019 \ub4f1\uc744 \uc0ac\uc6a9\ud558\ub294 \uac74 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc758 \uc18c\uc2a4\uc5d0\ub294 \u2018=\u2019\uacfc \u2018-\u2018\uc758 \uc608\uc81c \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \u2018=\u2019 \uc904\uc740 h1 \ud14d\uc2a4\ud2b8, \u2018-\u2018 \uc904\uc740 h2 \ud14d\uc2a4\ud2b8\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. (git\uc5d0\uc11c docs \ud3f4\ub354 \ubc11\uc758 md \ud30c\uc77c\ub4e4\uc744 \ucc38\uace0\ud558\uba74 \ub429\ub2c8\ub2e4.)</p> <p>\ucf54\ub4dc \uc601\uc5ed \uc2a4\ub2c8\ud3ab \ubc14\uae65\uc758 \uc601\uc5ed\uc774\ub098 \ud568\uc218\ub97c \ucc38\uace0\ud560 \ub54c, \u2018#\u2019 \uad6c\ubd84\uc790 (\uc608. <code>ClassName#methodName</code>)\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc548\ucabd\uc758 class\ub4e4\uc740 \u2018$\u2019 \uad6c\ubd84\uc790\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.(\uc608. <code>ClassName$InnerClassName</code>)  </p> <p>JSON \ucf54\ub4dc \uc601\uc5ed \uc2a4\ub2c8\ud3ab\uc740 <code>js</code> \uad6c\ubb38 \uac15\uc870\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.  </p> <p>\ubaa8\ub4e0 \ub9c1\ud06c\ub294 \ud398\uc774\uc9c0 \uc544\ub798\uc5d0 \uad6c\uccb4\uc801\uc778 \ub9c1\ud06c\ub97c \uba85\uc2dc\ud574\uc57c \ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ub0b4\ubd80 \ub9c1\ud06c\ub294 \uc0c1\ub300\uacbd\ub85c\ub97c \ud1b5\ud574 \ucc38\uc870\ud569\ub2c8\ub2e4.  </p> <p><code>!!! &lt;type&gt;</code>\ub85c \ud45c\uc2dc\ub418\ub294 Admonition\ub4e4\uc740 documented; \ud615\uc2dd\uc73c\ub85c \ud45c\uc2dc\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub79c\ub354\ub9c1\uc774 \uc798\ubabb\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc774 \ud398\uc774\uc9c0\uc758 \u2018\uc911\uc694-\uc904\ubc14\uafc8~\uc0ac\uc6a9\ud558\uc138\uc694\u2019 \ubd80\ubd84)</p>"},{"location":"ko/gettingstarted/","title":"Forge\ub85c \uc2dc\uc791\ud558\uae30{#Getting Started with Forge}","text":"<p>\uae30\ubcf8 \ubaa8\ub4dc\ub97c \uc0dd\uc131\ud558\ub294 \uac00\uc774\ub4dc \ubb38\uc11c\uc785\ub2c8\ub2e4. \uc774 \ud398\uc774\uc9c0\uc758 \ub098\uba38\uc9c0\ub294 \ubc29\ud5a5\uc131\uc5d0 \ub300\ud55c \uac83\uc785\ub2c8\ub2e4.</p>"},{"location":"ko/gettingstarted/#from-zero-to-modding","title":"0\ubd80\ud130 \ubaa8\ub529\uae4c\uc9c0{#From Zero to Modding}","text":"<ol> <li> <p>JDK 17\uacfc JVM 64-bit \ubc84\uc804\uc744 \ubc1b\uc2b5\ub2c8\ub2e4.  \ub9c8\uc778\ud06c\ub798\ud504\ud2b8\uc640 \ub9c8\uc778\ud06c\ub798\ud504\ud2b8 Forge\ub294 \ubaa8\ub450 Java 17\ub85c \ucef4\ud30c\uc77c \ud558\uba70 \uac1c\ubc1c\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4.  32-bit JVM\uc744 \uc0ac\uc6a9\ud558\uba74 \uc544\ub798\uc758 gradle task\ub4e4\uc744 \uc2e4\ud589\ud560 \ub54c \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218 \uc788\uc2b5\ub2c8\ub2e4.  \ub2e4\uc74c \uc911 \ud558\ub098\ub97c \ubc1b\uc73c\uba74 \ub429\ub2c8\ub2e4. Eclipse Adoptium.  </p> </li> <li> <p>Forge \uc0ac\uc774\ud2b8\uc5d0\uc11c MDK (Mod Development Kit) \ub97c \ubc1b\uc73c\uc138\uc694. MDK download </p> </li> <li> <p>\ub2e4\uc6b4\ubc1b\uc740 MDK\ub97c \ube48 \ud3f4\ub354\uc5d0\uc11c \uc555\ucd95\uc744 \ud478\uc138\uc694. <code>src/main/java</code> \uacbd\ub85c\uc5d0 \uc608\uc81c \ubaa8\ub4dc\uc5d0 \ub300\ud55c \ud30c\uc77c\ub4e4\uc774 \uc788\ub294 \uac78 \ud655\uc778\ud558\uc138\uc694. \uadf8 \ud30c\uc77c \uc911 \ubaa8\ub4dc \uac1c\ubc1c\uc5d0 \ud544\uc694\ud55c \ud30c\uc77c\uc740 \uc77c\ubd80\uc785\ub2c8\ub2e4. \uc544\ub9c8 \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uba87\uba87 \ud30c\uc77c\uc744 \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac70\uc5d0\uc694.  \ud30c\uc77c \ubaa9\ub85d\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.  </p> <ul> <li><code>build.gradle</code></li> <li><code>gradlew.bat</code></li> <li><code>gradlew</code></li> <li><code>settings.gradle</code></li> <li>the <code>gradle</code> folder</li> </ul> </li> <li> <p>\uc704 \ubaa9\ub85d\uc758 \ud30c\uc77c\ub4e4\uc744 \uc0c8 \ud3f4\ub354\ub85c \uc774\ub3d9\ud558\uc138\uc694. \uc774 \ud3f4\ub354\uac00 \ub2f9\uc2e0\uc758 \ubaa8\ub4dc \ud504\ub85c\uc81d\ud2b8 \ud3f4\ub354\uac00 \ub420 \uac81\ub2c8\ub2e4.</p> </li> <li> <p>IDE\ub97c \uc120\ud0dd\ud558\uc138\uc694:</p> <ul> <li>Forge\ub294 \uc624\uc9c1 Eclipse\ub85c \uac1c\ubc1c\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud558\uc9c0\ub9cc(only explicitly supports), IntelliJ IDEA\ub098 Visual Studio Code environments\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Netbeans\ubd80\ud130 vim/emacs\uc5d0 \uc774\ub974\uae30\uae4c\uc9c0 \uc5b4\ub290 \ud658\uacbd\uc774\ub4e0 \ub3d9\uc791\ud574\uc57c \ud569\ub2c8\ub2e4. </li> <li>Eclipse\uc640 Intellij IDEA \ubaa8\ub450, \uac01\uc790\uc758 Gradel integration\uc774 \ub098\uba38\uc9c0 \ucd08\uae30 workspace \uc124\uc815\uc744 \ucc98\ub9ac\ud560 \uac81\ub2c8\ub2e4. \uc774\uac83\uc740 Mojang, MinecraftForge, \uba87\uba87 sharing \uc0ac\uc774\ud2b8\uc5d0 \uc788\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ud328\ud0a4\uc9c0\ub97c \ub2e4\uc6b4\ubc1b\ub294 \uac83\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. VSCode\uc758 \uacbd\uc6b0, \u2018Gradel Tasks\u2019 \ud50c\ub7ec\uadf8\uc778\uc774 \ucd08\uae30 workspace \uc124\uc815\uc744 \ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub420 \uac81\ub2c8\ub2e4.</li> <li>build.gradle \ud30c\uc77c\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uc801\uc6a9\ud558\ub824\uba74 (\uc804\ubd80\ub294 \uc544\ub2c8\uc9c0\ub9cc \ub300\ubd80\ubd84) Gradle\uc744 \ud638\ucd9c\ud558\uc5ec \ud504\ub85c\uc81d\ud2b8\ub97c re-evaluate\ud574\uc57c \ud569\ub2c8\ub2e4. \uc704\uc758 \ub450 IDE \ubaa8\ub450 Gradel \ud328\ub110\uc5d0 \uc788\ub294 \u2018Refresh\u2019 \ubc84\ud2bc\uc73c\ub85c \uac00\ub2a5\ud569\ub2c8\ub2e4.</li> </ul> </li> <li> <p>IDE \uc2dc\uc791/\uc2e4\ud589 \uc124\uc815\ud558\uae30:</p> <ul> <li>Eclipse\uc758 \uacbd\uc6b0, <code>genEclipseRuns</code> gradle task (<code>gradlew genEclipseRuns</code>)\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc2dc\uc791 \uc124\uc815(Launch Configurations)\uc744 \ud558\uace0 \uac8c\uc784\uc744 \uc2e4\ud589\ud558\ub294 \ub370\uc5d0 \ud544\uc694\ud55c \uc790\uc0b0(asset)\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uac81\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc774 \ub05d\ub098\uba74 \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c refresh\ud558\uc138\uc694.</li> <li>IntelliJ\uc758 \uacbd\uc6b0, <code>genIntellijRuns</code> gradle task (<code>gradlew genIntellijRuns</code>)\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc2dc\uc791 \uc124\uc815(Launch Configurations)\uc744 \ud558\uace0 \uac8c\uc784\uc744 \uc2e4\ud589\ud558\ub294 \ub370\uc5d0 \ud544\uc694\ud55c \uc790\uc0b0(asset)\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uac81\ub2c8\ub2e4. \ub9cc\uc57d \u201cmodule not specified\u201d\ub77c\ub294 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\ub2e4\uba74, \ub450 \uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \u201cmain\u201d \ubaa8\ub4c8\uc744 \uc120\ud0dd\ud558\ub294 \uc124\uc815(configuration)\uc744 \uc218\uc815\ud558\uac70\ub098 <code>ideaModule</code> \ud504\ub85c\ud37c\ud2f0\ub97c \ud1b5\ud574 \uba85\uc2dc(specify)\ud558\uba74 \ub429\ub2c8\ub2e4.</li> <li>VSCode\uc758 \uacbd\uc6b0, <code>genVSCodeRuns</code> gradle task (<code>gradlew genVSCodeRuns</code>)\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc2dc\uc791 \uc124\uc815(Launch Configurations)\uc744 \ud558\uace0 \uac8c\uc784\uc744 \uc2e4\ud589\ud558\ub294 \ub370\uc5d0 \ud544\uc694\ud55c \uc790\uc0b0(asset)\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uac81\ub2c8\ub2e4.  </li> </ul> </li> </ol>"},{"location":"ko/gettingstarted/#customizing-mod-information","title":"Mod \uc815\ubcf4 \uc218\uc815\ud558\uae30{#Customizing Mod Information}","text":"<p><code>build.gradle</code> \ud30c\uc77c\uc744 \uc218\uc815\ud558\uba74 \ub2f9\uc2e0\uc758 \ubaa8\ub4dc\uac00 \uc5b4\ub5bb\uac8c \ub9cc\ub4e4\uc5b4\uc84c\ub294\uc9c0 \uc218\uc815(customize) \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ud30c\uc77c \uc774\ub984, \ubc84\uc804, \uadf8 \uc678 \ub4f1\ub4f1).  <code>build.gradle</code> \uc548\uc5d0 \uc788\ub294 \ub300\ubd80\ubd84\uc740 \uc9c0\uc6b0\uac70\ub098 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.  </p> <p>\uc911\uc694</p> <p><code>settings.gradle</code>\uc744 \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694. \uc815\ud655\ud558\uac8c \uc5b4\ub5a4 \uac83\uc778\uc9c0 \ubaa8\ub978\ub2e4\uba74\uc694. default \ud14d\uc2a4\ud2b8\ub294 ForgeGradle \ud50c\ub7ec\uadf8\uc778\uc744 \uc5bb\ub294\ub370\uc5d0 \uaf2d \ud544\uc694\ud569\ub2c8\ub2e4.</p>"},{"location":"ko/gettingstarted/#simple-buildgradle-customizations-buildgradle","title":"Simple <code>build.gradle</code> Customizations - \uac04\ub2e8\ud55c <code>build.gradle</code> \ucee4\uc2a4\ud140\ud558\uae30","text":"<p>\uc774 \ucee4\uc2a4\ud140\ub4e4\uc740 \ubaa8\ub4e0 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uad8c\uc7a5\ud569\ub2c8\ub2e4.  </p> <ul> <li>\ud30c\uc77c \uc774\ub984 \ubcc0\uacbd - <code>archivesBaseName</code> \uac12\uc744 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ub9de\uac8c \uc218\uc815</li> <li>\u201cmaven coordinates\u201d \ubcc0\uacbd - <code>group</code> \uc218\uc815\u2019</li> <li>\ubc84\uc804 \uc22b\uc790 \ubcc0\uacbd - <code>version</code> \uc218\uc815</li> <li>\uc2e4\ud589 \uc124\uc815 \uc218\uc815 - \ubaa8\ub4e0 <code>examplemod</code>\ub97c \ub2f9\uc2e0\uc758 \ubaa8\ub4dc\uc758 \ubaa8\ub4dc id\uc5d0 \ub9de\uac8c \uc218\uc815</li> </ul>"},{"location":"ko/gettingstarted/#migration-to-mojangs-official-mappings-mojang-mapping","title":"Migration to Mojang\u2019s Official Mappings - Mojang\uc758 \uacf5\uc2dd Mapping \ud569\uce58\uae30","text":"<p>Forge\ub294 Mojang\uc758 \uacf5\uc2dd Mapping\uc774\ub098 MojMaps\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.  \uacf5\uc2dd mapping\uc740 class, method, field name\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud30c\ub77c\ubbf8\ud130\uc640 javadocs\ub294 \uc774 mapping \uc138\ud2b8\uc5d0 \uc81c\uacf5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  \ud604\uc7ac \uc774\ub7f0 mapping\ub4e4\uc774 \ubc95\uc801\uc73c\ub85c \uc548\uc804\ud558\ub2e4\ub294 \ubcf4\uc7a5\uc740 \uc5c6\uc2b5\ub2c8\ub2e4\ub9cc, Mojang\uc774 mapping\uc774 \uc4f0\uc774\uae38 \uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 Forge\ub294 \uc88b\uc740 \ubbff\uc74c(?)\uc73c\ub85c \uadf8\ub4e4\uc744 \ubc1b\uc544\ub4e4\uc774\uae30\ub85c \uacb0\uc815\ud588\uc2b5\ub2c8\ub2e4.  \uc5ec\uae30\uc11c \ub354 \uc790\uc138\ud55c Forge\uc758 \uc785\uc7a5\uc744 \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. </p>"},{"location":"ko/gettingstarted/#building-testing-your-mod","title":"\ubaa8\ub4dc \ube4c\ub4dc\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\uae30{#Building Testing Your Mod}","text":"<ol> <li> <p>\ubaa8\ub4dc\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud574, <code>gradlew build</code>\ub97c \uc2e4\ud589\ud558\uc138\uc694. <code>build/libs</code> \ud3f4\ub354 \uc544\ub798\uc5d0 <code>[archivesBaseName]-[version].jar</code>\ub77c\ub294 \uc774\ub984\uc73c\ub85c \ud30c\uc77c\uc774 \uc0dd\uc131\ub420\uac81\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc740 Forge\uac00 \uc9c0\uc6d0\ud558\ub294 \ubaa8\ub4dc\ub85c\uc368 <code>.minecraft</code>\ud3f4\ub354\uc5d0 \uc788\ub294 <code>mods</code> \ud3f4\ub354\uc5d0 \ub46c\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0 \ud639\uc740 \ubc30\ud3ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.  </p> </li> <li> <p>\ubaa8\ub4dc\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc124\uc815\ud560\ub54c \uc0dd\uc131\ud55c \uc2e4\ud589 \uad6c\uc131(run configs)\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc544\ub2c8\uba74 <code>gradlew runClient</code>\uc744 \uc2e4\ud589\uc2dc\ud0ac \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.  \uc2e4\ud589\uc124\uc815(run configurations) \uc548\uc5d0 \uc124\uc815\ub41c \ubaa8\ub4e0 \uc18c\uc2a4 \uc9d1\ud569(any source set)\uc5d0\uc11c \ubaa8\ub4dc\uc758 \ucf54\ub4dc(mod\u2019s code)\ub4e4\uacfc \ud568\uaed8 <code>&lt;runDir&gt;</code> \uc704\uce58\uc5d0\uc11c \ub9c8\uc778\ud06c\ub798\ud504\ud2b8\ub97c \uc2e4\ud589\ud560\uac81\ub2c8\ub2e4.  default MDK\ub294 <code>main</code> \uc18c\uc2a4 \uc9d1\ud569\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 <code>src/main/java</code> \uc548\uc5d0\uc11c \uc791\uc131\ub3c4\ub2cc \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \uc801\uc6a9\ub420 \uac81\ub2c8\ub2e4.  </p> </li> <li> <p>\uc11c\ubc84 \uc2e4\ud589 \uad6c\uc131(run config)\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 <code>gradlew runServer</code>\ub97c \ud1b5\ud574 \uc804\uc6a9 \uc11c\ubc84\ub97c \uc2e4\ud589\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 GUI\uc640 \ud568\uaed8 \ub9c8\uc778\ud06c\ub798\ud504\ud2b8 \uc11c\ubc84\ub97c \uc2e4\ud589\ud560 \uac81\ub2c8\ub2e4.  \uccab \uc2e4\ud589 \uc774\ud6c4, \uc11c\ubc84\ub294 \ubc14\ub85c \uaebc\uc9c8\uac81\ub2c8\ub2e4.(\uc167\ub2e4\uc6b4 \ub420\uac81\ub2c8\ub2e4) <code>run/eula.txt</code> \ud30c\uc77c\uc744 \uc218\uc815\ud574 \ub9c8\uc778\ud06c\ub798\ud504\ud2b8 EULA\ub97c \ud5c8\uc6a9\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud55c \ubc88 \ud5c8\uc6a9\ud558\uba74 \uc11c\ubc84\ub294 \ub85c\ub4dc\ub418\uace0 <code>localhost</code>\uc5d0 \uc9c1\uc811 \uc5f0\uacb0\ud558\uc5ec \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.  </p> </li> </ol> <p>\uba54\ubaa8</p> <p>\ub9cc\uc57d \uc804\uc6a9 \uc11c\ubc84\uc5d0\uc11c \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uadf8 \uc11c\ubc84\uc5d0\uc11c \ud14c\uc2a4\ud2b8 \ud558\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4. (=\uc0ac\uc6a9\ud658\uacbd\uacfc \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc744 \uc77c\uce58\uc2dc\ud0a4\ub294 \uac8c \uc88b\uc2b5\ub2c8\ub2e4.)</p>"},{"location":"ko/gettingstarted/structuring/","title":"Structuring Your Mod","text":"<p>Let us look at how to organize your mod into different files and what those files should do.</p>"},{"location":"ko/gettingstarted/structuring/#packaging","title":"Packaging","text":"<p>Pick a unique package name. If you own a URL associated with your project, you can use it as your top level package. For example if you own \u201cexample.com\u201d, you may use <code>com.example</code> as your top level package.</p> <p>Important</p> <p>If you do not own a domain, do not use it for your top level package. You can use your email, a subdomain of where you host a website, or your name/username as long as it can be unique.</p> <p>After the top level package (if you have one), you append a unique name for your mod, such as <code>examplemod</code>. In our case it will end up as <code>com.example.examplemod</code>.</p>"},{"location":"ko/gettingstarted/structuring/#the-modstoml-file","title":"The <code>mods.toml</code> file","text":"<p>Important</p> <p>The license field in the mods.toml is required. If it is not provided, an error will occur. See your choices at https://choosealicense.com/</p> <p>This file defines the metadata of your mod. Its information may be viewed by users from the main screen of the game through the \u2018Mods\u2019 button. A single info file can describe several mods.</p> <p>The <code>mods.toml</code> file is formatted as TOML, the example <code>mods.toml</code> file in the MDK provides comments explaining the contents of the file. It should be stored as <code>src/main/resources/META-INF/mods.toml</code>. A basic <code>mods.toml</code>, describing one mod, may look like this: <pre><code># The name of the mod loader type to load - for regular FML @Mod mods it should be javafml\nmodLoader=\"javafml\"\n# A version range to match for said mod loader - for regular FML @Mod it will be the forge version\n# Forge for 1.19 is version 41\nloaderVersion=\"[41,)\"\n# The license for your mod. This is mandatory and allows for easier comprehension of your redistributive properties.\n# Review your options at https://choosealicense.com/. All rights reserved is the default copyright stance, and is thus the default here.\nlicense=\"All Rights Reserved\"\n# A URL to refer people to when problems occur with this mod\nissueTrackerURL=\"github.com/MinecraftForge/MinecraftForge/issues\"\n# If the mods defined in this file should show as separate resource packs\nshowAsResourcePack=false\n\n[[mods]]\n  modId=\"examplemod\"\n  version=\"1.0.0.0\"\n  displayName=\"Example Mod\"\n  updateJSONURL=\"minecraftforge.net/versions.json\"\n  displayURL=\"minecraftforge.net\"\n  logoFile=\"logo.png\"\n  credits=\"I'd like to thank my mother and father.\"\n  authors=\"Author\"\n  description='''\n  Lets you craft dirt into diamonds. This is a traditional mod that has existed for eons. It is ancient. The holy Notch created it. Jeb rainbowfied it. Dinnerbone made it upside down. Etc.\n  '''\n  displayTest=\"MATCH_VERSION\"\n\n  [[dependencies.examplemod]]\n    modId=\"forge\"\n    mandatory=true\n    versionRange=\"[41,)\"\n    ordering=\"NONE\"\n    side=\"BOTH\"\n\n  [[dependencies.examplemod]]\n    modId=\"minecraft\"\n    mandatory=true\n    versionRange=\"[1.19,1.20)\"\n    ordering=\"NONE\"\n    side=\"BOTH\"</code></pre></p> <p>If any string is specified as <code>${file.jarVersion}</code>, Forge will replace the string with the Implementation Version specified in your jar manifest at runtime. Since the user development environment has no jar manifest to pull from, it will be <code>NONE</code> instead. As such, it is usually recommended to leave the <code>version</code> field alone. Here is a table of attributes that may be given to a mod, where <code>mandatory</code> means there is no default and the absence of the property causes an error.</p> Property Type Default Description modid string mandatory The modid this file is linked to. version string mandatory The version of the mod. It should be just numbers separated by dots, ideally conforming to Forge\u2019s Semantic Versioning structure. displayName string mandatory The user-friendly name of this mod. updateJSONURL string <code>\"\"</code> The URL to a version JSONupdatechecker. displayURL string <code>\"\"</code> A link to the mod\u2019s homepage. logoFile string <code>\"\"</code> The filename of the mod\u2019s logo. It must be placed in the root resource folder, not in a subfolder. credits string <code>\"\"</code> A string that contains any acknowledgements you want to mention. authors string <code>\"\"</code> The authors of this mod. description string mandatory A description of this mod. displayTest string <code>\"MATCH_VERSION\"</code> Controls the display of the mod in the server connection screen. dependencies [list] <code>[]</code> A list of dependencies of this mod. <p>* All version ranges use the Maven Version Range Specification.</p>"},{"location":"ko/gettingstarted/structuring/#the-mod-file","title":"The Mod File","text":"<p>Generally, we will start with a file named after your mod and put into your package. This is the entry point to your mod and will contain some special indicators marking it as such.</p>"},{"location":"ko/gettingstarted/structuring/#what-is-mod","title":"What is <code>@Mod</code>?","text":"<p>This is an annotation indicating to the Forge Mod Loader that the class is a Mod entry point. The <code>@Mod</code> annotation\u2019s value should match a mod id in the <code>src/main/resources/META-INF/mods.toml</code> file.</p>"},{"location":"ko/gettingstarted/structuring/#keeping-your-code-clean-using-sub-packages","title":"Keeping Your Code Clean Using Sub-packages","text":"<p>Rather than clutter up a single class and package with everything, it is recommended that you break your mod into subpackages.</p> <p>A common subpackage strategy has packages for <code>common</code> and <code>client</code> code, which is code that can be run on both server/client and only client, respectively. Inside the <code>common</code> package would go things like Items, Blocks, and Block Entities (which can each, in turn, be another subpackage). Things like Screens and Renderers would go inside the <code>client</code> package.</p> <p>Note</p> <p>This package style is only a suggestion, though it is a commonly used style. Feel free to use your own packaging system.</p> <p>By keeping your code in clean subpackages, you can grow your mod much more organically.</p>"},{"location":"ko/gettingstarted/structuring/#class-naming-schemes","title":"Class Naming Schemes","text":"<p>A common class naming scheme allows easier deciphering of what a class is, and it also makes it easier for someone developing with your mod to find things.</p> <p>For Example:</p> <ul> <li>An <code>Item</code> called <code>PowerRing</code> would be in an <code>item</code> package, with a class name of <code>PowerRingItem</code>.</li> <li>A <code>Block</code> called <code>NotDirt</code> would be in a <code>block</code> package, with a class name of <code>NotDirtBlock</code>.</li> <li>Finally, a <code>BlockEntity</code> for a block called <code>SuperChewer</code> would be a <code>block.entity</code> or <code>blockentity</code> package, with a class name of <code>SuperChewerBlockEntity</code>.</li> </ul> <p>Appending your class names with what kind of object they are makes it easier to figure out what a class is or guess the class for an object.</p>"},{"location":"ko/gettingstarted/versioning/","title":"Versioning","text":"<p>In general projects, Semantic Versioning is often used (which has the format <code>MAJOR.MINOR.PATCH</code>). However, in the case of modding it may be more beneficial to use the format <code>MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH</code> to be able to differentiate between world-breaking and API-breaking changes of a mod.</p>"},{"location":"ko/gettingstarted/versioning/#examples","title":"Examples","text":"<p>Here is a list of examples that can increment the various variables.</p> <ul> <li><code>MCVERSION</code></li> <li>Always matches the Minecraft version the mod is for.</li> <li><code>MAJORMOD</code></li> <li>Removing items, blocks, block entities, etc.</li> <li>Changing or removing previously existing mechanics.</li> <li>Updating to a new Minecraft version.</li> <li><code>MAJORAPI</code></li> <li>Changing the order or variables of enums.</li> <li>Changing return types of methods.</li> <li>Removing public methods altogether.</li> <li><code>MINOR</code></li> <li>Adding items, blocks, block entities, etc.</li> <li>Adding new mechanics.</li> <li>Deprecating public methods. (This is not a <code>MAJORAPI</code> increment since it doesn\u2019t break an API.)</li> <li><code>PATCH</code></li> <li>Bugfixes.</li> </ul> <p>When incrementing any variable, all lesser variables should reset to <code>0</code>. For instance, if <code>MINOR</code> would increment, <code>PATCH</code> would become <code>0</code>. If <code>MAJORMOD</code> would increment, all other variables would become <code>0</code>.</p>"},{"location":"ko/gettingstarted/versioning/#work-in-progress","title":"Work In Progress","text":"<p>If you are in the initial development stage of your mod (before any official releases), the <code>MAJORMOD</code> and <code>MAJORAPI</code> should always be <code>0</code>. Only <code>MINOR</code> and <code>PATCH</code> should be updated every time you build your mod. Once you build an official release (most of the time with a stable API), you should increment <code>MAJORMOD</code> to version <code>1.0.0.0</code>. For any further development stages, refer to the Prereleases and Release candidates section of this document.</p>"},{"location":"ko/gettingstarted/versioning/#multiple-minecraft-versions","title":"Multiple Minecraft Versions","text":"<p>If the mod upgrades to a new version of Minecraft, and the old version will only receive bug fixes, the <code>PATCH</code> variable should be updated based on the version before the upgrade. If the mod is still in active development in both the old and the new version of Minecraft, it is advised to append the version to both build numbers. For example, if the mod is upgraded to version <code>3.0.0.0</code> due to a Minecraft version change, the old mod should also be updated to <code>3.0.0.0</code>. The old version will become, for example, version <code>1.7.10-3.0.0.0</code>, while the new version will become <code>1.8-3.0.0.0</code>. If there are no changes at all when building for a newer Minecraft version, all variables except for the Minecraft version should stay the same.</p>"},{"location":"ko/gettingstarted/versioning/#final-release","title":"Final Release","text":"<p>When dropping support for a Minecraft version, the last build for that version should get the <code>-final</code> suffix. This denotes that the mod will no longer be supported for the denoted <code>MCVERSION</code> and that players should upgrade to a newer version of the mod to continue receiving updates and bug fixes.</p>"},{"location":"ko/gettingstarted/versioning/#pre-releases","title":"Pre-releases","text":"<p>It is also possible to prerelease work-in-progress features, which means new features are released that are not quite done yet. These can be seen as a sort of \u201cbeta\u201d. These versions should be appended with <code>-betaX</code>, where <code>X</code> is the number of the prerelease. (This guide does not use <code>-pre</code> since, at the time of writing, it is not a valid alias for <code>-beta</code>.) Note that already released versions and versions before the initial release can not go into prerelease; variables (mostly <code>MINOR</code>, but <code>MAJORAPI</code> and <code>MAJORMOD</code> can also prerelease) should be updated accordingly before adding the <code>-beta</code> suffix. Versions before the initial release are simply work-in-progress builds.</p>"},{"location":"ko/gettingstarted/versioning/#release-candidates","title":"Release Candidates","text":"<p>Release candidates act as prereleases before an actual version change. These versions should be appended with <code>-rcX</code>, where <code>X</code> is the number of the release candidate which should, in theory, only be increased for bugfixes. Already released versions can not receive release candidates; variables (mostly <code>MINOR</code>, but <code>MAJORAPI</code> and <code>MAJORMOD</code> can also prerelease)  should be updated accordingly before adding the <code>-rc</code> suffix. When releasing a release candidate as stable build, it can either be exactly the same as the last release candidate or have a few more bug fixes.</p>"}]}